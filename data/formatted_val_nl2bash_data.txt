Execute "ls -l" every 2 seconds and highlight the differences in runs </s> watch -d ls -l
Delete all files named "filename" in the current directory tree, except those with paths ending in "/myfolder/filename" </s> find . -name "filename" -and -not -path "*/myfolder/filename" -delete
Search the current directory recursively for regular files last modified less than 2 days ago </s> find . type -f -mtime -2
Create a symbolc link named "latest" to the last modified file or directory in "target-directory" </s> ln -s target-directory/`ls -rt target-directory | tail -n1` latest
find all the files in the entire file system that have been modified exactly 7 days before which end with "conf" </s> find / -name "*conf" -mtime 7
Change user to "amzadm" and group to "root" of "/usr/bin/aws" </s> chown amzadm.root  /usr/bin/aws
Counts lines in each of *.php files in current folder with subfolders and prints total count as well. </s> find . -name '*.php' | xargs wc -l | sort -r
Save the first three octets of the current host's IP address to variable "local" </s> local=$(hostname -I | awk '{print $2}' | cut -f1,2,3 -d".")
Append all regular files modified in the last 24 hours to the "$archive.tar" tar archive </s> find . -mtime -1 -type f -print0 | xargs -0 tar rvf "$archive.tar"
Find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension </s> find . -regextype sed -regex "./test[0-9]\{2\}.txt"
search for a regular/normal file myfile in the folder "/home/weedly" </s> find /home/weedly -name myfile -type f -print
Find all *.php (case insensitive) files and *.js files/directories (case insensitive) under /home/jul/here excluding *.js files/directories under /home/jul/here/exclude/* paths </s> find /home/jul/here -type f -iname "*.php" -o -iname "*.js" ! -path "/home/jul/here/exclude/*"
Find all files/directories with 'my key phrase' in their names under current directory </s> find . -name '*my key phrase*'
Unzip and untar "myarchive.tar.gz" and check for corruption </s> gunzip -c myarchive.tar.gz | tar -tvf -
Update the history file in the current session </s> history -w
Print the list of all directories in the /myfiles directory tree </s> find /myfiles -type d
Tmux configuration to enable mouse support within tmux </s> set -g mouse on
Run "command" on server "host" as user "user" </s> echo "command" | ssh user@host
display all the jpg images in current folder </s> find . -type f -iregex '.*\.jpe?g'
display a long listing of all the files in the current folder which have been modified in the last 24 hours </s> find . -mtime -1 -ls
search for the directory testdir in the folder /home </s> find /home -type d -name testdir
Read a line from standard input and save each word in the bash array variable "first" </s> read -a first
Calculate md5 checksum of $line and save to variable 'md5' </s> md5=$(echo "$line"|md5sum)
Find all files/directories named 'java' under /usr directory </s> find /usr -name java
Find files/directories that belong to user 'ian' under '/tmp' directory tree </s> find /tmp -user ian
Prints path to the target of symbolic link 'relative/path/to/file' </s> dirname `readlink -e relative/path/to/file`
Find all directories under 'test' directory tree that match the regex '[course*]' in their paths </s> find test -regex "[course*]" -type d
Connect to port 1234 of specified IP address or hostname as ssh user "user", and copy all visible files in /var/www/mywebsite/dumps/ on this host to local directory /myNewPathOnCurrentLocalMachine - this directory must already exist on local host. </s> scp -P 1234 user@[ip address or host name]:/var/www/mywebsite/dumps/* /var/www/myNewPathOnCurrentLocalMachine
search for a shell script in the current folder and display the current folder path but search from the sub directories </s> find . -name onlyme.sh -execdir pwd \;
delete all the core files in the folder /prog which are bigger than 1KB </s> find /prog -type f -size +1000 -print -name core -exec rm {} \;
find all ".flac" files in current folder starting with "cmn-" </s> find . -name 'cmn-*.flac'
Remove all .mpg files in the /home/luser directory tree </s> find /home/luser -type f -name '*.mpg' | tr "\n" "\000" | xargs -0 rm -f
Print '-ok is an action so an implicit -print is not applied' with confirmation from the user for each file or directory found by the name 'file' under current directory tree </s> find -name file -ok echo '-ok is an action so an implicit -print is not applied' \;
Search the current directory recursively for text files containing at least one character </s> find -type f -exec grep -Iq . {} \; -and -print
start from current directory, skip the directory src/emacs and print it then skip all files and directories under it, and print the names of the other files found </s> find . -wholename './src/emacs' -prune , -print
Search the .css files in the /starting/directory tree for ".ExampleClass" </s> find /starting/directory -type f -name '*.css' | xargs -ti grep '\.ExampleClass' {}
Set 444 permission to all regular files under current directory </s> find . -type f -print | xargs chmod 444
Print whether "$file" and "${file/${dir1}/${dir2}}" differ </s> diff -q "$file" "${file/${dir1}/${dir2}}"
Try to determine the type of contents in "myfile" located in user's home directory. </s> file ~/myfile
Search for 'pattern_to_search' in all regular files with '.txt' extension under '/directory/containing/files' and show the matched lines along with filenames </s> find /directory/containing/files -type f -name "*.txt" -exec grep -H 'pattern_to_search' {} +
Write output of "ls -hal /root/" to standard output and to "/root/test.out" </s> ls -hal /root/ | sudo tee /root/test.out
find all files under the current folder except dir1 dir2 dir3  folder </s> find . -type d \( -path dir1 -o -path dir2 -o -path dir3 \) -prune -o -print
find *.gif files under the currently directory and sub-directories and list them using the ls command </s> find . -name *.gif -exec ls {} \;
Find all regular files on the system whose names are 'myfile' </s> find / -name myfile -type f -print
Combine every two lines of standard input </s> paste -d "" - -
Find all files in the current directory tree that are not newer than some_file </s> find . ! -newer some_file
find all the files in the file system that belong to the user www </s> find / -user www -print
Print A record for domain 'domain.' from 'ns1.newnameserver' nameserver </s> dig @ns1.newnameserver domain. a
Remove all files and directories in the /home directory tree whose names are "Trash" </s> find /home -name Trash -exec rm {} \;
Saves byte size of all content of $1 folder in 'uiTotalSize' variable. </s> uiTotalSize=$(ls -l -R $1 | grep -v ^d | awk '{total+=$5;} END {print total;}')
Print absolute path of "YOUR_PATH" </s> readlink -f YOUR_PATH
Force create a symbolic link without dereferencing named "alpha" to "alpha_2" </s> ln -nsf alpha_2 alpha
Recursively lists all *.py and *.html files in a current folder. </s> ls **/*.py **/*.html
Save the current working directory and the directory name of the current script to variable "DIR" </s> DIR=`pwd`/`dirname $0`
find al the files that are modified exactly 2 days ago </s> find -daystart -mtime 2
Print "$PATH" variable as input to awk script "rem_dup.awk" and concatenate the result with ":" </s> echo $PATH | awk -F: -f rem_dup.awk | paste -sd:
Find regular files named "expression -and expression" under and below /dir/to/search/ </s> find /dir/to/search/ -type f -name 'expression -and expression' -print
Find files recursively with extension "ext" </s> find . -name "*.ext"
Set variable value to current kernel release name. </s> value=$(uname -r)
remove all the "core" files in the current folder which have not been changed in the last 4 days. </s> find . -name core -ctime +4 -exec /bin/rm -f {} \;
check find version </s> find --version
Find all SUID files in entire file system </s> find / -perm +u=s
Replace all occurrence of "subdomainA.example.com" with "subdomainB.example.com" in all files under /home/www and below </s> find /home/www -type f -print0 | xargs -0 sed -i 's/subdomainA.example.com/subdomainB.example.com/g'
Search for 'String' case insensitively in all files under current directory tree and show the matched lines with their filenames </s> find . -name * -print0  | xargs -0 grep -iH "String"
search for the host "slc02oxm.us.oracle.com" in all the xml files in the current folder and display the files which has the matched content </s> find -name “*.xml” -exec grep -l “slc02oxm.us.oracle.com” {} \;
Delete all hidden files under $some_directory </s> find "$some_directory" -type f -name '.*' | xargs rm
Find all TXT files in the current directory and copy them to directory "$HOME/newdir" </s> find "$HOME" -name '*.txt' -type f -print0 | sort -zu | xargs -0 cp -t "$HOME/newdir"
Count the total number of lines in all HTML files under /usr/src that contain string "foo" </s> find /usr/src -name "*.html" -execdir /usr/bin/grep -H "foo" {} ';' | wc -l
Search for 'mystring' in all *.txt files under current directory </s> find . -name '*.txt' | xargs egrep mystring
Copies 'libgtest_main.so' and 'libgtest.so' to '/usr/lib/', preserving all attributes, and copying symlinks as symlinks, without following in source files. </s> sudo cp -a libgtest_main.so libgtest.so /usr/lib/
Delete all files/directories under current directory </s> find -delete
Find all files under current directory and print only the filenames (not paths) </s> find . -type f -execdir echo '{}' ';'
Delete all __temp__* directories under maximum 1 level down the current directory tree </s> find . -maxdepth 1 -type d -name '__temp__*' -print0 | xargs -0 rm -rf
Search the files from the current directory tree for "chrome" </s> find . -exec grep chrome {} +
Find all *.c files under and below the current directory that contain "wait_event_interruptible" </s> find . -name \*.c -exec grep wait_event_interruptible {} /dev/null \;
display all the files in the current folder which contains form feed (^L) and does not contain NULL </s> find . | xargs grep -PL "\x00" | xargs grep -Pl "\x0c"
Find .rmv files in the ./root directory recursively and copy them to directory /copy/to/here </s> find root -name '*.rmv' -type f -exec cp --parents "{}" /copy/to/here \;
Use awk command '{ ... }' on compressed files "input1.vcf.gz" and "input2.vcf.gz" </s> awk '{ ... }' <(gzip -dc input1.vcf.gz) <(gzip -dc input2.vcf.gz)
Search the current directory recursively for files containing "needle text" </s> find . -type f -print0 | xargs -0 grep -IZl . | xargs -0 grep "needle text"
List the regular files of the current directory tree that contain string "texthere" </s> find -type f -exec grep -l "texthere" {} +
Prints long listing of content in the current folder with C-style escapes for nongraphic characters </s> ls -lb
create directory ".hiddendir" </s> mkdir .hiddendir
Get a detailed list of all files on the system larger than 10MB </s> find / -size +10M -printf “%12s %t %h/%fn”
Join data in file1 containing one number per line with data in file2 containing a number and other information per line, keeping the same order as it is found in file1. </s> join -1 2 -2 1 -a1 <(cat -n file1.txt | sort -k2,2) <(sort file2.txt) | sort -k2 | cut --complement -d" " -f2
find all executable files in /home directory. </s> find  /home -type f -perm /a=x
Change the owner to "root" and group to "specialusers" of "dir1" </s> chown root:specialusers dir1
Recursively copy all files and directories in "demo" excluding ".git" to "demo_bkp" </s> find demo -depth -name .git -prune -o -print0 | cpio -0pdv --quiet demo_bkp
Search for all .mp3 files in the /mnt/usb directory tree </s> find /mnt/usb -name  "*.mp3" -print
Find all files/directories that start with 'a1a2' and end with 'txt' in their names and move their parent directories to '/home/spenx/dst/' directory </s> find /home/spenx/src -name "a1a2*txt" | xargs -n 1 dirname | xargs -I list mv list /home/spenx/dst/
Find all files under current directory that were modified in the last 24 hours and also include the files that were modified in less than 1 day ago </s> find -daystart -mtime +0
Find links to file path/to/foo.txt </s> find -L / -samefile path/to/foo.txt
Find all files/directories with '.tar.gz' extension under $DIR/tmp/daily/ directory tree, sort them numerically and show the last 3 of them </s> find $DIR/tmp/daily/ -name '*.tar.gz' | sort -n | tail -3
Find all files in /var/www/html/zip/data/*/*/*/*/* that are older than 90 days </s> find /var/www/html/zip/data/*/*/*/*/* -type f -mtime +90
Delete all non digits from index "$i" in bash array "depsAlastmodified" and print the hex dump as characters </s> echo "${depsAlastmodified[$i]}" | tr -cd '[[:digit:]]' | od -c
Searches manual pages which descriptions contain 'postscript', and prints name and description of only ones that contain any-cased 'png' pattern. </s> apropos postscript | grep -i png
Counts all business days in a current month. </s> cal -h | cut -c 4-17 | tail -n +3  | wc -w
Find files/directories named blah under current directory </s> find ./ -name blah
find all the files in the directory which is pointed by $1 variable ending with the name held in the variable $2 or having the extension of value saved in the argument $2. </s> find $1 \( -name "*$2" -o -name ".*$2" \) -print
Search the current directory tree for symbolic links to files matching pattern '*test*' </s> find . -lname '*test*'
Compare each .xml file under the current directory with a file of the same name in "/destination/dir/2" </s> find . -name *.xml -exec diff {} /destination/dir/2/{} \;
remove all files that's older than 30 days in '/tmp' </s> find /tmp -type f -mtime +30 -exec rm -f {} \;
display the list of all the text files present in the current directory excluding the search in certain paths. </s> find . -type f -name "*.txt" ! -path "./Movies/*" ! -path "./Downloads/*" ! -path "./Music/*" -ls
find the count of all the charcters of the list of regular files present in the current folder </s> find . -type f | xargs | wc -c
Search only for regular files </s> find -type f
List all files in the current directory tree that were modified less than 60 minutes ago </s> find . -mmin -60 |xargs ls -l
Find .rmv files in the ./root directory recursively and copy them to directory /copy/to/here </s> find root -name '*.rmv' -type f -exec cp {} /copy/to/here \;
Recursively changes group ownership of every folder in a current directory to the name of that folder. </s> find . -type d | sed -e 's/^\.\///g' -e 's/^\./avoid/g' | grep -v avoid | awk '{print $1"\t"$1}' | xargs chgrp
List all regular files residing in the current directory tree and containing string "/bin/ksh" </s> find . -type f -exec grep -li '/bin/ksh' {} \;
Check all .txt files whose names may contain spaces whether they contain "needle" </s> find . -type f -iname "*.txt" -print0 | xargs -0 grep "needle"
Change directory to the directory containing the current script </s> cd $(dirname $(which $0) )
Search for 'string-to-find' in all files under current directory tree matching the regex 'filename-regex.\*\.html' in their paths and show the matched lines along with the filenames </s> find . -regex filename-regex.\*\.html -exec grep -H string-to-find {} \;
Print the full name of "$USER" </s> finger $USER |head -n1 |cut -d : -f3
display all the files in current directory with each file name displayed twice in the same row </s> find . | sed 's/.*/& &/'
Find all *.txt files under current directory, change their permission to 666 and copy them to /dst/ directory </s> find . -name \*.txt -exec chmod 666 {} \; -exec cp {} /dst/ \;
List all entry names contained directly by directory in_save in the current directory, pausing for user input at each page. </s> find ./in_save/ -type f -maxdepth 1| more
Request DNS record for  domain 'dragon-architect.com' with tracing and additional section, and extract third block of text, separated between two new lines. </s> dig +trace +additional dragon-architect.com | awk 'NR==3' RS="\n\n"
Find all empty directories under $somedir and copy /my/configfile into those directories </s> find "$somedir" -type d -empty -exec cp /my/configfile {} \;
Prints path to folder that contains target of the symbolic link ../../../../etc/passwd. </s> $(dirname $(readlink -e ../../../../etc/passwd))
change the ownership of all regular/normal files in the current directory(print0 is used to handle all the files which have spaces or new lines in their names) </s> find . -type f -print0 | xargs -0 chown username
Prints information about user $euids currently on machine and its processes, without printing header. </s> w -h $euids
Finds recursion-related options of a 'grep' utility. </s> grep --help |grep recursive
display all the files in the home folder which have read permission to the user </s> find /home -perm /u=r
List jobs and their process ids and print them by replacing newline with '^' </s> joblist=$(jobs -l | tr "\n" "^")
Remove all *.sql files in the $backup_path directory that were last modified more than 5 days ago </s> find $backup_path/*.sql -mtime +5 -exec rm -f {} \;
Delete all files that were modified more than 60 days ago under '/path-to-directory' tree </s> find /path-to-directory -mtime +60 -exec rm -f {} \;
Correct permissions for directories in the web directory </s> find /your/webdir/ -type d -print0 | xargs -0 chmod 755
Sort and remove duplicate lines in the output of "finger" </s> finger | sort -u
Search the current directory tree for files whose names contain "TextForRename" </s> find ./ -name "*TextForRename*"
Find all directories under /directory-path and change their permission to 2755 </s> find /directory-path  -type d -exec sudo chmod 2775 {} +
Find all 664 permission files/drectories under current directory tree </s> find . -perm -664
Search the /usr/ directory tree for files newer than file /tmp/stamp </s> find /usr -newer /tmp/stamp
Change all directories under "./storage/" to owner "apache" and group "laravel" </s> sudo find ./storage/ -type d -exec chown apache:laravel {} \;
Search /public/html/cosi for files whose name is "wiki.phtml" </s> find /public/html/cosi -name "wiki.phtml"
Find all files/directories under current directory tree that start with 'R' and end with 'VER' in their names and were modified more than 1 day ago </s> find . -name "R*VER" -mtime +1
Find x* files/directories under /tmp directory whose status was changed less than 1 day ago </s> find /tmp/ -ctime -1 -name x*
find all the files in the home folder which are less than 42 Bytes </s> find / -size 42
display all the regular files in the current folder which dont not have the permission 777 </s> find . -type f ! -perm 777
Remove all "CVS" directories from the current directory tree, ignoring the case </s> find . -iname CVS -type d | xargs rm -rf
Find all *.txt files/directories under current directory </s> find . -name '*.txt'
List all files in the /myfiles directory tree </s> find /myfiles -exec ls -l {} ;
create a symbolic link named "/usr/lib/jvm/default-java" to file "/usr/lib/jvm/java-7-oracle" </s> sudo ln -s /usr/lib/jvm/java-7-oracle /usr/lib/jvm/default-java
Find all *.txt files/directories under current directory terminating their names/paths with null character </s> find . -name '*.txt' -print0
find all the files in the file system whcih have been modified in the last 1 day </s> find / -mtime -1
display all the files in the file system which are changed a minute ago </s> find / -newerct '1 minute ago' -print
Calculate md5 checksum of theDirname </s> cpio -i -e theDirname | md5sum
Display the count of regular files under 'home/magie/d2' directory tree which have execute permission to all the users </s> find home/magie/d2 -type f -perm +111 | wc -l
Delete all .svn files/directories under current directory </s> find . -name .svn -exec rm -rf {} \;
Return the list of files named "filename" that are 50 megabytes or larger </s> find / -size +50M -iname "filename"
change user and group of the file bin to user and group root:wheel </s> sudo chown root:wheel bin
Find all read only files in  /home directory </s> find /home -type f -perm /u=r
Edit the cron job list for user 'wwwrun' using default editor specified by the EDITOR environment variable, or /usr/bin/editor if no default editor is specified. </s> sudo crontab -u wwwrun -e
Find all *.txt files under current directory with their timestamps and paths, sort them and print the last entry only </s> find . -name "*.txt" -printf "%T+ %p\n" | sort | tail -1
display all text files in the folder /tmp/1 excluding those which do not have spaces in their names </s> find /tmp/1 -iname '*.txt' -not -iname '[0-9A-Za-z]*.txt'
Find all the files in file system which are modified 50 days back </s> find / -mtime 50
List the directory paths of all file.ext files under present working directory </s> find `pwd` -name file.ext |xargs -l1 dirname
Find all executable upvoter-* files (following symlinks) under maximum 1 level down the current directory </s> find -L -maxdepth 1 -name 'upvoter-*' -type f -perm /111
Search the CSS files found in the current directory tree for string "foo" </s> find . -name \*.css -print0 | xargs -0 grep -nH foo
Find all regular files in the current directory tree last modified between 1 and 3 days ago and list them using format '%Tm %p\n' </s> find ./ -daystart -mtime -3 -type f  ! -mtime -1  -printf '%Tm %p\n'
update the permission of all the files in the folder /u/netinst to 500 </s> find /u/netinst -print | xargs chmod 500
Display a detailed listing of the current directory, pausing for user input after each page. </s> ls -l | more
find the file with the name "file" in the entire file system </s> find / -name file
search for the directory "config" in the current folder </s> find . -name config -type d
display all the files in the /usr folder which have the permissions 777 </s> find /usr -perm 0777 -print
Print the difference between line 2 and 3 in file "$f" </s> diff <(fold -w1 <(sed '2q;d' $f)) <(fold -w1 <(sed '3q;d' $f)) | awk '/[<>]/{printf $2}'
Print each logged in user's username and full name </s> finger -l | grep "Name:" | tr -s ' ' | cut -d " " -f 2,4- | sort | uniq
Find all *.plist files/directories under current directory </s> find ./ -name "*.plist"
Do not immediately exit the shell if a command fails </s> set +e
Get files that last had their meta information changed more than 3 days ago </s> find / -ctime +3
Get a list of all hidden files from the current directory tree </s> find . -type f -name '.*'
find httpd.conf file in /etc directory </s> find /etc -name "httpd.conf"
Open a session-less connection to 'host' as user 'user' in master mode with a socket "/tmp/%r@%h:%p" to enable connection sharing </s> ssh user@host -M -S /tmp/%r@%h:%p -N
find all directories in the current folder and do not search in sub directories </s> find . -type d -maxdepth 1
display all files in the current folder which start with met </s> find -name met*
Find & Write Changes to a File and Print the Changes Using sed s//gpw </s> find . -type f -name "*.txt" -exec sed -n 's/Linux/Linux-Unix/gpw output' thegeekstuff.txt
Find all directories named "0" in the current directory tree and create a single tar archive of their RS* subdirectories </s> find . -type d -name "0" -execdir tar -cvf ~/home/directoryForTransfer/filename.tar RS* \;
Archive all filepattern-*2009* files/directories under data/ into 2009.tar </s> find data/ -name filepattern-*2009* -exec tar uf 2009.tar {} ;
Compress all files under /source directory tree using gzip with best compression method </s> find /source -type f -print0 | xargs -0 -n 1 -P $CORES gzip -9
Run sed command "s#\(export\ PATH=\"\)\(.*\)#\1/home/$(whoami)/bin:~/\.local/bin:\2#" on "~/.zshrc" where "$(whoami)" is replaced with the current user name </s> sed -i "s#\(export\ PATH=\"\)\(.*\)#\1/home/$(whoami)/bin:~/\.local/bin:\2#" ~/.zshrc
Display the last slash-separated part of each filename path in file.txt </s> rev file.txt | cut -d/ -f1 | rev
Move all directories in the current directory that match "some-dir" to "x/" </s> find ./ -maxdepth 1 -name "some-dir" -type d -print0 | xargs -0r mv -t x/
show all files in the current directory and all subdirectories </s> find .
find all text files in current folder and trim the extra spaces in all lines in these files ( MAC version ) </s> find . -iname '*.txt' -type f -exec sed -i '' 's/[[:space:]]\{1,\}$//' {} \+
Set the permissions of all directories inside the current directory tree to u=rwx,g=rx,o=x </s> find . -type d -exec chmod u=rwx,g=rx,o=x {} \;
Count number of lines in all files matching "*R1*.fastq.gz" </s> zcat *R1*.fastq.gz | wc -l
Find all *.htm files under current directory and print the changed names by appending 3 levels of parent directory names at the beginning and modifying the actual name to dd-nnn format </s> find -type f -name "*.htm" | sed 's@^./@@g;s@/@-@g' | awk -F'-' '{print $1 "-" $2 "-" $3 "-" substr($4, 5, 2) "-" $5}'
Find all *stat files/directories under /usr </s> find /usr -name *stat
Save the user name in upper case of the current user in variable "v" </s> v=$(whoami | tr [:lower:] [:upper:])
find directories under the $LOGDIR directory where there has been no modifications within the last 24 hours and compresses the files. </s> find $LOGDIR -type d -mtime +0 -exec compress -r {} \;
Print lines unique and common to sorted files "file1" and  "file2" </s> comm file1 file2
Make directory "dir1" </s> mkdir dir1
Find all loadable modules for current kernel, whose name includes "perf" </s> find /lib/modules/`uname -r` -regex .*perf.*
Find .jpg files owned by user daniel in the current directory and its sub-directories. </s> find . -user daniel -type f -name *.jpg
List all files in the current directory tree larger than 1000 kb </s> find . -size +1000k
Find all files under current directory and show their file information </s> find . -type f -print0 | xargs -0 file
List each directory in the current directory prefixed with its disk usage in human readable format and sorted from smallest to largest </s> du -sh */ | sort -n
Display operating system type, ie. GNU/Linux </s> uname -o
Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them. </s> find -type f -name "STATUS.txt" -exec grep -q "OPEN" {} \; -exec dirname {} \;
find files with pattern` '*.h' and print comparison between file and /tmp/master directory </s> find . -name '*.h' -execdir diff -u '{}' /tmp/master ';'
Print fourth column of data from text file text.txt where columns separated by one or more whitespaces. </s> cat text.txt | tr -s ' ' | cut -d ' ' -f4
Save "something" into variable "param" in ksh </s> echo something | read param
Copy all files unconditionally and directories in directory tree "myfiles" to "target-dir" preserving directory hierarchy and modification time </s> find myfiles | cpio -pmud target-dir
Raise an error for using uninitialized variables </s> set -u
Delete all files in the /myDir directory tree that were last modfied more than 7 days ago </s> find /myDir -mindepth 1 -mtime +7 -delete
find al the tmp directories in the current directory and create a dump of it </s> find . -type d -name tmp -prune -o -print | cpio -dump /backup
Find all files under media/ directory and change their permission to 600 </s> find media/ -type f -exec chmod 600 {} \;
search for the file ".user.log" in a folder </s> find /nfs/office -name .user.log -print
Find all regular files under $FILES_PATH directory tree and save the output to 'FILES' variable </s> FILES=$(find $FILES_PATH -type f -name "*")
use regex with find command </s> find . * | grep -P "[a-f0-9\-]{36}\.jpg"
Replace all sequence of 'blank' characters in file 'log' with a single occurence of such symbol and print space-separated fields of each string but first two fields </s> cat log | tr -s [:blank:] |cut -d' ' -f 3-
display all files ending with ".ext" in current folder and append the file contents of list.txt and sort them based on name and display only uniq items </s> find . -name \*.ext | cat - list.txt | sort | uniq -u
find all files in the current directory do not display the files which are not readable </s> find . ! -readable -prune
Convert "595a" into characters and then print the hexadecimal and printable characters of each byte </s> echo 595a | awk -niord '$0=chr("0x"RT)' RS=.. ORS= | od -tx1c
Set permissions of all files under "/opt/lampp/htdocs" to 644 </s> find /opt/lampp/htdocs -type f -exec chmod 644 {} \;
Remove trailing white spaces from all files under current directory ignoring .git, .svn directories and binary files </s> find . -not \( -name .svn -prune -o -name .git -prune \) -type f -print0 | xargs -0 file -In | grep -v binary | cut -d ":" -f1 | xargs -0 sed -i '' -E "s/[[:space:]]*$//"
Remove trailing white spaces from all files under dir directory ensuring white space safety in the filename </s> find dir -type f -print0 | xargs -r0 sed -i 's/ *$//'
Find all '*~' files under current directory </s> find ./ -name '*~'
Recursively change the owner and group of "/var/antoniod-data/" to "antoniod" </s> chown -R antoniod:antoniod /var/antoniod-data/
Run 'chmod 0755' on all directories in the current directory tree </s> find . -type d -exec chmod 0755 {} \;
find all the directories in the file system which begin with "man" </s> find / -type d -name 'man*' -print
Sort file "file" by line </s> sort file -o !#^
Gets string with MAC address of eth0 network interface. </s> ifconfig eth0 | grep HWaddr
Split "$file" into files with at most 1000 lines each and use a prefix length of 5 </s> split -a 5 $file
Change the owner of all files in the directory tree "dir_to_start" excluding file "file_to_exclude" to "owner" </s> find dir_to_start -not -name "file_to_exclude"  -print0 | xargs -0 chown owner
Find all directories under /home/me/"$d" </s> find /home/me/"$d" -type d
Find all file paths under current directory, perform a reverse sort and show first 10 file paths with their status change time </s> find . -type f -printf "%C@ %p\n" | sort -r | head -n 10
Search folder /home/ABCD/ recursively for regular files </s> find /home/ABCD/ -type f -print
Find recursively regular files in the directory given as the script's command line argument #1, skipping hidden files and directories </s> find "$1" -path "*/.*" -prune -o \( -type f -print0 \)
Recursively find the latest modified file in the current directory </s> find . -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" "
Remove all regular files found in and below /path </s> find /path -type f -exec rm '{}' \;
find files with the extension .conf in the /etc directory </s> find /etc -name '*.conf'
Recursively changes group ownership of everything within a current folder to 'admin'. </s> chgrp -R admin *
Find all regular *.css files </s> find . -type f -name "*.css"
Look for file `Chapter1' under /usr and /home </s> find /usr /home -name Chapter1 -type f
find all regular files exclude .o and exclude *.swp and output line number of soc_attach if it has </s> find .  \( ! -path "./output/*" \) -a \( -type f \) -a \( ! -name '*.o' \) -a \( ! -name '*.swp' \) | xargs grep -n soc_attach
Change the owner of all files in "/empty_dir/" to "root" using at most 10 files at a time </s> ls /empty_dir/ | xargs -n10 chown root
List all files in the current directory tree that were modified 60 minutes ago </s> find . -mmin 60 | xargs '-rd\n' ls -l
Print the host name </s> hostname
locate large files (> 100 MB) in /home/ for 'cleaning' </s> find /home -type f -size +100M -delete
Find all files/directories named '.todo' under $STORAGEFOLDER directory tree and print the parent directory names </s> find "$STORAGEFOLDER" -name .todo -printf '%h\n'
concatenates file1.txt, file2.txt, and file3.txt with the filenames printed at the beginning of file contents </s> head -n99999999 file1.txt file2.txt file3.txt
Sets shell option 'dotglob'. </s> shopt -s dotglob
Move each of the directories in /path/to/folders/* to another directory whose name is constituted by appending .mbox to each directory name and create a directory named Messages in this directory then move all *.emlx files into this directory </s> find /path/to/folders/* -type d  -exec mv {} {}.mbox \; -exec mkdir {}.mbox/Messages \; -exec sh -c "mv {}.mbox/*.emlx {}.mbox/Messages" \;
Find all symbolic links under the current folder and below </s> find –L –xtype l
Find all regular files with name pattern $filename under $fileloc directory tree </s> find "$fileloc" -type f -prune -name "$filename" -print
Find files/directories named 'document' in 'ext2' partitions in entire filesystem </s> find / -fstype ext2 -name document -print
Find all regular files under current directory tree whose names end with 'cache' or 'xml' or 'html' </s> find . -type f \( -name "*cache" -o -name "*xml" -o -name "*html" \)
delete all the empty files in the current directory </s> find . -empty -exec rm {}\;
move all the files in the current folder  to temp folder and search atleast in one subfolder </s> find . -mindepth 1 -exec mv -t /tmp {} +
Prints long listing of directories '/tmp', '/tnt' themselves. </s> ls -ld /tmp /tnt
Print the characters in $b that match with any character in $a without printing any whitespace in-between </s> echo "$b" | grep --only-matching "[$a]" | xargs | tr --delete ' '
Display an infinite number of lines consisting of "y", until the user presses the Q key. </s> yes | more
Find files modified more recently than file poop </s> find . -newer poop
Check if $path_in_question is mount point of filesystem </s> df $path_in_question | grep " $path_in_question$"
Delete current cron job list, and use those in yourFile.text </s> crontab yourFile.text
Search non-recursively directory tree `MyApp.app' for directories whose name is 'Headers' and delete them in an optimized way </s> find MyApp.app -name Headers -type d -prune -exec rm -rf {} +
Print lines in the sorted contents of "file1" that are not in the sorted contents of "file2" </s> comm -23 <(sort file1) <(sort file2)
Remove all empty regular files under the current directory and below </s> find ./ -type f -empty -print0 | xargs -0 rm
Find all directories under current directory with 755 permission and change their permission to 644 </s> find . -perm 755 -exec chmod 644 {} \;
Saves list of logged in users in system together with 'USER' header in the 'b' variable. </s> b=`w|cut -d' ' -f1`;
Print the contents of "file" with " | " appended to each line </s> echo `sed -e 's/$/\ |\ /g' file`
Search the entire file hierarchy for files named zsh that exist on ext3 file systems and print out detailed information about the file. </s> find / -fstype ext3 -name zsh -ls
Recursively changes group ownership on every file in the ${WP_ROOT}/wp-content directory to ${WS_GROUP} group. </s> find ${WP_ROOT}/wp-content -exec chgrp ${WS_GROUP} {} \;
Find all files in ~/clang+llvm-3.3/bin/ and print 'basename /file/path' for each file </s> find ~/clang+llvm-3.3/bin/ -type f -exec echo basename {} \;
Find all thumb.png files in the temps/ directory tree </s> find temps/ -name "thumb.png"
Delete all files named 'Waldo' under ~/Books directory tree where '~' expands to user's home directory </s> find ~/Books -type f -name Waldo -exec rm {} \;
Find files and directories that are at least seven levels of nesting in the directory /usr/src excluding CVS directory </s> find /usr/src -name CVS -prune -o -depth +6 -print
Find the passwd file in the current directory and one level down </s> find -maxdepth 2 -name passwd
Search the `research' directory and one level below for directories that are not owned by group `ian' </s> find -L research -maxdepth 2 -type d ! -group ian
Add a date time stamp to every line of output in "ping google.com" </s> ping google.com | xargs -L 1 -I '{}' date '+%c: {}'
Save the latest modification time (in format "%T@ %t" of any file under "./$dir" to variable "timestamp" </s> timestamp=$(find ./$dir -type f -printf "%T@ %t\\n" | sort -nr -k 1,2 | head -n 1)
List all regular files under the current directory and below it </s> find . -type f | xargs ls -l
delete all the normal files in the current directory whcih have the word "gui" in their content. </s> find / -type f -print0 | xargs -0 grep -liwZ GUI | xargs -0 rm -f
Search all the regular files in the current directory tree for "example" </s> find -type f -print0 | xargs -r0 grep -F 'example'
Find all the Sticky Bit set files in entire file system whose permission are 551 </s> find / -perm 0551
Search the current directory tree for file `teste.tex' </s> find -name teste.tex
Search all *.c files from the current directory tree for "hogehoge" </s> find . -name \*.c -exec grep hogehoge {} \;
Find with combine multiple search criterias , in this command serach  files that begin with abc in there name and dont have .py extension . </s> find . -type f -name 'abc*' ! -name '*.py'
search for the directory "mysql" in the entire file system </s> find / -name mysql -type d
find all the files in current directory of size exactly 6MB. </s> find . -size 6M
Search for the string 'device' in all regular files in the entire filesystem </s> find / -type f -print | xargs grep "device"
Search the system for files named "findcommandexamples.txt", ignoring the case </s> find  / -iname findcommandexamples.txt
List all files in the "test" directory tree except those with '/invalid_dir/' in the pathnames </s> find test -print | grep -v '/invalid_dir/'
Search the current directory recursively for .sh files whose names begin with "new" </s> find . -name "new*.sh"
Find all files/directories under '/directory_path' directory tree that have been modified within the last day </s> find /directory_path -mtime -1 -print
List all files with their paths that have identical content. </s> find * -type f | xargs md5sum | sort | uniq -Dw32
count amount of jobs running </s> jobs | wc -l
Display all lines contiaining 'funcname' in system map file matching current kernel. </s> cat /boot/System.map-`uname -r` | grep funcname
Print the list of directories that are present in the /mnt/raid directory tree </s> find /mnt/raid -type d
Find all *.cgi (case insensitive) files/directories under current directory and change their permission to 755 </s> find . -iname '*.cgi' | xargs chmod 755
Print only second from the end field from slash-separated string in file 'datafile' </s> cat datafile | rev | cut -d '/' -f 2 | rev
display the count of regular/normal files in the current folder do not search in sub directories </s> find . -maxdepth 1 -type f |wc -l
Search for "ifconfig" in the output of "history" and print 5 lines that precede and follow </s> history | grep -C 5 ifconfig
Remove all empty files in /tmp/ and below </s> find /tmp -type f -empty -print | xargs rm -f
display a long list of all the directories which have files ending with ".todo" </s> find "$STORAGEFOLDER" -name .todo -printf '%h\n' | xargs ls -l
Prints day of first Tuesday in a month. </s> cal | awk 'NR>2{Sfields=7-NF; if (Sfields == 0 ) {printf "%02d\n",$3;exit}}'
Recursively copy "/path/to/data/myappdata/*.txt" to "user@host:/remote/path/to/data/myappdata/" </s> rsync -rvv /path/to/data/myappdata/*.txt user@host:/remote/path/to/data/myappdata/
Duplicate directory tree under /mnt/usr/lib to /usr but creating symlinks to files instead of copying them. </s> cp -rs /mnt/usr/lib /usr/
change the permissions of all the directories in the current folder, print0 is used for handling files with newlines in their file name </s> find . -type d -print0 | xargs -0 chmod 2775
Change permissions of all directories residing under and below ./debian to 755 </s> find ./debian -type d | xargs chmod 755
Search for all files with either "sitesearch" or "demo" in their path names </s> find . | grep -i demo | grep -i sitesearch
Find all regular files in /usr/bin modified less than within the last 10 days </s> find /usr/bin -type f -mtime -10
create an archive using 7zhelper.sh as a compress program </s> tar -I 7zhelper.sh -cf OUTPUT_FILE.tar.7z paths_to_archive
find all the files in the current directory whose size is equal to exactly 126MB. </s> find . -size 126M
Find a directory named 'project.images' in the entire filesystem </s> find  / -type d -name "project.images"
Rename all files in current directory to lowerase, overwriting any existing files. </s> rename -f 'y/A-Z/a-z/' *
Check if "~/mnt/sdc1" is mounted </s> mount | grep -q ~/mnt/sdc1
show all the regular files in current folder </s> find . -type f -print0
Create a hard link named "my-hard-link" to "myfile.txt" </s> ln myfile.txt my-hard-link
List all empty files in the current directory tree </s> find . -type f -empty
Find all files/directories with '.log' extension whose names start with 'app-', have been modified in the last 5 minutes and show the first one found </s> find /var/log/crashes -name app-\*\.log -mmin -5 -print | head -n 1
Find all directories under $path </s> find $path -type d
Find files newer than `tmpfile' starting from the current directory </s> find . -newer tmpfile
find file named foo.txt under current directory. </s> find . -name foo.txt
replace the word foo to bar in the current folder in all the regular/normal files which have execute permission  (does not update the file) </s> find . -type f -executable -exec sed -i 's/foo/bar/g' {} +
Find an inode and remove </s> find . -inum 968746 -exec rm -i {} \;
Print details for all files in the ./work directory tree with extension .sh that were modified less than 20 days ago </s> find ./work/ -type f -name "*.sh" -mtime -20 | xargs -r ls -l
Remove trailing white spaces from all files under dir directory and keep backups of the originals </s> find dir -type f -print0 | xargs -0 sed -i .bak -E "s/[[:space:]]*$//"
Search directory tree `MyApp.app' for directories whose name is 'Headers' and delete them </s> find -d MyApp.app -name Headers -type d -exec rm -rf "{}" \;
Print 'infile' content with line numbers </s> cat -n infile
remove all the files in the current working directory which have a specifc inode number </s> find . -inum $inum -exec rm {} \;
find all the ".c" files in the folder /home/david which have been modified in the last 48 hours </s> find /home/david -mtime -2 -name '*.c'
display the count of total number of non empty files in the current folder </s> find . -type f -not -empty | wc -l
Print the last 10 lines of "great-big-file.log" </s> tail great-big-file.log
Find all the files/directories in '/path/to/files' directory tree which have not been modified in the last 2 hours </s> find "/path/to/files" -mmin +120
Split "$in_file" excluding the first line into files of at most 100000 lines each with numeric suffixes of length 5 and the prefix $in_file"_" </s> awk '{if (NR!=1) {print}}' $in_file | split -d -a 5 -l 100000 - $in_file"_"
Counts lines of /dir/file.txt file. </s> cat /dir/file.txt | wc -l
Find all files under current directory that were modified more than 1 day ago </s> find -mtime +1
Find symlinks in the current directory tree </s> find . -type l | xargs ls -ld
Print all unique strings in $1.tmp file. </s> cat $1.tmp | sort -u
display all the ".c" files which have been modified in the last 10 minutes </s> find /home/david -amin -10 -name '*.c'
Find all files named 'file' in 1 level down the current directory whose status were changed more than 1 day ago </s> find . -maxdepth 1 -ctime +1 -name file
Display only mimetype of myfile.txt, without the filename. </s> file -bi myfile.txt
find all the normal/regular files in the folder main-directory </s> find main-directory -type f
find all the files in the current folder that have been modified in the last 7 days </s> find -mtime -7 -daystart
Find all files named 'Makefile' in the /usr/ports directory tree and count the number of lines in them matching regular expression '^MASTER_SITE.*CPAN' </s> find /usr/ports/ -name Makefile -exec grep '^MASTER_SITE.*CPAN' '{}' '+' | wc -l
Write "\n/usr/local/boost_1_54_0/stage/lib" to standard output and append to "/etc/ld.so.conf" </s> echo -e "\n/usr/local/boost_1_54_0/stage/lib" | sudo tee -a /etc/ld.so.conf
search for a shell script in the current folder and display the current folder path </s> find . -name onlyme.sh -exec pwd \;
Dump "testscript.sh" as 2 byte hexadecimale, printable characters, and octal values </s> od -xcb testscript.sh
find all the normal/regular files in /etc/sysconfig which have been accesses in the last 30 minutes </s> find /etc/sysconfig -amin -30 -type f
search for all the files in the current folder and sort them in the order of their depth and display the file names </s> find -type d -printf '%d\t%P\n' | sort -r -nk1 | cut -f2-
Locate all files in the current directory and below that have "testfile" in their names regardless of the case </s> find -iname "*TESTFILE*"
Set variable GZIP to the full path of command "gzip" </s> GZIP="$(which gzip)"
Set the variable "me" to the name of the running script, or shell, login shells have a hyphen appended to the beginning of the name, such as "-bash". </s> me=`basename -- "$0"`
List all files/directories under $dir_name with size $sizeFile and print them according to the format string  '%M %n %u %g %s %Tb %Td %Tk:%TM %p\n' </s> find $dir_name -size $sizeFile -printf '%M %n %u %g %s %Tb %Td %Tk:%TM %p\n'
Remove all .sh files in the current directory tree whose names begin with "new" </s> find . -name "new*.sh" -exec rm -f '{}' \+
Mount "/windows" using /etc/fstab entry </s> mount /windows
Remove all white space from "infile.txt" and wrap each line to 80 characters </s> cat infile.txt | tr -d "[:space:]" | fold -80
Look for files with the name 'search' under current directory </s> find . -name "search"
Count the number of regular files in the current directory that contain a vowel in their names </s> find . -maxdepth 1 -type f -iname '*[aeiouy]*' -printf ".\n" | wc -l
search normal files called ' banckup '  from /usr directory downward and print them. </s> find /usr -type f -name backup -print
Abort the shell or script on the first failed command </s> set -e
Execute all commands in "commands-to-execute-remotely.sh" on server "blah_server" </s> cat commands-to-execute-remotely.sh | ssh blah_server
Print only alphanumeric values from "/dev/urandom" </s> cat /dev/urandom | tr -dc 'a-zA-Z0-9'
Search the current user's home directory and its sub-directories for any file that ends in .tar-gz and was modified after filename was last modified. </s> find ~/ -name *.tar.gz -newer filename
Find all directories in the /data1/realtime directory tree that were last modified more than 5 minutes ago but less than 60 minutes ago </s> find /data1/realtime -mmin -60 -mmin +5 -type d
create an archive excluding files matching patterns listed in /path/to/exclude.txt </s> tar -czf backup.tar.gz -X /path/to/exclude.txt /path/to/backup
display the contents of all the files in the current folder which start with test ( case insensitive search ) </s> find . -iname '*test*' -exec cat {} \;
display all the files in the current folder which have been modified in the last 24 hours </s> find . -mtime -1
Find all files/directories named 'myfile' under your home directory </s> find ~ -name myfile
Search the files in the current directory tree that are named "string to be searched" for "text" </s> find . -name "string to be searched" -exec grep "text" "{}" \;
Search the files from the current directory tree for "chrome" </s> find . | xargs grep 'chrome'
Finds recursively all files not having extension .o in '/path/' that contain 'pattern', and prints matched strings with string number and file name. </s> grep --exclude=*.o -rnw '/path/to/somewhere/' -e "pattern"
Count number of occurences of "123" in the string "123 123 123" (ie. 3) </s> echo "123 123 123" | grep -o 123 | wc -l
Prints total count of lines of all files in a current folder and subfolders. </s> find . -type f -exec wc -l {} \; | awk '{ SUM += $0} END { print SUM }'
Create a symbolc link named "public_html" to "current/app/webroot" under the current working directory </s> ln -s `pwd`/current/app/webroot public_html
Forward port 12345 bound on 'localhost' to port 12345 on 'otherHost' as user 'otherUser' </s> ssh -f -N -L localhost:12345:otherHost:12345   otherUser@otherHost
Delete and count files in $DIR_TO_CLEAN that are older than $DAYS_TO_SAVE days </s> find "$DIR_TO_CLEAN" -type f -mtime +$DAYS_TO_SAVE -print0 | awk -v RS='\0' -v ORS='\0' '{ print } END { print NR }' | xargs -0 rm
Print short TXT record of domain o-o.myaddr.l.google.com from nameserver 8.8.8.8 </s> dig TXT +short o-o.myaddr.l.google.com @8.8.8.8
List all regular files in the current directory tree modified within the last 24 hours </s> find . -mtime 0 -type f -ls
Find files under current directory that are newer than $date_time in regards of modification time </s> find . -type f -newermt "$date_time"
Search the .c files residing in the Lib/ directory tree for lines beginning with "PyErr" </s> find Lib/ -name '*.c' -print0 | xargs -0 grep ^PyErr
Go to directory /some/where/long </s> cd /some/where/long
Print the names of all files in the home directory and its subdirectories recursively whose MIME type is video </s> find ~ -type f -exec file -i {} + | grep video
search for text files in the folders /home/hobbes/ /home/calvin/ </s> find /home/hobbes/ /home/calvin/ -name “*.txt”
List all files in the current directory tree that were modified 60 minutes ago </s> find . -mmin 60 -print0 | xargs -0r ls -l
Compare "file1" and "file2" line by line with 3 lines of unified context </s> diff -u file1 file2
display all the C files or Python files in the folder "euler" </s> find euler/ -iname "*.c*" -exec echo {} \; -or -iname "*.py" -exec echo {} \;
display a long list of all the jpg files in the home folder(plus at the end is used to give bulk data as input) </s> find ~ -iname '*.jpg' -exec ls {} +
Print the list of files changed within the last minute </s> find / -newerct '1 minute ago' -print
find all files in the current folder and search for a word in them. </s> find . -type f -exec grep "applicationX" {} \;
Save the current user name in variable "myvariable" </s> myvariable=$(whoami)
Find all 50MB files </s> find / -size 50M
Search the /myfiles directory tree for files last accessed more than 30 days ago </s> find /myfiles -atime +30
Search /usr/bin for regular files that have been modified within the last 10 days </s> find /usr/bin -type f -mtime -10
display all the tex files in the current folder </s> find . -name "*.tex"
Mount partition with label "WHITE" on "/mnt/WHITE" with read and write permission and have it accessible by user and group "test" </s> mount -L WHITE /mnt/WHITE -o rw,uid=test,gid=test
Find all files/directories named 'query' (case insensitive) under current directory </s> find -iname "query"
Display bash function definition of "foobar" </s> set | grep -A999 '^foobar ()' | grep -m1 -B999 '^}'
Recursively from current folder searches only files that names match ".*xxx" pattern, ignores binary files and prints file name before every string that contains "my Text to grep". </s> grep --include="*.xxx" -nRHI "my Text to grep" *
display all normal/regular files in a folder </s> find /home/the_peasant -type f
Count the number of users logged in minus one </s> who | sed 1d | wc -l
Recursively change the owner to "${JBOSS_USER}" of "$JBOSS_LOG_DIR" </s> chown -R ${JBOSS_USER}: $JBOSS_LOG_DIR
Search for directories that contain the phrase "foo" but do not end in ".bar" </s> find . -name '*foo*' ! -name '*.bar' -type d -print
Finds recursively all folders named 'a' within current folder and removes only ones without files and another folders within. </s> find . -name "a" -type d | xargs rmdir
Send an audible ping to "10.100.3.104" </s> ping -a 10.100.3.104
download content from "http://example.com/textfile.txt" and output to "textfile.txt" </s> curl http://example.com/textfile.txt -o textfile.txt
Find all files/directories containing 'blah' (case insensitive) in their names that were modified in less than 2 days ago uder current directory tree </s> find . -iname '*blah*' -mtime -2
Find all files/directories in entire file system that have  "write" bit set for either the owner, the group, or others </s> find / -perm /u+w,g+w,o+w
Print all filenames in /usr/src except for those that are of the form '*,v' or '.*,v' </s> find /usr/src -not \( -name "*,v" -o -name ".*,v" \) '{}' \; -print
find suffix tcl files under all directories started with 'n' </s> find ./n* -name "*.tcl"
Search the .log files in the current directory tree for string "The SAS System" </s> find `pwd` -name "*.log" -exec grep "The SAS System" {} \;
show the disk use of all the regular/normal files in the current folder which are bigger than 50MB </s> find . -type f -size +50000k | xargs du -sh
Prints long listing of directory $var sorted from oldest to newest, with appended indicators. </s> $ ls -Fltr $var
Remove all .txt files in and below the current directory </s> find . -name "*.txt" | xargs rm
Show directory sizes in KB and sort to give the largest at the end </s> du -sk $(find . -type d) | sort -n -k 1
View contents of files matching "/usr/share/doc/mysql-server-5.0/changelog*.gz" in "less" </s> zcat /usr/share/doc/mysql-server-5.0/changelog*.gz | less
Find all your text files </s> find . -name "*.txt" -print
find all the configuration files in /etc folder along with the last access & modification time </s> find /etc -name "*.conf" -printf "%f %a, %t\n"
Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them </s> find ~/code -name '.*' -prune -o -type d -printf ':%p'
Get the actual find exectuable path </s> which find
Find all files under current directory whose file type description contains "image", display only path to each file. </s> find . -type f -exec file {} \; | grep -o -P '^.+: \w+ image'
Save list of groups which user $line belongs to and not matching pattern "_unknown|sciences|everyone|netaccounts" in 'results' variable </s> results=$(groups "$line" | tr ' ' '\n' | egrep -v "_unknown|sciences|everyone|netaccounts")
Find all *.sh files owned by user vivek </s> find / -user vivek -name "*.sh"
display all the text and pdf files in the current folder </s> find . -regex ".*\(\.txt\|\.pdf\)$"
Print the path of all the network mounts </s> mount | sed -n -e "s/\/\/mynetaddr on \([^ ]*\).*$/\1/p"
Print true directory name of the current directory </s> readlink `pwd`
Archive current directory to "/some/path" on localhost, using ssh to authentify as user "me", only update files that are newer in the source directory. </s> rsync -auve "ssh -p 2222" . me@localhost:/some/path
Continuously send "y" to all prompts of command "rm" </s> yes | rm
Recursively search for all directories containing "foo" (case insensitive) under the current directory, renaming them to replace "foo" (case insensitive) with "Bar" </s> find . -type d -iname '*foo*' -depth -exec rename 's@Foo@Bar@gi' {} +
find all the files that have been modified today </s> find . -type f -mtime 0
Search for all files with either "sitesearch" or "demo" in their path names </s> find . -iregex '.*sitesearch.*' -iregex '.*demo.*'
Find every JavaScript file in the wordpress directory tree </s> find wordpress -name '*js'
display the long listing detials of all the files in the folder junk which is in home folder. </s> find ~/junk   -name "*" -exec ls -l {} \;
archive all the normal/regular files in the current directory which have been modified in the last 24 hours. </s> find . -mtime -1 -type f -exec tar rvf "$archive.tar" '{}' \;
List all files in the current directory tree except for those in the ./src/emacs directory </s> find . -path './src/emacs' -prune -o -print
Rename "original.filename" to "new.original.filename" </s> mv original.filename new.original.filename
Search /usr/bin for regular files that were last accessed more than 100 days ago </s> find /usr/bin -type f -atime +100
Print the MD5 message digest of "/path/to/destination/file" </s> md5sum /path/to/destination/file
Search the current directory tree for regular files whose names match regular expression ".+-[0-9]+x[0-9]+\.jpg" </s> find . -type f -regex ".+-[0-9]+x[0-9]+\.jpg"
Print all files and directories in the `.' directory tree skipping SCCS directories </s> find . -name SCCS -prune -o -print
display all the regular files in the current folder excluding those that are present in the path "git" </s> find . -path "*.git" -prune -o -type f -print
Make directory "TestProject" </s> mkdir TestProject
display all text files in current folder </s> find . -name "*.txt"
Recursively copy all files matching "*.sh" in "$from" to "root@$host:/home/tmp/" compressing data during transmission </s> rsync -zvr --exclude="*" --include="*.sh" --include="*/" "$from" root@$host:/home/tmp/
List subdirectories in the current directory </s> find . -maxdepth 1 -type d -exec ls -ld "{}" \;
Find all *$VERSION* files/directories under current directory where $VERSION is a variable </s> find . -name "*$VERSION*"
Silently read a single character from standard input into variable "REPLY" without backslash escapes, with a timeout of 5 seconds, and using the prompt $'Press any key or wait 5 seconds to continue...\n' </s> read -rsp $'Press any key or wait 5 seconds to continue...\n' -n 1 -t 5
Print the time to ping "8.8.8.8" followed by a time stamp if the ping is greater than 50 </s> ping 8.8.8.8 | awk -F"[= ]" '{if($10>50) {cmd="date"; cmd | getline dt; close(cmd) ; print $10, dt}}'
search for dbmsspool.sql file in the current folder </s> find . -print|grep ?i dbmspool.sql
Search the /path directory tree for files matching pattern '*.foo' </s> find /path -name '*.foo'
Find all regular files that reside in the current directory tree and were last modified more than 2 days ago </s> find . -type f -mtime +2
create directory foo </s> mkdir foo
Find the largest 10 files (regular files) under current directory </s> find . -type f -print0 | xargs -0 du | sort -n | tail -10 | cut -f2 | xargs -I{} du -sh {}
Calculate md5 sum of file $ecriv </s> md5sum "$ecriv"
Hunting down files with at least one banana </s> find . -type f -print0| xargs -0 grep -c banana| grep -v ":0$"
Remove all regular files from the current directory tree that were modified between August 10th and August 17th </s> find . -type f -newermt "Aug 10" ! -newermt "Aug 17" -exec rm {} \;
Search the current directory and its sub-directories for any file that has "bsd" somewhere in its name. </s> find . -name "*bsd*" -print
Display all regular files under current directory tree ignoring files in './dir1' and './dir2' directories </s> find . -type f |sed '/.\/dir[12]\/[^/]*$/d'
Copy the owner and group of "oldfile" to "newfile" </s> chown --reference=oldfile newfile
count all the regular files that are present in a directory </s> find . -type f | wc -l
Find the files in the current directory that match pattern '*.ISOLATE.quantifier.txt' and move them to folder ISOLATE/ </s> find -name '*.ISOLATE.quantifier.txt' -maxdepth 1 -exec mv {} ISOLATE/ +
Look for files that have SUID or SGID set </s> find / -perm +6000 -type f
Make directory and parents as needed to "$FINALPATH" </s> mkdir -p "$FINALPATH"
Create a symolic link in "/usr/local/" to "/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl" </s> ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/local/
display all the files in the folders /etc /srv excluding the paths /etc/mtab and  /srv/tftp/pxelinux.cfg </s> find /etc /srv \( -path /srv/tftp/pxelinux.cfg -o -path /etc/mtab \)  -prune -o -print
Find files containing string "#!/bin/ksh" and append their names and matching strings to /tmp/allfiles </s> find . -type f -execdir /usr/bin/grep -iH '#!/bin/ksh' {} \; | tee /tmp/allfiles
Find all empty files in the current directory and delete them </s> find . -type f -maxdepth 1 -empty -print0 | xargs -0 /bin/rm
Find all read-only files </s> find / -perm /u=r
Find all files under /home/mywebsite/public_html/sites/all/modules and set their permission to 640 </s> find /home/mywebsite/public_html/sites/all/modules -type f -exec chmod 640 {} +
Change all cron jobs running "anm.sh" to be run every 10 minutes instead of 5 minutes. </s> crontab -l | sed '/anm\.sh/s,^\*/5,*/10,' | crontab -
Search all files in the current directory tree, except GIT files, for "string-to-search" </s> find . -name .git -prune -o -print | xargs grep "string-to-search"
Find all files/directories named 'document' in the root filesystem partition </s> find / -xdev -name document -print
Get a list of files and directories in the current directory tree </s> find . -print0 | xargs -0 echo
Count the *.html files residing in the /usr/src directory tree and containing string "foo" </s> find /usr/src -name "*.html" | xargs grep -l foo | wc -l
Search the entire file hierarchy for files larger than 100 megabytes and delete them. </s> find / -size +100M -exec /bin/rm {} \;
Search the /path/to/directory tree for regular files modified 61 days ago and then remove them </s> find /path/to/directory -type f -mtime 61 -exec rm -f {} \;
display all html files  in  current folder </s> find -name "*.htm" -print
Remount subtree "/outside" to "/inside" as a bind </s> mount /outside /inside -o bind
Search "file1" for lines matching regex patterns listed in "file2" and list the unique results (sorted alphabetically) </s> grep -f file2 file1 | sort -u
List files larger than 9MB residing in the current directory and below </s> find . -size +9M
Execute md5sum command on files found by the find command </s> find -iname "MyCProgram.c" -exec md5sum {} \;
Search the current directory tree for files and directories with permissions 775 </s> find .  -perm 775 -print
Find all files/directories under current directory that were modified exactly 30 minutes ago </s> find . -mmin 30
Find all directories at level 3 of directory tree $from_dir </s> find $from_dir -mindepth 3 -maxdepth 3 -type d
Find all directories starting from the current directory </s> find . -type d
change user of the direct public_html to user owner and group nobody </s> chown owner:nobody public_html
Recursively copy all files with names ending with .txt from dir_1 to the same location within copy_of_dir_1 </s> rsync --recursive --prune-empty-dirs --include="*.txt" --filter="-! */" dir_1 copy_of_dir_1
find all the cpp files in the current folder </s> find . -iname '*.cpp' -print
Search the current directory tree for files matching sed regular expression '.*myfile[0-9]\{1,2\}' </s> find . -regextype sed -regex '.*myfile[0-9]\{1,2\}'
Find all .txt files in current  directory and rename with  .html . </s> find  . -type f -name "*.txt" -exec mv {} `basename {} .html` .html \;
Find all regular files named 'Chapter1' under current directory tree </s> find . -name Chapter1 -type f -print
Save absolute path of the script filename in variable "SCRIPT" </s> SCRIPT="$(readlink --canonicalize-existing "$0")"
Find all files/directories with space in their names under current directory </s> find . -name '* *'
find all directories in the current directory </s> find . -type d
find setuid files and directories writing the details to /root/suid.txt , and find large files writing the details to /root/big.txt, traversing the filesystem just once </s> find / \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \  \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)
Change permissions of "mksdcard" to 755 </s> sudo chmod 755 mksdcard
Gets IP addresses of all active network interfaces. </s> ifconfig | grep -oP "(?<=inet addr:).*?(?=  Bcast)"
Sort file "a.csv" by the first comma separated value of each line and print only unique entries </s> tac a.csv | sort -u -t, -r -k1,1 |tac
Print all lines in file that do not match "pattern" </s> sed -n '/pattern/!p' file
Find all *.m4a files under /home/family/Music directory </s> find  /home/family/Music -type f -name '*.m4a' -print0
Change the owner of all files in the directory tree "dir_to_start" excluding directory "dir_to_exclude" to "owner" </s> find dir_to_start -name dir_to_exclude -prune -o -print0 | xargs -0 chown owner
Search *.x files from the current directory tree for string "fred" </s> find . -name ‘*.x’ -print0 | xargs -0 grep fred
display all the files in the file system which belong to the user "wnj" or which are modified after the file "ttt" </s> find / \( -newer ttt -or -user wnj \) -print
Find all files/directories with space in their names under $1 directory </s> find $1 -name '* *'
Archive "/path/to/sfolder/" to "name@remote.server:/path/to/remote/dfolder" preserving hard links and compressing the data during transmission </s> rsync -aHvz /path/to/sfolder/ name@remote.server:/path/to/remote/dfolder
search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 </s> find / -iname "*.mp3" -type f -exec /bin/mv {} /mnt/mp3 \;
Prints the day of last Friday in a current month. </s> cal | awk '$6{date=$6}END{print date}'
List all *.c files in entire file system </s> find / \! -name "*.c" -print
Archive "/path/to/files" on host "remotemachine" authentifying as user "user" and compressing data during transmission, copy symlinks as symlinks. </s> rsync -avlzp user@remotemachine:/path/to/files /path/to/this/folder
Search for files/directories which are writable by either their owner or their group </s> find . -perm /u+w,g+w
find directories  that have been modified in the last seven days </s> find . -mtime -7 -type d
display all files in current folder which have not been modified in the last 60 minutes </s> find -mmin +60
Find all regular files in the home directory tree that were modified in the last 24 hours </s> find ~ -type f -mtime 0
Prints current directory name </s> pwd | awk -F/ '{print $NF}'
Search the current directory for all regular files executable by 'user', 'group', and 'others' </s> find . -maxdepth 1 -type f -perm -ugo=x
find all the files in the file system which are bigger than 3 bytes </s> find / -size +3 -print
Search for all files in the current directory recursively whose names begin with "Linkin Park" </s> find . -name "Linkin Park*"
Cut all remote paths from HTTP URLs received from standard input (one per line) keeping only the protocol identifier, host name, and trailing slash, of the form http://example.com/ </s> sed -n 's;\(http://[^/]*/\).*;\1;p'
Print the names and sizes of regular files residing in the "dir" directory tree </s> find dir -type f -printf "f %s %p\n"
List all regular files in and below the home directory that have been modified in the last 90 minutes </s> find ~ -type f -mmin -90 | xargs ls -l
Find files in the /home/user directory tree changed exactly 10 minutes ago </s> find /home/user/ -cmin 10 -print
List the last entry of the numerically sorted list of all files and folders under "/foldername" </s> find /foldername | sort -n | tail -1
Find all files/directories with user id 120 under current directory tree </s> find . -uid 120 -print
Delete all directories found in $LOGDIR that are more than a work-week old </s> find $LOGDIR -type d -mtime +5 -exec rm -rf {} \;
Recursively change the owner and group of all files in "public_html" to "owner" </s> chown -R owner:owner public_html
Find all directories in the current directory tree that are not accessible by all </s> find -type d ! -perm -111
Find all files/directories with '.in' extension in the directory $directory and its subdirectories </s> du -a $directory | awk '{print $2}' | grep '\.in$'
Archive directory "/mnt/data" to "/media/WD_Disk_1/current_working_data/", deleting any extraneous files in destination, compress data during copy. </s> rsync -az --delete /mnt/data/ /media/WD_Disk_1/current_working_data/;
find all the cpp files in the current folder and move them to another folder </s> find . -type f -iname '*.cpp' -exec mv {} ./test/ \;
Find directories in the current directory tree that were modified within the last 24 hours and move them to /path/to/target-dir </s> find . -type d -mtime -0 -exec mv -t /path/to/target-dir {} +
Recursively change owner and group to "tomcat7" of "webapps", "temp", "logs", "work", and "conf" </s> chown -R tomcat7:tomcat7 webapps temp logs work conf
find any files or directories called ".svn" under the current directory and run a recursive delete (without prompting) command on each one. </s> find . -iname .svn -exec bash -c 'rm -rf {}' \;
Execute the 'echo' command on each file from the current directory tree individually </s> find . -exec echo {} \;
Display human-readable file type description of utf8.txt </s> file utf8.txt
Print a count of files and directories in the current directory tree </s> tree | tail -1
Prints $m latest modified files within the $d folder, using $f format for printing timestamp. </s> find "$d" -type f -printf "%T@ :$f %p\n" | sort -nr | cut -d: -f2- | head -n"$m"
Read a single character from standard input into variable "key" without backslash escapes and using an interactive shell with the prompt $'Are you sure (Y/n) : ' and default value $'Y' </s> read -rp $'Are you sure (Y/n) : ' -ei $'Y' key
Print the names of any differing files in directories "dir1/" and "dir2/" </s> diff  --brief --recursive dir1/ dir2/
Prints calendar for a current month without first day of a week. </s> cal | sed -e 's/^.\{3\}//' -e 's/^\(.\{15\}\).\{3\}$/\1/'
Delete all hidden files under $some_directory </s> find "$some_directory" -type f -name '.*' -exec rm '{}' \;
Find all *.c files under /home </s> find /home -name "*.c"
find all the files in the entire file system that start with the word top and have 3 letters next to it. </s> find / -name 'top???'
search for pattern matched files in the current folder and subfolders exclude "excluded path" </s> find ./ -type f -name "pattern" ! -path "excluded path" ! -path "excluded path"
Print numbers from 1 to 10 with 2 values per line </s> seq 10 | sed 'N;s/\n/ /'
Remove all files with names like "vmware-*.log" from the current directory tree </s> find . -name vmware-*.log | xargs -i rm -rf {}
Find all files with 644 permission and change the permission to 664 </s> find . -type f -perm 644 -exec chmod 664 {} \;
Rename file "edited_blah.tmp" to "/etc/blah" </s> sudo mv edited_blah.tmp /etc/blah
find all the files that are modified in the last 1 day </s> find  -mtime -1
Look in the current directory and below for all files whose names begin with either "my" or "qu" </s> find . \( -name "my*" -o -name "qu*" \) -print
Recursively change the owner of all files in "/home/test" to "test" </s> sudo chown -R test /home/test
find all the directories in the current folder and create the same directory structure in a remote machine using ssh </s> find -type d | ssh server-B 'xargs -I% mkdir -p "/path/to/dir/%"'
Remove regular files whose names match Perl regular expression '\w+-\d+x\d+\.\w+$' from the current directory tree </s> find -type f  |  grep -P '\w+-\d+x\d+\.\w+$' | sed -re 's/(\s)/\\\1/g' | xargs rm
list all zero-length files under the current directory </s> find . -empty -exec ls {} \;
change the extension of all the files in the current folder to html excluding those html files and those which are present in another disk partition </s> find . -xtype f \! -iname *.html   -exec mv -iv "{}"  "{}.html"  \;
Replace all instances of "STRING_TO_REPLACE" with "STRING_TO_REPLACE_IT" in "index.html" and write the output to standard output and "index.html" </s> sed s/STRING_TO_REPLACE/STRING_TO_REPLACE_IT/g index.html | tee index.html
Search /usr/local recursively for directories whose names end with a number 0-9 </s> find /usr/local -type d -name '*[0-9]'
Counts all files in a current folder and subfolders. </s> find . -type f | wc -l
Join columns in "file1" and "file2" if their first field matches and format the output as a table </s> awk 'NR==FNR{m[$1]=$2" "$3; next} {print $0, m[$1]}' file2 file1 | column -t
Remove containing directories and suffix ".wiki" from specified path, output the result. </s> basename /home/jsmith/base.wiki .wiki
Find all files under $x directory and set read-write permission for owner and group and no permission for other for those files </s> find ${x} -type f -exec chmod ug=rw,o= '{}' \;
search  all block spacial files called backup from /usr directory downwards and print them . </s> find /usr -type b -name backup -print
Make $WEEKS_TO_SAVE+1 directories named "weekly.N" where N ranges from 0 to "$WEEKS_TO_SAVE" </s> mkdir -p $(seq -f "weekly.%.0f" 0 $WEEKS_TO_SAVE)
Search the current directory recursively for files whose size is between 10 and 50 MB </s> find . -size +10M -size -50M -print
Print "yes" 4 times followed by 1 "no" </s> yes yes | sed -e 5s/yes/no/ -e 5q
Find all directories under current directory and replace all null delimiters with : in the output then remove the last : </s> find -type d -print0 | sed -e "y/\d0/:/;s/:$//;"
Change owner of "my_test_expect.exp" to "el" </s> sudo chown el my_test_expect.exp
Search the current directory recursively for regular files last changed 2 days ago </s> find . type -f -ctime 2
Find all files starting from the current directory which are smaller than 100MB </s> find . -size -100M
Remove all \*~ files under dir </s> find dir -name \\*~ -exec rm {} +
Counts lines in each of *.php files in a current folder and subfolders ignoring 'tests*' folders and prints total count as well. </s> find . -name "*.php" -not -path "./tests*" | xargs wc -l
list *.pdf, *.bmp and *.txt files under the /home/user/Desktop directory. </s> find /home/user/Desktop -name '*.pdf' -o -name '*.txt' -o -name '*.bmp'
find all files in the file system with the permissions 777 and having the word "filename" in their name. </s> find / -perm 777 -iname "filename"
Find blabla* files under current directory </s> find . -depth -name "blabla*" -type f | xargs rm -f
Searches through the htdocs and cgi-bin directories for files that end with the extension .cgi. When these files are found, their permission is changed to mode 755 (rwxr-xr-x). </s> find htdocs cgi-bin -name "*.cgi" -type f -exec chmod 755 {} \;
Find files in the current directory tree whose names are of the form "cxx_data.txt" where xx is a number from 30 to 70 </s> find . -regextype posix-egrep -regex '.\*c([3-6][0-9]|70).\*'
Mount image "test" to loop device "/dev/loop0" </s> sudo mount -o loop /dev/loop0 test
Save number of lines in 'file.txt' file in 'nbLines' variable </s> nbLines=$(cat -n file.txt | tail -n 1 | cut -f1 | xargs)
Print the path names of all regular .rb files prefixing them with string "Hello, " </s> find . -name "*.rb" -type f | xargs -I {} echo Hello, {} !
Remove all "work" directories residing in /usr/ports and below </s> find /usr/ports/ -name work -type d -print -exec rm -rf {} \;
Rename absolute path of symbolic link "dirln" to "dir2" </s> mv "$(readlink -f dirln)" dir2
create directory subdirectory </s> mkdir subdirectory
Show the last 10 .conf files found by `find' in the /etc directory and 1 level below </s> find /etc -maxdepth 2 -name "*.conf" | tail
compresses all the files in the current folder with default depth </s> find . -depth -print | cpio -dump /backup
Prints day of first Tuesday in a month. </s> cal | awk 'NR==2 {for (i=1;i<=NF;i++) {sub(/ /,"",$i);a[$i]=i}} NR>2 {if ($a["Tu"]~/[0-9]/) {printf "%02d\n",$a["Tu"];exit}}' FIELDWIDTHS="3 3 3 3 3 3 3 3"
Search for files greater than 20MB in the entire file system and display the path and file size </s> find / -type f -size +20M -exec ls -lh {} \; | awk '{ print $NF ": " $5 }'
Change all files with no user under "/var/www" to have owner "root" and group "apache" </s> sudo find /var/www -nouser -exec chown root:apache {} \;
Recursively removes $TMPDIR folder, prompting user on each deletion. </s> rm -r $TMPDIR
Changes group ownership of /sys/class/gpio/export and /sys/class/gpio/unexport to 'gpio'. </s> sudo chgrp gpio /sys/class/gpio/export /sys/class/gpio/unexport
Find files not matching the posix extended regex '.+\-[0-9]{2,4}x[0-9]{2,4}\.jpg' in their paths under Folder1 and copy them to Folder2 </s> find Folder1 -type f -regextype posix-extended \( ! -regex '.+\-[0-9]{2,4}x[0-9]{2,4}\.jpg' \) -print0 |  xargs -0 cp -p --target-directory=Folder2
Save count of lines from file $file matching with pattern $filter and not matching with pattern $nfilter in variable 'totalLineCnt' </s> totalLineCnt=$(cat "$file" | grep "$filter" | grep -v "$nfilter" | wc -l | grep -o '^[0-9]\+');
Search the entire system for SUID or SGID files </s> find / -path /proc -prune -o -type f -perm +6000 -ls
Finds strings matching pattern '^fields=\\\|^var=' in a 'set' output. </s> set | grep ^fields=\\\|^var=
Creates temporary file with name formatted like '.script.XXXXXX' in '/tmp/' folder and saves path to it in 'script2' variable. </s> script2=`mktemp /tmp/.script.XXXXXX`;
get all files in a current directory modified in the last 7 days </s> find . -mtime -7 -print0 | xargs -0 tar -rf /foo/archive.tar
Search all *.c files from the current directory tree for "hogehoge" </s> find . -name \*.c -print | xargs grep hogehoge
display list of all the C files ( fuiles with ".c" extension ) in current folder </s> find . -name '*.c' -ls
Attempt to connect as root via ssh to host "IP" and copy /root/K to local machine, passing option "StrictHostKeyChecking=no" to the ssh backend - this will normally fail because ssh servers by default don't (and shouldn't) accept root logins. </s> scp -o StrictHostKeyChecking=no root@IP:/root/K
Measure the disk space taken up by all TXT files in the current directory tree </s> find . -iname "*.txt" -exec du -b {} + | awk '{total += $1} END {print total}'
Find all regular files whose names contain "@" in directory tree ~/$folder </s> find ~/$folder -name "*@*" -type f
prints last part of a logfile since timestamp 423 </s> tac file.log | awk '{ if ($1 >= 423) print; else exit; }' | tac
Get the disk space used by all *.txt (case insensitive) files/directories under current directory </s> find . -name "*.txt" -print0 |xargs -0 du -ch | tail -n1
Locate symbolic links in /usr and below </s> find /usr -type l
Print the current directory tree with file sizes </s> tree -s
Report all files in /mydir1 and /mydir2 larger than 2000 blocks and accessed in over 30 days </s> find /mydir1 /mydir2 -size +2000 -atime +30 -print
Find all directories under current directory and set their permission to 775 </s> find -type d | xargs chmod 775
Print '-okdir is an action so an implicit -print is not applied' for each file/directory found by the name 'file' under current directory tree </s> find -name file -okdir echo '-okdir is an action so an implicit -print is not applied' \;
search for files having python in filename </s> find / -iname '*python*'
Search the specified user for the given "filename" </s> find / -user pat -iname "filename"
Send 5 pings to broadcast address "10.10.0.255" and print the unique IPs who responded </s> ping -c 5 -b 10.10.0.255 | grep 'bytes from' | awk '{ print $4 }' | sort | uniq
Display the last slash-separated part of path, in this case "example". </s> basename /usr/local/svn/repos/example
Print file information of command "bash" </s> echo $(ls -l $(which bash))
Enables 'nullglob' shell option. </s> shopt -s nullglob
Print a sorted list of the extensions of the regular files from the current directory tree </s> find . -type f | sed -e 's/.*\.//' | sed -e 's/.*\///' | sort -u
Find files in the current directory tree whose size is greater than 24000 bytes </s> find . -size +24000c
Set timestamp of B to the timestamp in stat format specified by variable "old_time" </s> touch -d"$(date --date="@$old_time")" B
Make directory "dir" and do not cause an error if it exists </s> mkdir -p dir
Prints the length and contents of the longest line in filename </s> cat filename | awk '{print length, $0}'|sort -nr|head -1
display all the files in the folders mydir1, mydir2 which are bigger than 2KB and have not been accessed in the last 30*24 hours </s> find /mydir1 /mydir2 -size +2000 -atime +30 -print
Print all files with a '-' after their name if they are regular files, and a '+' otherwise </s> find / -type f -exec echo {} - ';' -o -exec echo {} + ';'
Save all directories under the current directory as a comma separated list in variable "FOLDERS" </s> FOLDERS=$(find . -type d | paste -d, -s)
Change group ownership to `foo' for files with GID=2000 </s> find / -group 2000 -exec chgrp -h foo {} \;
Find all directories under current directory excluding  directories (along with their contents) that start with a . (dot) in their names </s> find . -type d -a ! -name '.?*' -o -name '.?*' -a ! -prune
Search the files from the current directory tree for "chrome" </s> find . | xargs grep 'chrome' -ls
Delete files in /var/tmp/stuff and below that have not been modified in over 90 days </s> find /var/tmp/stuff -mtime +90 -exec /bin/rm {} \+
display all the files in the current directory and do not search in sub directories </s> find . -maxdepth 1 -print0
Print 'huzzah' if /some/dir/ is empty </s> find /some/dir/ -maxdepth 0 -empty -exec echo "huzzah" \;
Archive all files (not directories) in "folder1" to "copy_of_folder1" specifying to include files info.txt and data.zip </s> rsync -a -f"+ info.txt" -f"+ data.zip" -f'-! */' folder1/ copy_of_folder1/
Find all directories and for each of them, print an mv command to move it to /new/location </s> find . -type d   -execdir echo /bin/mv {} /new/location \;
Print the file content of command "f" </s> cat "$(which f)"
Find files/directories that is under group 'root' or have no group and set their group to 'apache' </s> find /var/www -group root -o -nogroup -print0 | xargs -0 chown :apache
Find all files/directories under 'A' directory tree excluding directory 'A/a' and all of it's contents </s> find A \! -path "A/a/*" -a \! -path "A/a"
find all the regular/normal files in the current folder which belong to the users with the user id's between 500 and 1000 </s> find . -uid +500 -uid -1000 -type f
Recursively find strings in all files under current directory, that matching with comma-separated patterns list in file 'searches-txt' </s> cat searches.txt| xargs -I {} -d, -n 1 grep  -r {}
Print info about all mounted file systems, and grand total statistic about available and used space </s> df --total
Search the current directory recursively for directories with the execute permission set for everybody </s> find -type d ! -perm -111
Removes first and last parts of path 'test/90_2a5/Windows' and prints the result. </s> echo 'test/90_2a5/Windows' | xargs dirname | xargs basename
display all text files in current folder </s> find . -name ".txt"
Search the current user's home directory and its sub-directories for any files accessed after alldata.tar was last accessed and add them to that same tar archive. </s> find ~/ -newer alldata.tar 	-exec tar uvf alldata.tar {} \;
Split "randn20M.csv" into files of at most 5000000 lines each with prefix "_tmp" </s> split -l5000000 randn20M.csv '_tmp';
Search all files in the current directory tree whose names end in "1" for string "1" </s> find . -name "*1" -print0 |xargs -0 grep "1"
List files and directories recursively </s> find . -print | xargs ls -gilds
find all the text files in the folder /home/calvin which are atleast below 2 levels </s> find /home/calvin/ -mindepth 2  -name “*.txt”
display list of all the regular/normal files in the home folder which are bigger than 512 kb </s> find /home/ -type f -size +512k -exec ls -lh {} \;
Find all files/directories following symlinks under /path/to/dir/* paths and print the timestamp in YmdHMS format along with their paths </s> find -L /path/to/dir/* -printf "%TY%Tm%Td%TH%TM%TS|%p\n"
Find *.js UTF-8 files with BOM and correct them </s> find . -iname *.js -type f -exec sed 's/^\xEF\xBB\xBF//' -i.bak {} \; -exec rm {}.bak \;
Find all *.foo files under current directory and print their contents </s> cat `find . -name '*.foo' -print`
Run commands "df -k;uname -a" on server "192.168.79.134" </s> echo "df -k;uname -a" | ssh 192.168.79.134
Locate all the hard links of file `passwd' </s> find / -samefile passwd
Recursively search current directory for all files with name ending with ".t1", change this to .t2 </s> find . -name "*.t1" -exec rename 's/\.t1$/.t2/' '{}' \;
find the path of a specfic video file in the current directory </s> find . -name foo.mp4 | sed 's|/[^/]*$||'
Find only number of hard link & name of files from long list </s> find -type f -iname "*.txt" -exec ls -lrt {} \;|awk -F' ' '{print $1 $2  $9}'
Set variable "fname" to the basename of path specified in variable "f", that is remove everything up to the last slash if present. </s> fname=`basename $f`
Delete all hidden files/directories under $some_directory </s> find "$some_directory" -name '.*' ! -name '.' ! -name '..' -delete
Search for "1234567890" in every gzip file modified between 8:00 and 9:00 on 2014-04-30 </s> find . -newermt '2014-04-30 08:00:00' -not -newermt '2014-04-30 09:00:00' |xargs gunzip -c | grep 1234567890
Immediately exit the shell if a command fails </s> set -e
Test if a file named 'file' in the current directory is more than 1 hour old </s> find file -prune -cmin +60 -print | grep -q .
Perform a default Plesk configuration </s> find /var/www/vhosts/*/httpdocs -type f -iwholename “*/wp-includes/version.php” -exec grep -H “\$wp_version =” {} \;
find dirctory files which modification time is  7 days ago </s> find . -mtime -7 -type d
Print "on" to standard output and to files matching "/sys/bus/usb/devices/usb*/power/level" </s> echo "on" | tee /sys/bus/usb/devices/usb*/power/level
Set up local port forwards in the background with no terminal or command execution from port 4431 to host "www1" port 443 and port 4432 to host "www2" port 443 via the host "colocatedserver" </s> ssh -fNT -L4431:www1:443 -L4432:www2:443 colocatedserver
Find all directories under /home/mywebsite/public_html/sites/all/modules and set their permission to 750 </s> find /home/mywebsite/public_html/sites/all/modules -type d -exec chmod 750 {} +
Split "$FILENAME" into files with at most 20 lines each with a prefix "xyz" </s> split -l 20 $FILENAME xyz
Print the list of files and directories of the /etc directory </s> find /etc/. ! -name /etc/.
Find all files that contain the case insensitive regex 'stringtofind' in maximum 1 level down the / directory without descending into other partitions </s> find / -maxdepth 1 -xdev -type f -exec grep -Zli "stringtofind" {} +
Interactively create a symbolic link in the current directory for "$SCRIPT_DIR/$FILE" </s> ln --symbolic --interactive $SCRIPT_DIR/$FILE
change the group to "new_group" and permissions to 770 for all the files in the current folder </s> find . -name "*" \( -exec chgrp -v new_group {} \; -o -exec chmod -v 770 {} \; \)
Subtract all columns in "File2" from "File1" except the first </s> awk 'FNR==NR { for(i=2;i<=NF;i++) a[$1][i]=$i; next } { for(j=2;j<=NF;j++) $j-=a[$1][j] }1' File2 File1 | rev | column -t | rev
find files in the current directory having name "filename" </s> find -iname "filename"
change the group of all the files which belong to the user edwarda to pubs </s> find / -user edwarda -exec chgrp pubs "{}" \;
Recursively change the group of all files in "/tmp/php_session" to "daemon" </s> chown -R :daemon /tmp/php_session
find all the undo files in the current folder and display the toal lines, words, characters </s> find ./ -name *.undo | xargs wc
search for the directory with the name aa in the current folder </s> find . -type d -name aa
Find all files in the `work' directory tree, pass them to grep and search for "profit" </s> find ./work -print | xargs grep "profit"
Counts all files in a DIR_NAME folder and subfolders. </s> find DIR_NAME -type f | wc -l
Print the total disk usage in bytes of all files listed in "files.txt" </s> cat files.txt | xargs du -c | tail -1 | awk '{print $1}'
List ".java" files that have the same contents </s> md5sum *.java | sort | uniq -d -w32
display all mp3 files in the file system which have not been accessed in the last 24 hours </s> find / -name “*.mp3” -atime +01 -type f
Find files whose name starts with "MyFile", ignoring the case </s> find . -iname 'MyFile*'
Print amount of space available on the file system containg path to the current working directory. </s> df . | awk '$3 ~ /[0-9]+/ { print $4 }'
find all the video files in the home folder </s> find ~ -type f -exec file -i {} + | grep video
List executable files in the current directory, sort the list and then display the differences between the list and file .gitignore. </s> find . -perm /111 -type f | sed 's#^./##' | sort | diff -u .gitignore -
Show file type information for files in /usr/bin </s> find /usr/bin | xargs file
Split standard input into files with at most 75 lines each </s> split --lines=75
split $SOURCE_FILE" into pieces per 100 lines </s> split -l 100 "$SOURCE_FILE"
Find all the Sticky Bit set files whose permission are 551 </s> find / -perm 1551
Print the file 'text1;text2;text3' replacing each space(" ") with a newline </s> cat "text1;text2;text3" | sed -e 's/ /\n/g'
Save the greater version number of "$1" and "$2" into variable "ver" </s> ver=`echo -ne "$1\n$2" |sort -Vr |head -n1`
Search directories called ' backup ' from /usr directory downwards and print them. </s> find /usr -type d -name backup -print
Remove all .sh files in the current directory tree whose names begin with "new" </s> find . -name "new*.sh" -exec rm -f '{}' \;
delete all the text files from the current folder after user confirmation </s> find . -name "*.txt" -ok rm {} \;
Print the characters in $b that match with any character in $a without printing any newline </s> echo "$b" | grep -o "[$a]" | tr -d '\n'
Find all files under ./lib/app and redirect their sorted list to myFile </s> find ./lib/app -type f | sort | tee myFile
Search the ./bin directory recursively for files called "cp" </s> find ./bin -name “cp”
Run 'join' with the number-sorted output of file1 and file2, without modifying file1 or file2: for each line with a common first field in file1 and file2, output the common field followed by the extra fields in both files. </s> join <(sort -n file1) <(sort -n file2)
Create a symbolic link named ".bash_profile" to ".bashrc" </s> ln -s .bashrc .bash_profile
find all the files in the /usr folder that have been modified after the file /usr/FirstFile. </s> find /usr -newer /usr/FirstFile -print
create and list contents of the archive </s> tar cf - $PWD|tar tvf -
Find all files under /home/username/public_html/modules  and set their permission to 640 </s> find /home/username/public_html/modules -type f -exec chmod 640 {} +
Change permission to 000 of all directories named '.texturedata' under '/path/to/look/in/' directory tree </s> find /path/to/look/in/ -type d -name '.texturedata' -prune -print0 | xargs -0 chmod 000
Remove all files and directories called "test" from the current directory tree </s> find . -name test -exec rm -R "{}" \;
Create intermediate directories foo and bar as required and directory foo/bar/baz </s> mkdir -p foo/bar/baz
Change permissions to u=rw,g=r,o= for all files in the current directory tree </s> find . -type f -exec chmod u=rw,g=r,o= '{}' \;
Serach  in root directory all files which  have more than 2 links. </s> find / -links +2 -print
Find all the files in file system which are changed in last 1 hour </s> find / -cmin -60
Non-recursively finds all '*.pdf' files in a current folder and removes them. </s> find -maxdepth 1 -name '*.pdf' -exec rm "{}" \;
display all the configuration files in the current folder which are in the current tree structure </s> find .  -path '*/*config'
Compare "current.log" and "previous.log" line by line and print lines containing regex pattern ">\|<" </s> diff current.log previous.log | grep ">\|<" #comparring users lists
From the list of words (one per line) in list1.txt, display the number of occurrences of this word in list2.txt and sort the results from highest to lowest count. </s> grep -Ff list1.txt list2.txt | sort | uniq -c | sort -n
Decompress 'file.gz' to standard output and execute the output in bash </s> gzip -d --stdout file.gz | bash
find files in current folder using name patterns and sort the display the file names in the sorted order </s> find . -name "S1A*1S*SAFE" | rev | awk -F '/' '{print $1}' | rev | sort -t _ -k 5
List all files that are between 10000 and 32000 bytes in size </s> find . -size +10000c -size -32000c -print
Create 6-letter named temporary file in a folder path that is provided as the first positional parameter, and save the path to it in a variable 'tmpfile' </s> tmpfile=$(mktemp $(dirname "$1")/XXXXXX)
Find recursively the latest modified file in the current directory </s> find . -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" " | sed 's/.*/"&"/' | xargs ls -l
Execute "ls -l" every 2 seconds </s> watch ls -l
List all ~/bin/FilesDvorak/.* (non-recursive) and ~/.PAST_RC_files/.* (recursive) files/directories and take common entries between these two lists </s> comm -12 <(find ~/bin/FilesDvorak/.* -maxdepth 0) <(find ~/.PAST_RC_files/.*)
Find all *.php (case insensitive) and *.js files (case insensitive) under /home/jul/here excluding  /home/jul/here/exclude/* paths </s> find /home/jul/here -type f \( -iname "*.php" -o -iname "*.js" \) ! -path "/home/jul/here/exclude/*"
Remove all files from the system whose path names contain "GUI" </s> find / -type f -print0 | xargs -0 grep -liwZ GUI | xargs -0 rm -f
Find all files under /home/username/public_html/themes and set their permission to 640 </s> find /home/username/public_html/themes -type f -exec chmod 640 {} +
Find all *.m4a files/directories under /home/family/Music directory </s> find /home/family/Music -name *.m4a -print0
Search current directory for any directory named "config" and go to first match found. </s> cd "$(find . -name config -type d | sed 1q)"
Search directory /tmp/foo for files containing "/tmp/foo/bar" in their full names </s> find /tmp/foo -path /tmp/foo/bar -print
Remove all .txt files with spaces in names in and below the current directory </s> find -name "*\ *.txt" | xargs rm
display all instances of "foo.cpp" file in the current folder which are not in the sub directory tree ".svn" </s> find . -name 'foo.cpp' '!' -path '.svn'
Find all 777 permission directories and use chmod command to set permissions to 755 </s> find / -type d -perm 777 -print -exec chmod 755 {} \;
search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 </s> find / -iname "*.mp3" -type f -print0 | xargs -0 -I '{}' /bin/mv "{}" /mnt/mp3/
Remove regular files whose names match Perl regular expression '\w+-\d+x\d+\.\w+$' from the current directory tree </s> find -type f |  grep -P '\w+-\d+x\d+\.\w+$' | xargs rm
Will run checksums recursively from the current directory, and give back grouped filenames of all identical checksum results. </s> find ./ -type f -print0 | xargs -0 -n1 md5sum | sort -k 1,32 | uniq -w 32 -d --all-repeated=separate | sed -e 's/^[0-9a-f]*\ *//;'
list all regular files under the directory "$directory" </s> find $directory -type f -name '*'
Remove directories in /media/1Tb/videos modified more than 7 days ago </s> find /media/1Tb/videos -maxdepth 1 -type d -mtime +7 -exec rm -rf {} \;
Find files which are more than 2 days old under  ${userdir}/${i}/incoming directory </s> find ${userdir}/${i}/incoming -mtime +2 -type f -ls
Remove all *.txt files under the given directory modified more than 5 minutes ago </s> find /home/u20806/public_html -maxdepth 1 -mmin +5 -type f -name "*.txt" -delete
Mark variables and function which are modified or created for export to the environment of subsequent commands </s> set -a
Search the current directory tree for files whose names contain "bills" </s> find . -name '*bills*' -print
find all the files which have not been modified in the last 1 year and display the total disk usage of them  in GB </s> find . -type f -mtime +356 -printf '%s\n'  | awk '{a+=$1;} END {printf "%.1f GB\n", a/2**30;}'
List all cron jobs which contain "word". </s> crontab -l | grep 'word'
Find all files/directories named 'Desktop' under current directory </s> find ./ -name Desktop
Find how many directories are in a path (counts current directory) </s> find . -type d -exec basename {} \; | wc -l
Change permissions of all files ending in ".php" under the current directory to 755 and print a '+' for each file </s> find . -name '*.php' -exec chmod 755 {} \; -exec echo '+' \;
Change permissions of all directories in the ~/dir_data directory tree in accordance with mode `a+xr,u+w' </s> find ~/dir_data -type d -exec chmod a+xr,u+w {} \;
Remove all files named tmp or ending in .xx that have not been accessed for seven or more 24-hour periods </s> find / \( -name tmp -o -name '*.xx' \) -atime +7 -exec rm {} \;
Search for all jpg images on the system and archive them </s> find / -name *.jpg -type f -print | xargs tar -cvzf images.tar.gz
Save full path of command "cat" to variable "CAT" </s> CAT=`which cat`
Print every 20 bytes of standard input as tab separated groups of bytes 1-3, 4-10, and 11-20 </s> fold -b -w 20 | cut --output-delimiter $'\t' -b 1-3,4-10,11-20
Check if process ID 1 exists (init or systemd) and current user has permission to send it signals. </s> kill -0 1
Print the names of the directories from the paths expanded by the glob pattern /path/to/directory/* </s> find /path/to/directory/* -maxdepth 0 -type d -exec basename -a {} +
Find files starting with the word "file" in the current directory tree </s> find . -name "file*"
Find all the files in entire file system  which are accessed 50 days back </s> find / -atime 50
Report file systems disk usage in 1GB blocks. </s> df -BG
Find the first file/directory named 'something' under current directory and quit </s> find . -name something -print -quit
find non-hidden files (ones that do not start with the period "." chartacter) that were are modified in the last 15 minutes. </s> find . -mmin -15 \( ! -regex ".*/\..*" \)
Replace all the mathes to regex '<script type="text\/javascript" charset="utf-8" src="file.js"><\/script>.*' with '<script type="text\/javascript" charset="utf-8" src="file2.js"><\/script>' in all HTML files under $DIR directory tree modifying the files in-place </s> find $DIR -type f -name '*.html' -exec sed -i 's/.*<script type="text\/javascript" charset="utf-8" src="file.js"><\/script>.*/<script type="text\/javascript" charset="utf-8" src="file2.js"><\/script>/g' {} \;
Search directory tree `MyApp.app' for directories whose name is 'Headers' and delete them </s> find MyApp.app -name Headers -type d -exec rm -rf "{}" \;
Find all *.jpg files in */201111/* paths and numerically sort them according to the second field in the file name with a delimiter '_' </s> find */201111/* -name "*.jpg" | sort -t '_' -nk2
display all files in the current folder along with their last accessed timestamps </s> find . -printf "%h/%f : dernier accès le %AA %Ad %AB %AY à %AH:%AM:%AS\n"
create a backup of all the files in the current folder excluding those that are present in the .snapshot sub directory and excluding the swap files (files ending with  ~) </s> find . -name .snapshot -prune -o \( \! -name *~ -print0 \) | cpio -pmd0 /dest-dir
Add variable 'v' with value '5' to a temporary environment, list this environment using 'less' to interactively view it. </s> v=5 env|less
Make a copy of file.txt in all directories in current directory - names may not contain spaces. </s> ls -d */ | xargs -iA cp file.txt A
Create a ssh tunnel on local port 2222 through "bridge.example.com" to "remote.example.com" port 22 without executing any commands and run in the background </s> ssh -N -L 2222:remote.example.com:22 bridge.example.com&
Compare the contents of gzip-ompressed files "file1" and "file2" </s> diff <(zcat file1.gz) <(zcat file2.gz)
Finds strings having text "searched-string" in all files recursively in a current folder. </s> find . | xargs grep "searched-string"
display all the files in the current directory excluding those that are in the 'secret' directory </s> find . -name 'secret' -prune -o -print
List all regular files from the current directory tree that were modified less than 60 minutes ago </s> find . -type f -mmin -60 | xargs -r ls -l
Find all files/directories that have read, write, execution permission for user and belong to the user 'my_user' under current directory tree </s> find . -user my_user -perm -u+rwx
Find all top-level files in the current folder but ones with name like '*Music*' to the 'dest/' folder. </s> find . -maxdepth 1 -name '*Music*' -prune -o -print0 | xargs -0 -i cp {} dest/
Search for 'example' in all regular files from the current directory </s> find -maxdepth 1 -type f | xargs grep -F 'example'
remove all the files in the present directory which have space in their name. </s> find . -name "* *" -exec rm -f {} \;
Find all *.c files under and below the current directory that contain "wait_event_interruptible" </s> find . -name \*.c -print0 | xargs -0 grep wait_event_interruptible /dev/null
Print each logged in user's full name </s> finger -l | grep "Name:" | cut -d ":" -f 3 | cut -c 2- | sort | uniq
Compress from standard input and print the byte count preceded with 'gzip.' </s> echo gzip. $( gzip | wc -c )
List all files and directories residing in the current directory and below </s> find | xargs ls
Read a line from standard input with prompt "Is this a good question (y/n)? " and save the response to variable "answer" </s> read -p "Is this a good question (y/n)? " answer
Find all files in current directory that were modified less than 1 day ago excluding hidden files  and archive them and put the output into the variable file_changed </s> file_changed=$(find . -depth \( -wholename \./\.\* \) -prune -o -mtime -1 -print | cpio -oav)
List every symbolic link in every home directory's subdirectory owned by group `staff' </s> find `pwd` -group staff -exec find {} -type l -print ;
Split "$SOURCE_FILE" into files of at most 100 lines each </s> split -l 100 "$SOURCE_FILE"
List all files and folders in the current working directory </s> ls `pwd`/*
display a list of all the files in the file system which do not belong to any user and search only in jfs and jfs2 file systems </s> find / -nouser \( -fstype jfs -o -fstype jfs2 \) -ls
find all files in current folder having the name pattern "some_pattern" and move them to folder target_location (GNU VERSION) </s> find . -name some_pattern -print0 | xargs -0 -I % mv % target_location
Find all files/directories under whatever and ... directory and copy them to /var/tmp </s> find whatever ... | xargs -d "\n" cp -t /var/tmp
Print numbers from 1 to 30 with a leading 0 </s> seq -w 30
delete what was typed in the command line and run "pwd" when button "\e[24~" </s> bind '"\e[24~":"\C-k \C-upwd\n"'
Read a single character from standard input into variable "doit" with prompt "Do that? [y,n]" </s> read -n1 -p "Do that? [y,n]" doit
Find all directories on the system whose size is greater than 50k </s> find / -type d -size +50k
Removes empty folder 'symlink'. </s> rm -d symlink
Find directories in the current directory tree that were modified within the last 24 hours and move them to /path/to/target-dir </s> find . -type d -mtime 0 -exec mv {} /path/to/target-dir \;
find all the files in the current directory and display them </s> find . -exec echo {} ;
find all the regular/normal files in the /path folder and delete them </s> find /path -type f -print0 | xargs -0 rm
Remove the file with inode number 752010 </s> find -inum 752010 -exec rm {} \;
Change permissions of ".bash_logout", ".bashrc", and ".profile" to 444 </s> chmod 444 .bash_logout .bashrc .profile
List all *.java files/directories under /home/bluher with their full paths </s> find /home/bluher -name \*.java
Just find directories and skip file names </s> find  / -type d -name "apt" -ls
Create intermediate directories as required and directory /tmp/test/blah/oops/something </s> mkdir -p /tmp/test/blah/oops/something
Find all directories under '/var/www' directory tree excluding '/var/www/web-release-data' and '/var/www/web-development-data' directories and their sub-directories </s> find /var/www -type d \( ! -wholename "/var/www/web-release-data/*"  ! -wholename "/var/www/web-development-data/*" \)
Brings down network interface eth0. </s> ifconfig eth0 down
Find SQL files with text `expression' </s> find . -name "*.sql" -print0 -type f | xargs -0 grep "expression"
Force create a symbolc link named "softlink_name" to "source_file_or_directory_name" without dereferencing "softlink_name" </s> ln -sfn source_file_or_directory_name softlink_name
Find all executable files under current directory and show a few lines of output from the beginning </s> find . -perm /a=x | head
List all variables (names only) with names containing X. </s> env | awk -F "=" '{print $1}' | grep ".*X.*"
Create a report of the contents of a USB drive mounted at find /path/to/drive </s> find /path/to/drive -type f -exec file -b '{}' \; -printf '%s\n' | awk -F , 'NR%2 {i=$1} NR%2==0 {a[i]+=$1} END {for (i in a) printf("%12u %s\n",a[i],i)}' | sort -nr
download contents from "https://raw.github.com/creationix/nvm/master/install.sh" and execute </s> curl https://raw.github.com/creationix/nvm/master/install.sh | sh
Print content of 'file' file reverted characterwise </s> rev file
Find all files/directories named 'my.txt' in the entire filesystem </s> find / -name "my.txt"
Print out the full path name of "mypathname" with dots resolved </s> readlink -ev mypathname
Find all files that have wrong permission </s> find / \( -perm -006 -o -perm -007 \) \( ! -type -l \) -ls
Find all files under /path/to/base/dir and change their permission to 644 </s> chmod 644 $(find /path/to/base/dir -type f)
change user and group of the file "/var/run/docker.sock" to user root and group dockerroot </s> sudo chown root:dockerroot /var/run/docker.sock
find the biggest files only (but not directories) </s> find . -type f -exec du -Sh {} + | sort -rh | head -n 15
find all the css files </s> find -name '*.css'
Find all files that are set group ID to staff </s> find . -group staff -perm -2000 -print
List all environment variables (name and value) whose name either equals PATH or starts with GOBIN </s> env | grep '^\(GOBIN\|PATH=\)'
Create symbolic links in the current directory for all files under "bar1" that are not directories and do not end in ".cc" </s> find bar1 -name '*foo*' -not -type d -not -name '*.cc' -exec ln -s $PWD/'{}' bar2/ \;
Print a top 20 histogram of characters used from standard input showing backslash escapes for non-displayables </s> od -cvAnone -w1 | sort -b | uniq -c | sort -rn | head -n 20
Count the *.html files residing in the /usr/src directory tree and containing string "foo" </s> find /usr/src -name "*.html" -exec grep -l foo '{}' ';' | wc -l
Print each line in "f1" and "f2" separated by a space and "f3" separated by a tab </s> paste <(paste -d" " f1 f2) f3
find all the html files in the current folder and rename them to .var files </s> find -name '*.html' -print0 | xargs -0 rename 's/\.html$/.var/'
search for files in the current folder using name patterns </s> find . -name '[mM][yY][fF][iI][lL][eE]*'
Print host name followed by ":" and the contents of "/sys/block/sda/size" </s> echo "$(hostname):$(cat /sys/block/sda/size)"
Find all files that belongs to user root under / directory and show a few lines of output from the beginning </s> find / -user root | head
Remove all files with the .c extension in the current directory tree </s> find . -name "*.c" | xargs rm -rf
Search the current directory tree for the files with extension "trc" and remove them if they are more than three days old </s> find . -name "*.trc" -ctime +3 -exec rm {} \;
Find all files/directories that contain 'packet' (case insensitive) in their names excluding directories that are bigger than 1500 bytes in size </s> find . -iregex ".*packet.*" ! -type d -size +1500c
change owner of the file process to user root </s> sudo chown root process
Add group write permission to all files matching "*" or "...*" </s> chmod g+w * ...*
Find all *fink* files/directories in entire file system </s> find / \( -type f -or -type d \) -name \*fink\* -print
display all files in the current folder with the name test excluding those that are present folder test </s> find . -name test -prune -o -print
search for "message.txt" in the folder .cache/bower and display its contents </s> find .cache/bower/ -name "message.txt" | xargs cat
Change string "searc" to "replace" in all files in directory hierarchy </s> find . -type f -exec sed -i 's/searc/replace/g' {} \;
Remove the files or directories 'bin/node', 'bin/node-waf', 'include/node', 'lib/node', 'lib/pkgconfig/nodejs.pc' and 'share/man/man1/node' with superuser privilege </s> sudo rm -rf bin/node bin/node-waf include/node lib/node lib/pkgconfig/nodejs.pc share/man/man1/node
Print lines in "foo.txt" that are found only once </s> sort foo.txt | uniq
Find directories under maximum 1 level down the directory $dir with 100 permission that are owned by the user $username </s> find $dir -maxdepth 1 -type d -user $username -perm -100
search for the regular/normal file "Dateiname" in the entire file system </s> find / -type f -iname "Dateiname"
Print the names of all files and directories in the current directory tree </s> find . -print
Archive "/path/to/sfolder" to "name@remote.server:/path/to/remote/dfolder" compressing the data during transmission </s> rsync -avlzp /path/to/sfolder name@remote.server:/path/to/remote/dfolder
search in the current folder for all the regular/normal file with the name "test" </s> find . -type f -name test
Find and remove multiple files such as *.mp3 or *.txt under current directory </s> find . -type f -name "*.txt" -exec rm -f {} \;
Copy all *.mp3 files under the current directory to /tmp/MusicFiles/ </s> find . -type f -name "*.mp3" -exec cp {} /tmp/MusicFiles \;
create directory dir1 </s> mkdir dir1
Create tar.gz files older than one day logs </s> find /home/testuser/log/ -mtime +1 | xargs  tar -czvPf  /opt/older_log_$(date +%F).tar.gz
Execute "ls -l data.temp" every 2 seconds </s> watch ls -l data.temp
Print appended data in "/var/log/some.log" that match "foo" and "bar" </s> tail -f /var/log/some.log | grep --line-buffered foo | grep bar
Change to folder where the oracle binary is. </s> cd "$(dirname $(which oracle))"
Extract protocol and host name from URL. </s> echo "$url" | cut -d'/' -f1-3
List all files/directories under current directory by replacing all spaces with commas (,) </s> find . -ls | tr -s ' ' ,
Output all lines in 'file' comparing the first 12 characters and discarding any adjascent lines where these characters are duplicates. </s> uniq -w12 -c file
Print the last white space separated field of every line in "file.txt" as a ", " separated list </s> awk '{print $NF}' file.txt | paste -sd, | sed 's/,/, /g'
Find all hidden files starting from the directory given as variable $FOLDER </s> find $FOLDER -name ".*"
Prints last modified file in a current folder with modification time. </s> find . -type f -printf '%TY-%Tm-%Td %TH:%TM: %Tz %p\n'| sort -n | tail -n1
display all the files in current folder which are bigger than 10KB </s> find . -size +10k
Create a symbolic link in the current directory for each .jpg file under "dir" </s> ln -s "$(find dir -name '*.jpg')" .
Find all files/directories under /home/baumerf/public_html/ that were modified less than 60 minutes ago excluding *.log files/directories </s> find /home/baumerf/public_html/ -mmin -60 -not -name \*.log
Find files in and below the current directory whose names begin with "not" and remove one of them </s> find . -name not\* | tail -1 | xargs rm
Resolve any symlinks in working directory, and go to resulting pathname. </s> cd "`pwd -P`"
Find all the files/directories in the entire filesystem that do not belong to user 'wnj' and are not newer than the file/directory 'ttt' by modification time </s> find / \! \( -newer ttt -user wnj \) -print
Set the environment variable "DISPLAY" to the system host name followed by ":0 skype" </s> DISPLAY=`hostname`:0 skype
Find all files owned by user `comp' </s> find / -user comp
Print a tab separated table in "table.txt" with cell borders </s> sed -e 's/\t/_|/g' table.txt |  column -t -s '_' | awk '1;!(NR%1){print "-----------------------------------------------------------------------";}'
Find all files on the system that are larger than 600 MB </s> find / -size +600M -print
delete all the files in the current folder which end with ".bak" or ".backup" and which have not been accessed in the last 30 days </s> find . ( -name '*.bak' -o -name *.backup ) -type f -atime +30 -exec rm '{}' ;
Print file system disk space usage </s> df
Send one ping request to host whose name or IP address is specified by variable "ip", using network interface eth9. </s> ping ${ip} -I eth9 -c 1
Delete the text matched by the regex '<script>if(window.*<\/script>' in all index.html files under current directory </s> find index.html | xargs -rt sed -i 's/<script>if(window.*<\/script>//g'
find all the files which are of size 0 bytes. </s> find . -type f -empty
Print file system disk space usage with a grand total </s> df --total
create directory new_dir </s> mkdir new_dir
Remove trailing white spaces from all files under dir directory </s> find dir -type f -exec sed -i 's/ *$//' '{}' ';'
Takes first text field from file 'file.txt' as a domain name and gets short A record for this one. </s> awk '{print $1}' file.txt | xargs dig +short
Print standard input to standard output line by line, discarding any adjascent duplicate lines. </s> uniq
Decompress and extract 'libxml2-sources-2.7.7.tar.gz' </s> gzip -dc libxml2-sources-2.7.7.tar.gz | tar xvf -
Find all files under current directory and change their permission to 600 </s> find . -type f -exec chmod 600 {} \;
Print the first 24 alphanumeric characters from "/dev/urandom", determining C locale for all categories </s> cat /dev/urandom | LC_ALL=C tr -dc 'a-zA-Z0-9' | fold -w 24 | head -n 1
Find all directories that do not contain "main.cpp" </s> diff <(find . -exec readlink -f {} \; | sed 's/\(.*\)\/.*$/\1/' | sort | uniq) <(find . -name main.cpp  -exec readlink -f {} \; | sed 's/\(.*\)\/.*$/\1/' | sort | uniq) | sed -n 's/< \(.*\)/\1/p'
Copy all ".php" files in "projects/" directory tree to "copy/" preserving directory hierarchy </s> find projects/ -name '*.php' -print | cpio -pdm copy/
Delete all 1US* (case insensitive) files under current directory </s> find . -iname "1US*" -exec rm {} \;
Copy all files in "/var/spool/mail" to "/home/username/mail" preserving the directory hierarchy and modification times </s> find /var/spool/mail -type f | cpio -pvdmB /home/username/mail
find directory which name is Cookbook under /users/al </s> find /users/al -name Cookbook -type d
Show what content owned by root has been modified within the last day </s> find /etc/ -user root -mtime 1
List each subdirectory name composing the current working directory </s> pwd | cut -f 1- -d\/ --output-delimiter=$'\n'
Find all files named "file.ext" in the current directory tree and print the path names of the directories they are in </s> find . -name "file.ext" -execdir pwd ';'
find all the "jpg" file in a folder. </s> find /win/C -iname *JPG
Print the directory name of the physical current working directory </s> dirname `pwd -P`
Find regular files which have 644 permission </s> find . -perm 644 -type f -exec ls -l {} \;
display all text files in the current folder </s> find . -type f -name "*.txt"
Search the first 300 commands in history containing "scp" and ending in "important" </s> history 300 | grep scp | grep important$
Counts non-blank lines (lines with spaces are considered blank) in all *.py files in a current folder. </s> grep -v '^\s*$' *.py | wc
Find all directories under current directory and set their permission to 755 </s> find -type d exec chmod 755 {} +
find all text files in the current directory </s> find . -name "*.txt" -print
Find all 'test' directories in the current directory tree </s> find -type d -a -name test
Print every 4th line from 10 lines of "y" with line numbers </s> yes | cat -n | head -10 | awk 'NR % 4 == 1'
Search the /myfiles directory tree for files that are 5 512 byte blocks in size </s> find /myfiles -size 5
Prints shell option 'globstar' with indication of its status. </s> shopt -p globstar
Save the system host name in variable "HOSTNAME" </s> HOSTNAME="`hostname`"
Find files with 002 permission in entire file system and print them with the string 'has world write permissions' printed at last </s> echo $(find / -type f -perm -002) has world write permissions
Show find's version </s> find --version
Search the system for files whose names begin with letters 'a', 'b', or 'c' </s> find  / -name '[a-c]*'
Format tab separated fields in "FILE" as a table </s> column -t -s $'\t' FILE
List all .c and .h files in the current directory tree that contain "thing" </s> find . -name '*.[ch]' -print0 | xargs -r -0 grep -l thing
Recursively change ownership of "~/.npm" to the current user </s> sudo chown -R `whoami` ~/.npm
Gunzip all files matching "file*.gz" and answer "n" to any prompts </s> yes n | gunzip file*.gz
Find files smaller than 40 blocks skipping directories on other file systems </s> find . -size -40 -xdev -print
Find all regular files under current directory non-recursively that have execute permission set for all (user, group and other) </s> find . -maxdepth 1 -type f -perm -uga=x
find all the directories with the name "some-dir" in the current folder and move them to another folder and do not search in subfolders </s> find ./ -maxdepth 1 -name "some-dir" -type d -print0 | xargs -0r mv -t x/
Print the most repeated line in "list2.txt" that exists in "list1.txt" prefixed by the number of occurrences </s> grep -Ff list1.txt list2.txt | sort | uniq -c | sort -n | tail -n1
search for all the files having spaces in the current folder and save the output to the variable founddata </s> founddata=`find . -name "filename including space" -print0`
Change the owner and group of "uid_demo" to "root" </s> sudo chown root:root uid_demo
Save "$N" number of '.' characters in variable "myvar" </s> myvar=`seq 1 $N | sed 's/.*/./' | tr -d '\n'`
Displays the count of of each unique line read from standard input </s> sort | uniq -c
Create a symbolic link to file "/usr/bin/perl" named with escaped characters "/usr/local/bin/perl\r\n" </s> sudo ln -s /usr/bin/perl /usr/local/bin/perl`echo -e '\r'`
display all files in the current folder along with their last access timestamps </s> find . -printf "%h/%f : dernier accès le %Ac\n"
Find all files that have either a .php or a .js extension </s> find -regextype posix-egrep -regex '.*(php|js)$'
find all files in the current folder which have been modified in the last 24 hours and whose file name is of length 1 </s> find . -name \? -mtime -1
Print amount of space available on the file system containing path to the current working directory in megabytes. </s> df . -B MB | tail -1 | awk {'print $4'} | cut -d'%' -f1
Remove all *.mp3 files in tmp directory but not in it's subdirectories </s> rm `find tmp -maxdepth 1 -name '*.mp3'`
List all the emptry files in thecurrent directory only. </s> find . -maxdepth 1 -empty
Test if a file named 'file' in the current directory is more than 1 hour old </s> find file -chour +1 -exit 0 -o -exit 1
Find files/directories modified within the last day under /etc </s> find /etc -type f -ctime -1
Make a copy of file1 in dir1, dir2, and dir3. </s> echo dir1 dir2 dir3 | xargs -n 1 cp file1
Print the full path of a 'file.txt' file in the current folder. </s> ls "`pwd`/file.txt"
Find all files named 'text.txt' under current directory tree and display their contents </s> find . -name 'text.txt' -print -exec cat {} \;
create a symbolic link with absolute path "/cygdrive/c/Program Files" to file "/cygdrive/c/ProgramFiles" </s> ln -s "/cygdrive/c/Program Files" /cygdrive/c/ProgramFiles
Find all *.epub, *.mobi, *.chm, *.rtf, *.lit and *.djvu files/directories under current directory </s> find ./ -name '*.epub' -o -name '*.mobi' -o -name '*.chm' -o -name '*.rtf' -o -name '*.lit' -o -name '*.djvu'
Finds all users logged in via ssh. </s> w | grep ssh
get all the files that have been modified within the last 30 days </s> find . -mtime -30 -print
search for all "tif" images in the entire file system </s> find / -name '*.tif ' –print
Find all files called "INPUT.txt" in the current directory tree and remove lines starting with # in them, saving backup copies as INPUT.txt.bak </s> find . -type f -name INPUT.txt -print0 | xargs -0 sed -i.bak '/^#/d'
Find writable files in the current directory tree </s> find . -writable
search for all the php files in the folder "/home/mywebsite" which have been changed in the last 30*24 hours </s> find /home/mywebsite -type f -name "*.php" -ctime -30
Set permissions to 2770 for all directories in the current directory tree </s> find . -type d -exec chmod 2770 {} +
create a symbolic link in current directory named "my_db" to file "/media/public/xampp/mysql/data/my_db" </s> ln /media/public/xampp/mysql/data/my_db -s
Print every three lines of "file" as a comma separated line </s> paste -sd',,\n' file
List all empty files under the current directory </s> find . -maxdepth 1 -empty
Extract all gzip-compressed files from tar archives beginning with 'myfiles_split.tgz_*' </s> cat myfiles_split.tgz_* | tar xz
Find all directories under media/ directory and change their permission to 700 </s> find media/ -type d -exec chmod 700 {} \;
find all the files ending with "clj" in the current folder and search for a pattern </s> find . -name '*.clj' -exec grep -r resources {} \;
change group of the file myfile to group friends </s> chown :friends myfile
Find directories that are directly under $workspace_ts directory (no-subdirectories) and were modified less than 30 days ago </s> find $workspace_ts -mindepth 1 -maxdepth 1 -type d -mtime -30
Make directory "alpha_real" </s> mkdir alpha_real
Search the current directory tree for .VER files </s> find . -name "*.VER"
Find all Read Only files </s> find / -perm /u=r
Find all *.txt and *.json files in current directory </s> find . -type f \( -name "*.txt" -o -name "*.json" \)
Recursively print all files and directories in the current directory tree including hidden files </s> tree -a .
List the names of all file.ext files/directories under present working directory </s> find `pwd` -name "file.ext" -printf "%f\n"
Print 'cp' commands that would copy a file xyz.c to all the files with '.c' extension present in the ./C directory and below </s> find ./C -name "*.c" | xargs -n1  echo cp xyz.c
Enables shell option 'compat31'. </s> shopt -s compat31
Print list of file systems currently mounted. </s> df -h |  awk '{print $1}'
find all the files in the current directory which have been modified in the last 24 hours </s> find . -mtime 0
Sets shell options 'extglob' and 'nullglob'. </s> shopt -s nullglob extglob
Recursively finds all files containing text 'OPEN' and prints folder where they are placed. </s> grep -r OPEN * | awk '{split($1, path, ":"); print path[1]}' | xargs -I{} dirname {}
Append the contents of "file.txt" to the current in-memory history list </s> history -r file.txt
Search for 'pattern' in all files with '.cc' extension under current directory tree and show the matched lines with line numbers and filenames </s> find . -name “*.cc” |xargs grep -n “pattern”
Print the number of lines in file.txt. </s> wc -l file.txt | cut -f1 -d" "
Gets IP address of 'en1' network interface. </s> my_ip=$(ifconfig en1 | grep 'inet addr' | awk '{print $2}' | cut -d: -f 2)
Find all files files under the current directory except *.txt </s> find . -maxdepth 1 -type f -not -regex '.*\.txt'
List all files under current directory </s> find . -type f | xargs ls
ssh into default vagrant host without running "vagrant ssh" by passing the configuration parameters vagrant uses for ssh </s> ssh vagrant@127.0.0.1 -p 2222 -o Compression=yes -o DSAAuthentication=yes -o LogLevel=FATAL -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o IdentitiesOnly=yes -i ~/.vagrant.d/less_insecure_private_key -o ForwardAgent=yes
Go to directory specified by variable "somedir", but replacing leading ~ character by actual home directory. </s> cd $(echo $somedir | sed "s#^~#$HOME#")
Convert standard input into a dump of octal bytes without the first 8 bytes of address and count the unique results </s> od | cut -b 8- | xargs -n 1 | sort | uniq | wc -l
find all the html files in the current folder which have been modified exactly 7 days ago </s> find . -mtime 7 -name "*.html" -print
Unzip and expand tar archive "compressFileName" </s> zcat compressFileName | tar xvf -
display the count of number html files in the current folder </s> find . -name "*.html" -print | xargs -l -i wc {}
return every file that does not have bar somewhere in its full pathname </s> find . ! -path '*bar*' -print
Search the /media/shared directory recursively for MP3 and OGG files </s> find /media/shared \( -iname "*.mp3" -o -iname "*.ogg" \)
search for files in the current folder which start with "myfile" ( case insensitive search ) </s> find . -iname 'MyFile*'
display all regular/normal files in the folder /Users/david/Desktop/ </s> find /Users/david/Desktop/-type f
search for the file centos in /usr folder ( case insenstive search ) </s> find /usr -iname centos
Filter the contents of 'file' through sed commands written in 'commandfile', displaying the result. </s> sed -f commandfile file
Find all file.ext files/directories under present working directory and print . for each of them </s> find `pwd` -name "file.ext" -exec echo $(dirname {}) \;
Send one ping request to host with local address in the 192.168.1.x range, with last number specified by variable "COUNTER", and output only lines containing "ms" to standard output. </s> ping -c 1 192.168.1.$COUNTER | grep 'ms'
Create a symbolic link in the current directory to "../config/init" </s> ln -s "../config/init"
Print each logged in user's full name </s> finger | awk 'NR>1{print $2,$3}'
Remove all *.swp files under current directory ensuring white space safety </s> find . -name "*.swp" -print0|xargs -0 rm
Write "foo" to the real path of the current command's standard output </s> echo foo | readlink /proc/self/fd/0
Find every file/directory under the directory /home owned by the user joe </s> find /home -user joe
Finds all files like "mylog*.log" newer than $2 and archives them with bzip2. </s> find . -type f -ctime -$2 -name "mylog*.log" | xargs bzip2
Find all directories in level 1 down the $queue directory </s> echo "$queue" | xargs -I'{}' find {} -mindepth 1 -maxdepth 1 -type d
Clean up all zombie processes by sending SIGTERM signal to their parent process, which requests them to terminate. </s> kill $(ps -A -ostat,ppid | awk '/[zZ]/{print $2}')
Search for files/directories with the case insensitive pattern anaconda* in /var/log </s> find /var/log/ -iname anaconda*
Replace any sequence of spaces in file 'text.txt' with single space and print 4th space separated field </s> cat text.txt | tr -s ' ' | cut -d ' ' -f 4
Send SIGHUP (hangup) signal to all parents of zombie processes. </s> kill -HUP $(ps -A -ostat,ppid | grep -e '[zZ]'| awk '{ print $2 }')
Save a space separated list of process ids of currently running jobs to variable 'bgxjobs' </s> bgxjobs=" $(jobs -pr | tr '\n' ' ')"
Remove junk files modified more than 31 days ago recursively </s> find /path/to/junk/files -type f -mtime +31 -exec rm -f {} \;
Set the shell option 'errexit'  causing bash to exit immediately if one of the commands in a multi-command statement fails. </s> set -e
Identify CMS version/releases accross all your Wordpress websites </s> find /home/*/public_html/ -type f -iwholename "*/wp-includes/version.php" -exec grep -H "\$wp_version =" {} \;
Print each line in "set1" and "set2" that does not exist in the other </s> sort set1 set2 | uniq
find all the files in the current folder with the name "test-a" and move them to the folder test-10 </s> find ~ -type f -name test-a -exec mv {} test-10 \;
search for a word in all the regular files in the current folder. </s> find -type f -print0 | xargs -r0 grep -F 'example'
Find all files whose names begin with 'Makefile' in the /usr/ports directory tree and count how many of them contain 'QTDIR' </s> find /usr/ports/ -name Makefile\* -exec grep -l QTDIR '{}' '+' | wc -l
search for files named "WSFY321.c" in a case-insensitive manner </s> find . -iname "WSFY321.c"
Recursively change the user and group of all files in "/var/lib/jenkins" to "root" </s> chown -R root:root /var/lib/jenkins
Change permissions to 755 for all directories in the current directory tree </s> find . -type d | xargs chmod -v 755
find all normal/regular files in current folder which end with "~" or which begin and end with "#" and and move them to  temp folder </s> find . -maxdepth 1 -type f  -name '*~' -exec mv {} /tmp/ \;  -or  -name '#*#' -exec mv {} /tmp/ \;
Find files named 'core' in or below the directory /tmp and delete them </s> find /tmp -depth -name core -type f -delete
find the type & description of all the regular/normal files in the home folder </s> find /home -type f -print0 | xargs -0 file
Print mount point of the file system containing $path. </s> df -P "$path"  | tail -1 | awk '{ print $NF}'
Print first 11 characters from $line, print a tab, print the md5 sum of the file specified by the 13th and onward characters from $line and print a null character at end without a trailing new line </s> echo -en "${line:0:11}" "\t" $(md5sum "${line:12}") "\0"
dispaly all the empty regular/normal files in the current folder </s> find . -type f -empty
List all files/directories under current directory matching the posix-egrep type regex ".+\.(c|cpp|h)$" in their names </s> find . -regextype posix-egrep -regex ".+\.(c|cpp|h)$" -print0 | xargs -0 -n 1 ls
find all foo.bar files in the entire file system </s> find / -name foo.bar -print
find all html or cgi files in current folder </s> find ./ -type f -iregex ".*\.html$" -or -iregex ".*\.cgi$"
Output all lines in 'file' which contain a tab character. </s> awk -F"\t" 'NF>1' file
display all the files in the usr folder which have been modified after Feburary 1st </s> find /usr -newermt "Feb 1"
Print full path of command "gradle" </s> which gradle
find  js file which name is not  'glob-for-excluded-dir'  under current directory. </s> find . -name '*.js' -\! -name 'glob-for-excluded-dir' -prune
View manual page of find utility </s> man find
For each line whose first field is the same in file1 and file2, output the common first field followed by all other fields in file1 and file2. </s> join -j1 file2 file1
Find all regular files under current directory (no subdirectories) and replace every occurrences of 'toreplace' with 'replace' in those files </s> find . -maxdepth 1 -type f -print0 | xargs -0 sed -i 's/toreplace/replaced/g'
Search for 'some string' in all *.axvw files under current directory and show the matched lines with line numbers </s> find . -name '*.axvw' -print0 | xargs -0 grep -n 'some string'
display all the symbolic links in the current folder </s> find . -type l
Write "foo" to the real path of the current command's standard input </s> echo foo | readlink /proc/self/fd/1
print all files in the current directory and all subdirectories </s> find .
Search the /etc directory tree for symbolic links </s> find /etc -type l -print
Delete empty directories </s> find . -type d -empty -delete
Search for " 840" in history </s> history | grep " 840"
create directory testExpress </s> mkdir testExpress
Move all files that contain "Subject: \[SPAM\]" to "DIR" </s> grep -l 'Subject: \[SPAM\]' | xargs -I '{}' mv '{}' DIR
Print file information of command "studio" </s> which studio | xargs ls -l
Find all files/directories with '.js' extension under current directory tree without descending into  and ignoring './directory' completely </s> find . -not \( -path ./directory -prune \) -name \*.js
create a compressed archive "compressFileName.tar.gz" with verbose output </s> tar -zcvf compressFileName.tar.gz folderToCompress
View line 500 to line 1000 in gzipped file "bigfile.z" </s> zcat bigfile.z | sed -ne '500,1000 p'
Find all directories under /home/me/target_dir_1 </s> find /home/me/target_dir_1 -type d
Print the percentage of packets lost of the 5 packets sent to "$host" </s> ping -c 5 -q $host | grep -oP '\d+(?=% packet loss)'
Find files in the current directory tree which are larger than 5 MB in size </s> find . -size +5000k -type f
display the base name(name without extension) of all the ".flac" files in the current folder </s> find . -name "*.flac" -exec basename \{\} .flac \;
Execute "ls" every 2 seconds </s> watch ls
Mount "ext4" filesystem "/dev/xvdf1" on "/vol" </s> sudo mount /dev/xvdf1 /vol -t ext4
Sets shell option 'extglob'. </s> shopt -s extglob
find all files in the folder /etc which have been modified after /tmp/foo </s> find /etc -newer /tmp/foo
Find all the files which are changed in last 1 hour </s> find / -cmin -60
Recursively search through all files in all directories for any lines containing "pattern" and whose second word is not "Binary". </s> grep -Ri "pattern" * | awk '{if($1 != "Binary") print $0}'
Change permssions of *.cgi files under directories htdocs and cgi-bin to 755 </s> find htdocs cgi-bin -name "*.cgi" -type f -exec chmod 755 {} \;
Print the file content of command "f" </s> cat `which f`
Split "ADDRESSS_FILE" into files containing at most 20 lines and prefix "temp_file_" </s> split -l20 ADDRESSS_FILE temp_file_
Find all files beneath the current directory that end with the extension .java and contain the characters StringBuffer.  Print the name of the file where a match is found. </s> find . -type f -name "*.java" -exec grep -l StringBuffer {} \;
display list of all the hidden directories in the directory "/dir/to/search/" </s> find /dir/to/search/ -type d -iname ".*" -ls
find a.out, *.o and core files under the current directory and sub-directories and delete them. </s> find . \( -name a.out -o -name '*.o' -o -name 'core' \) -exec rm {} \;
Find all files on the system whose names are 'autoload.php' </s> find / -name autoload.php
Print 7 spaces in a row </s> yes ' ' | head -7 | tr -d '\n'
Search the current directory tree for files matching regular expression '.*myfile[0-9][0-9]?' </s> find . -regex '.*myfile[0-9][0-9]?'
Find all regular files under current directory tree that were accessed $FTIME days ago </s> find . -type f -atime $FTIME
Find all broken symlinks under current directory </s> find . -xtype l
find all directories in the current directory </s> find . -type d -name "*"
Find all files under /path/to/Dir and set their permission to 644 </s> sudo find /path/to/Dir -type f -print0 | xargs -0 sudo chmod 644
find all the files in the current directory that have the word "bash" in their name </s> find . -name "*bash*"
Search for all files in the current directory recursively whose names end with "Linkin Park" </s> find . -name "*Linkin Park"
Search the current directory tree for *.wav files that have "export" in their pathnames </s> find -type f -name "*.wav" | grep export
find all the header files in /usr/include which have been modified in the last 400 days </s> find /usr/include -type f -mtime -400 -name "*.h"
Search the file hierarchy for files larger than 100000 KB without searching any mounted removable media </s> find / -path /media -prune -o -size +200000 -print
Search for all directories named foo, FOO, or any other combination of uppercase and lowercase characters beneath the current directory. </s> find . -iname foo -type d
find all the files which have the write permission to the group and remove the write permission. </s> find . -perm -20 -exec chmod g-w {} ;
Prints week day of a 31 day in a current month. </s> cal | awk -v date=31 -v FIELDWIDTHS="3 3 3 3 3 3 3 3" 'NR==2 {split($0,a)} {for (i=1;i<=NF;i++) if ($i==date) print a[i]}'
Copy all regular files whose names end in "~" from the /path directory tree to ~/backups/ </s> find /path -type f -name '*~' -print0 | xargs -0 -I % cp -a % ~/backups
Find all SGID set files </s> find / -perm /g=s
find all files in the current folder that are not modified in the last 10 minutes </s> find . -mmin +10 -print
Search the files residing in the current directory tree whose names contain "bills" for "put" </s> find . -name "*bills*" -print0 | xargs -0 grep put
Search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (somefile.tar) of all the files found </s> tar -cvf file.tar `find var/log/ -iname "anaconda.*"`
Find all files/directores under '/usr/local' directory tree that contain the word 'blast' in their names </s> find /usr/local -name "*blast*"
Find all *.mp4 files under /foo/bar and move them to /some/path </s> find /foo/bar -name '*.mp4' -print0 | xargs -I{} -0 mv -t /some/path {}
Find all .tmp files under and below the /tmp/ directory and remove them </s> find /tmp -name "*.tmp"| xargs rm
Display the current directory tree except files or directories starting with "3rd" </s> tree -I '3rd*'
List all files under current directory with white space safety in their paths </s> find . -type f -print0 | xargs -0 ls
Find all 100MB files in file system and delete them using rm command </s> find / -size +100M -exec rm -rf {} \;
Find all files/directories with '.js' extension under current directory tree excluding paths that contain the directory './directory' </s> find -name "*.js" -not -path "./directory/*"
find all the normal/regular files in the current folder which have been modified in the last day and display a long listing of them </s> find . -type f -mtime -1 -daystart -exec ls -l {} \;
change permissions of files older than 30 days </s> find /path/to/directory -type f -mtime +30 -exec chmod 644 {} +
Search for all files in the /home directory tree that have the same inode number </s> find /home -xdev -inum 2655341
Print content of '1' file </s> $ cat 1
Search the current directory tree for regular files that can be read by noone </s> find -type f ! -perm -444
search for text files in the folder /home/you which have been modified in the last 60*24 hours(case insensitive search) and display their contents </s> find /home/you -iname "*.txt" -mtime -60 -exec cat {} \;
Print the basename from a colon separated path 'a:b:c:d:e' </s> basename $(echo "a:b:c:d:e" | tr ':' '/')
Find all SUID set files in the file system </s> find / -perm /u=s
prints the last occurrence of text between two tags </s> tac file | sed -n '0,/<tag>\(.*\)<\/tag>/s//\1/p'
Print extended file information for regular files found under the home directory whose names start with my </s> find . -name 'my*' -type f -ls
display all the files in the folder "/Users/Me/Desktop" which belong to the user "popo" and which have the permission 777 </s> find /Users/Me/Desktop -user popo -perm 777
Find regular files under / that contain "stringtofind" and clear out their contents </s> find / -maxdepth 1 -xdev -type f -exec grep -i "stringtofind" -l {} \; -exec sed -i '/./d' {} \;
Find files named 'core' in or below the directory /tmp and delete them </s> find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f
find all the mp3 files in the home folder which have been modified today </s> find ~ -type f -mtime 0 -iname '*.mp3'
Set the bash prompt to "username@hostname" </s> PS1="`whoami`@`hostname | sed 's/\..*//'`"
Recursively find the latest modified file in the current directory and print the modification time and filename </s> find . -type f -printf '%TY-%Tm-%Td %TH:%TM: %Tz %p\n'| sort -n | tail -n1
Find files under current directory without descending into other file systems and append a null character at the end of each paths </s> find -x . -type f -print0
Create an empty file with a carriage return character in its name. </s> touch $'Icon\r'
Find all files under current directory matching the pattern '[error,access,error_log,access_log,mod_jk.log]*.[0-9]*' in their names </s> find -name '[error,access,error_log,access_log,mod_jk.log]*.[0-9]*' -type f
Execute "cat /tmp/iostat.running" every 10 seconds </s> watch -n10 cat /tmp/iostat.running
Save actual working directory in variable "target_PWD" </s> target_PWD=$(readlink -f .)
List all IP addresses assigned to current hostname, pausing for user interaction after each page. </s> more /etc/hosts | grep `hostname` | awk '{print $1}'
Print the names of the directories from the paths expanded by the glob pattern /path/to/directory/* </s> find /path/to/directory/* -maxdepth 0 -type d -printf '%f\n'
List regular files in current directory with read, write and execute permission for all users and also show the permissions </s> find . -type f  -perm 777 -exec ls -l {} \;
Change permissions of "/usr/bin/wget" to 777 </s> chmod 777 /usr/bin/wget
Report root file system disk usage human-readable. </s> df -h /
Remove files in the current directory tree modified more than 31 days ago recursively </s> find . -type f -mtime +31 -print0 | xargs -0 -r rm -f
Removes all empty folders under current path, aged between 'first' and 'last' timestamps. </s> find . -newer first -not -newer last -type d -print0 |  xargs -0 rmdir
Cut off three last symbols from string '1234567890  *' </s> echo '1234567890  *' | rev | cut -c 4- | rev
List non-hidden regular files in the current directory tree that were last modified more than 500 days ago </s> find . -type f -not -name '.*' -mtime +500 -exec ls {} \;
Find all files/directories under current directory that were accessed less than 1 day ago </s> find . -atime -1 -print
Gets MAC address of en0 network interface. </s> ifconfig en0 | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'
find all c, cpp files in current folder </s> find -regex '.*\.\(c\|cpp\)'
Find movies over a gigabyte in size </s> find ~/Movies/ -size +1024M
display all scala files in the directory "src/main" </s> find . -path "*src/main*" -type f -iname "*\.scala*"
Prints calendar of April of 2012, and redirects output to 't' file and 'more' pager tool. </s> cal April 2012 | tee t | more
Create a symbolic link named "~/bin/subl" to "/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl" </s> ln -s "/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl" ~/bin/subl
Finds recursively all folders named 'a' within current folder and removes only ones without files and another folders within. </s> find -type d -name a -exec rmdir {} \;
Remove all .sh files in the current directory tree whose names begin with "t" </s> find . -name "t*.sh" -exec rm -vf '{}' \;
search for the directory "config" in the current folder and change directory to the first instance of the search </s> cd $(find . -name config -type d | sed 1q)
Find all directories under current directory tree that match the case insensitive regex '^\./course\([0-9]\.\)*[0-9]$' in their paths </s> find . -type d -iregex '^\./course\([0-9]\.\)*[0-9]$'
search in current directory downwards all files whose size is less then 10 bytes </s> find .  -size -10c -print
search for a word in all the files with the extension "ch" in the current folder </s> find -name '*.[ch]' | xargs grep -E 'expr'
Find all files/directories with '.err' extension under '/home/username' directory tree </s> find /home/username/ -name "*.err"
Counts lines in file $file ignoring '//' commented lines, lines with spaces only and empty lines. </s> cat $file | sed '/\/\//d' | sed '/^\s*$/d' | wc -l
Search directory tree $DIR for *.txt files </s> find "${DIR}" -name "*.txt"
Decompress and sort "$part0" and "$part1" of files in different processes </s> sort -m <(zcat $part0 | sort) <(zcat $part1 | sort)
Create compressed archive of all the files in the current directory tree that have been modified in the last 7 days </s> find . -type f -mtime -7 -print -exec cat {} \; | tar cf - | gzip -9
Merge file1 and file2 by outputting all lines where the first comma-separated field of both files matches, followed by extra fields in file1 and those in file2 </s> join -t, <(sort file1) <(sort file2)
find all regular files in current directory and replace the word searc to replace in them. </s> find . -type f -exec sed -i 's/searc/replace/g' {} \;
Gets domain name from dig reverse lookup. </s> dig -x 8.8.8.8 | awk '/PTR[[:space:]]/{print $NF}'
Search the current directory recursively for MOV files </s> find . -iname *.mov
File 'mydatafile' has a number on each line, display the sum of these numbers rounded to lowest integer. </s> awk '{s+=$1} END {printf "%.0f", s}' mydatafile
Prefix all files and folders in the current directory with "PRE_" </s> find * -maxdepth 0 ! -path . -exec mv {} PRE_{} \;
Show all files in user's home directory that have read, write and execute permissions set for user, group and others. </s> find ~ -perm 777
Print the contents of "my_script.py" </s> cat my_script.py
find  file which case-insensitive name is too in currect directory </s> find . -iname foo
copy all the regular/normal files from temp folder which have been modified in the last 30*24 hours to /tmp/backup </s> find /tmp -type f -mtime -30 -exec cp {} /tmp/backup \;
search for all files ending with ".mkv" in current folder </s> find /volume1/uploads -name "*.mkv"
Remove the last two alphanumeric file extensions from "mpc-1.0.1.tar.gz" </s> echo "mpc-1.0.1.tar.gz" | sed -r 's/\.[[:alnum:]]+\.[[:alnum:]]+$//'
Find all filenames ending with .c in the /usr directory tree </s> find /usr -name "*.c"
display a long listing of all the regular/normal files in the current folder </s> find . -type f -ls
Prints total number of lines of all *.php files in a current folder and subfolders. </s> cat `find . -name "*.php"` | wc -l
Kill the processes of user `myuser' that have been working more than 7 days </s> find /proc -user myuser -maxdepth 1 -type d -mtime +7 -exec basename {} \; | xargs kill -9
Find all directories under /home/username/public_html/sites/default/files and set their permission to 770 </s> find /home/username/public_html/sites/default/files -type d -exec chmod 770 {} +
Rename recursively all files in the current directory tree that are called "article.xml" to "001_article.xml" </s> find . -name "article.xml" -exec rename 's/article/001_article/;' '{}' \;
Remount "/dev/stl12" on "/system" as read only </s> mount -o ro,remount /dev/stl12 /system
Change permissions of all files ending ".php" under the current directory to 755 and print a count of modified files </s> find . -name "*.php" -exec chmod 755 {} + -printf '.' | wc -c
Add a line number to every line in "infile" </s> nl -ba infile
Find every JavaScript file in the wordpress directory </s> find wordpress -maxdepth 1 -name '*js'
Finds strings with 'TEXT' from *.log files and prints all but first field from any space-delimited string. </s> grep -e TEXT *.log | cut -d' ' --complement -s -f1
Print the current directory tree with file permissions </s> tree -p
Find files in the current directory tree whose names match regular expression "^.*~$\|^.*#$" </s> find -regex "^.*~$\|^.*#$"
Generate the Spanish alphabet and number each character </s> echo -e {{a..n},ñ,{o..z}}"\n" | nl
Prepend date to ping output to google.com </s> ping google.com | xargs -L 1 -I '{}' date '+%+: {}'
Split "file.txt" into files of at most 1 MiB in size with a numeric suffix and prefix "file" </s> split -b 1M -d  file.txt file
List all files in /home/bozo/projects directory tree that were modified within the last day. </s> find /home/bozo/projects -mtime -1
Find all files recursively which end in ".php" </s> find . -name "*.php" -print
display all directories in current folder and do not search in sub directories </s> find . -maxdepth 1 -mindepth 1 -type d
Search for 'string_to_find' in all files under current directory </s> find -type f | sed 's/./\\&/g' | xargs grep string_to_find
Append all *.mp3 files modified within the last 180 days to tar archive `music.tar' </s> find . -name -type f '*.mp3' -mtime -180 -print0 | xargs -0 tar rvf music.tar
Print pathname of a file that is connected to the standard output of the command "yes" </s> echo <(yes)
Take first text field from file 'file.txt' as a domain name and get short A record for this one. </s> cut -d' ' -f1 file.txt | xargs dig +short
Find all *.* files not within .git directory and run $SED_CMD -i "s/$1/$2/g" on each of them </s> find . -type f -name "*.*" -not -path "*/.git/*" -print0 | xargs -0 $SED_CMD -i "s/$1/$2/g"
display all files in the entire file system excluding the directories /proc,/sys,/dev and those files which are writable and which are not symbolic links and which are not sockets and which do not have the sticky bit set </s> find / -noleaf -wholename '/proc' -prune -o -wholename '/sys' -prune -o -wholename '/dev' -prune -o -perm -2 ! -type l  ! -type s ! \( -type d -perm -1000 \) -print
Removes all files but 5 newest ones from current folder. </s> ls -tp | grep -v '/$' | tail -n +6 | tr '\n' '\0' | xargs -0 rm --
find all the regular/normal files in the current folder and rename them to html files </s> find main-directory -type f -exec mv -v '{}' '{}'.html \;
Find all files called wp-config.php in the /var/www directory and below </s> find /var/www/ -name wp-config.php
Find files in the current directory tree that match pattern "*sub*" </s> find ./ -name "*sub*"
Removes all top-level empty folders within the current folder. </s> ls | xargs rmdir
Get the directory with least access time under current directory </s> find . -type d -printf "%A@ %p\n" | sort -n | tail -n 1 | cut -d " " -f 2-
Recursively change the group ownership to "laravel" in "./storage" </s> sudo chown -R :laravel ./storage
find all the text files in the temp folder and search for the word hello in all these files and display the matched files </s> find /tmp -type f -name ‘*.txt*’ | sed -e ‘s/.*/\”&\”/’ |xargs -n 1 grep -l hello|sed -e ‘s/.*/\”&\”/’
Search directory /path/to/check/ for regular files </s> find /path/to/check/* -maxdepth 0 -type f
Print numbers from 1 to 30 with 0 padding to a width of 2 </s> seq -f "%02g" 30
Find all files under current directory that were modified more than 7 days ago and delete them </s> find . -type f -mtime +7 -print0 | xargs    -0 rm
find all empty files </s> find / -empty
Saves location of file $1 in 'dir' variable. </s> dir=$(dirname -- "$1")
delete all the log files which have not been modified in the last 5 days after user confirmation </s> find . — name "*.LOG" — mtime +5 -ok rm {} \;
Calculate md5 checksum of '/etc/localtime' and save the first space separated part in variable 'checksum' </s> checksum=`md5sum /etc/localtime | cut -d' ' -f1`
display a long listing of all the files in the home folder which are bigger than 200MB </s> find /home -size +200M -exec ls -sh {} \;
print the names of all of the unstripped binaries in the /usr/local directory tree. Builtin tests avoid running file on files that are not regular files or are not executable </s> find /usr/local -type f -perm /a=x | xargs file |  grep 'not stripped' | cut -d: -f1
find all the files which end with ".deb" and display their base name (strip the extension) </s> find . -name '*.deb' -exec basename {} \;
display all files in the current folder with the name test excluding those that are present in the sub folders of the test folder </s> find . -name test -prune
Prints long listing of the current directory and top-level directories within, sorted from oldest to newest, with appended indicators. </s> $ ls -Fltr *
Find all .mp3 files starting from the current directory and delete them </s> find . -type f -iname *.mp3 -delete
Print numbers from 1 to 5 without separating spaces </s> seq 5 | awk '{printf "%s", $0} END {print ""}'
find the file with the name "esxcfg-firewall" in the current folder </s> find -print | grep esxcfg-firewall
Find all files that belong to group developer </s> find /home -group developer
Counts all files in a current folder and subfolders. </s> find `pwd` -type f -exec ls -l {} \; | wc -l
Print file type of the executable file of command "file" </s> which file | file -f -
Print a list of all duplicate filenames in the current directory tree if there is no white space in filenames </s> find . |sed 's,\(.*\)/\(.*\)$,\1/\2\t\1/\L\2,'|sort|uniq -D -f 1|cut -f 1
change owner of the file file.sh to user root </s> $sudo chown root file.sh
Ping all hosts in file "ips" twice </s> cat ips | xargs -n1 ping -c 2
Search the current directory recursively for regular files last modified more than 2 days ago </s> find . type -f -mtime +2
find all the error, access, ssl_engine and rewrite logs which are bigger than 300MB and are less then 5GB in the folder /opt </s> find /opt \( -name error_log -o -name 'access_log' -o -name 'ssl_engine_log' -o -name 'rewrite_log' -o  -name 'catalina.out' \) -size +300000k -a -size -5000000k
kill a number of background jobs </s> jobs -p | tail -n [number of jobs] | xargs kill
Print mount point of the file system containing $path. </s> df "$path" | tail -1 | awk '{ print $6 }'
search for a word in all the files in the current directory and display the list of matched files. </s> find . -type f -exec grep -l 'needle' {} \;
Gets list of IP addresses of all network interfaces. </s> ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'
Search the current directory tree for all files except SVN ones </s> find . | grep -v \.svn
Find all directories under and below /root that match pattern "*linux*", case insensitive </s> find  /root -type d -iname "*linux*"
exclude vendor and app/cache dir, and search name which suffixed with php </s> find . -name *.php -or -path "./vendor" -prune -or -path "./app/cache" -prune
Print a count of each unique line from standard input sorted from least frequent to most frequent </s> sort | uniq -c | sort -n
find all js files under the build direcotry except build/external directory. </s> find build -not \( -path build/external -prune \) -name \*.js
Change the ownership of all files in the current directory tree to myuser:a-common-group-name </s> find . -exec chown myuser:a-common-group-name {} +
search for all the files in the current directory which belong to the user "xuser1" and change the owner ship of them to "user2" </s> find . -user xuser1 -exec chown -R user2 {} \;
Find all files/directories with 644 permission in entire file system </s> find / -perm 644
Find recursively regular files in the current directory tree </s> find -type f -print0
Prints newline, word, and byte count for each *.py in a current folder. </s> wc *.py
split all files in directory "posns " into pieces per 10000 lines </s> find posns -type f -exec split -l 10000 {} \;
find all files that names are dir-name-here </s> find / -name "dir-name-here"
Make directory "/etc/cron.minute" </s> mkdir /etc/cron.minute
Search all *.txt files under ~/documents for the word "DOGS" </s> find ~/documents -type f -name '*.txt' -exec grep -s DOGS {} \; -print
Find *.java files in the current directory with GNU find and replace foo with bar in those files </s> find . -name "*.java" -exec sed -i s/foo/bar/g \;
Change permissions to 0755 for all directories in the /path directory tree </s> find /path -type d -exec chmod 0755 "{}" \;
Prints top-ten biggest top-level folders within a 'var' folder. </s> sudo du -hDaxd1 /var | sort -h | tail -n10
Search the .VER files from the current directory tree for string "Test_Version=' </s> find . -name "*.VER" -exec grep 'Test_Version=' '{}' ';' -print;
Find *.c files under $HOME and search for the string 'sprintf' in those files </s> find $HOME -name '*.c' -print | xargs    grep -l sprintf
Print the first 32 hexadecimal characters from "/dev/urandom", determining C locale for character handling functions </s> cat /dev/urandom | env LC_CTYPE=C tr -cd 'a-f0-9' | head -c 32
display all the java, xml and action scripts (.as) files in a directory </s> find dir1 -type f -a \( -name "*.java" -o -name "*.as" -o -name "*.xml" \)
Remove trailing white spaces from all files under current directory ignoring .git and .svn directories </s> find . -not \( -name .svn -prune -o -name .git -prune \) -type f -print0 | xargs -0 sed -i '' -E "s/[[:space:]]*$//"
Add executable permission to "rr.sh" </s> chmod +x rr.sh
Write "deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen" to standard output and append to "/etc/apt/sources.list.d/10gen.list" as root </s> sudo echo "deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen" | sudo tee -a /etc/apt/sources.list.d/10gen.list
display all the empty files in the entire file system </s> find / -size 0 -print
Find all regular files in the current directory tree that have been modified within the last 10 minutes </s> find . –type f -mmin -10
Locate all *.csv files under the current directory tree </s> find . -name "*.csv"
Find all the regular files under current directory tree that have not been modified in the last 31 days and delete them </s> find . -type f -mtime +31 -print0 | xargs -0 -r rm -f
Find all files/directories under /myfiles that were modified 2 days ago </s> find /myfiles -mtime 2
Print NS record for domain 'domain.' from 'some.other.ip.address' nameserver </s> dig @some.other.ip.address domain. ns
Find all files under /mountpoint and below which have hard links </s> find /mountpoint -type f -links +1
Print content of all files found regarding seach options '[whatever]' </s> find [whatever] -print0 | xargs -0 cat
Rename "old" to "tmp" </s> mv old tmp
Find all directories under /var/www directory and set their permission to 755 </s> sudo find /var/www -type d -print0 | xargs -0 chmod 755
List all of the subdirectories in the current directory with no trailing slash. </s> ls -d */ | cut -f1 -d'/'
List all your files including everything in sub-directories </s> find ~
Search the current directory tree for all files except SVN ones </s> find .  ! -regex ".*[/]\.svn[/]?.*"
Print file system disk space usage of the current directory's file system </s> df .
Output all lines in BigFile.csv whose secondn comma-separated second field matches first field of a line in LittleFile.csv. </s> join -1 2 -2 1 -t, BigFile.csv LittleFile.csv
find all text files in current folder and trim the extra spaces in all lines in these files </s> find . -type f -name '*.txt' -exec sed --in-place 's/[[:space:]]\+$//' {} \+
Recursively finds and compresses all files in a current folder with 4 parallel processes. </s> find . -type f -print0 | xargs -0 -n1 -P4 bzip2
Find files changed in the last 1 day </s> find . -mtime -1 -type f
Move "file1", "file2", "..." to "target" directory </s> mv -t target file1 file2 ...
Find all regular files named 'Waldo' under 'Books' directory tree that is located in user's home directory </s> find ~/Books -type f -name Waldo
recursively change user of the direct /home/test/ and all files into it to user test </s> sudo chown -R test /home/test
find all file name in curent directory ,  -exec will file all file output  awk used here for print only file name . </s> find .  -type f  -exec ls -lrt {} \; |awk -F' ' '{print $9}'
Find all *.mp3 files under current directory </s> find . -name *.mp3
Locate all files "needle.txt" </s> find . -name "needle.txt"
Modify and rewrite 'file' replacing all instances of "foo" with "bar" </s> sed -i 's/foo/bar/g' file
List all .svn files/directories under current directory </s> find . -name .svn -exec ls {} \;
search in the current folder for the file with the name "test" </s> find . -name test
Report file systems inodes usage. </s> df -i
Recursively change the owner and group of "subdir3" to "user3" </s> chown user3:user3 -R subdir3
Delete all files/directories named 'sample' (case insensitive) under '/home/user/Series/' directory tree as super user </s> sudo find /home/user/Series/ -iname sample -print0 | sudo xargs -0 rm -r
Find all .sh files in or below the current directory and move them to folder ~/back.scripts </s> find . -name "*.sh" -print0 | xargs -0 -I file mv file ~/back.scripts
Recursively change owner and group to "$JBOSS_AS_USER" of "$JBOSS_AS_DIR" </s> chown -R $JBOSS_AS_USER:$JBOSS_AS_USER $JBOSS_AS_DIR
Find all PHP files under current directory that contain only one non-blank line </s> find . -type f -name '*.php' -exec grep -Hcm2 '[^[:space:]]' {} + | sed -n '/:1$/{s///;p}'
Remove all text files in the home directory with confirmation </s> find $HOME/. -name *.txt -ok rm {} \;
change the ownership of all the files in the file system from edwarda to earnestc </s> find / -user edwarda -print | xargs chown earnestc
Find files named core in or below the directory /tmp and delete them. Note that this will work incorrectly if there are any filenames containing newlines, single or double quotes, or spaces. </s> find /tmp -name core -type f -print | xargs /bin/rm -f
create a backup of all the files which have been modified in the last 48 hours </s> find source/directory -ctime -2 | cpio -pvdm /my/dest/directory
Delete all files/directories named 'file' under current directory tree </s> find -name file -delete
Find all files/directories in the paths expanded by the glob pattern '.*' </s> find .*
Find all files under ${searchpath} that match the regex ${string1}.*${string2}.*${string3}  in their contents where ${string1} etc.. will be expanded </s> find "${searchpath}" -type f -print0 | xargs -0 grep -l -E "${string1}".*"${string2}".*"${string3}"
Save the current working directory to variable "CURRENT" </s> CURRENT=`pwd`
search for soft links in current folder and display those links which are not pointed to files in current folder </s> find . -type l -exec readlink -f '{}' \; | grep -v "^`readlink -f ${PWD}`"
display all the files in the folder /mp3-collection which are bigger than 10MB or which start with the name "Metallica" </s> find /mp3-collection -name 'Metallica*' -or -size +10000k
Change permissions for all PHP files under the current directory tree to 755 and print the number of files changed </s> find . -name "*.php" -exec chmod 755 {} \; -exec /bin/echo {} \; | wc -l
Go to directory /cygdrive/c/Program Files (x86)/$dollarsign using single quotes to escape special characters, including dollar signs </s> cd '/cygdrive/c/Program Files (x86)/$dollarsign'
Store info about all mounted file systems, printing all sizes in powers of 1000 </s> a=$( df -H )
Find all *.* directories under /home/feeds/data directory </s> find /home/feeds/data -type d \( -name 'def/incoming' -o -name '456/incoming' -o -name arkona \) -prune -o -name '*.*' -print
List all *.txt files/directories under current directory </s> find . -name '*.txt' -exec echo "{}" \;
search for all the files in the current directory which have size greater than 10KB (approx) and less than 32KB(approx). </s> find . -size +10000c -size -32000c -print
find all the text files in the folder /home/calvin and do not search beyond 2 levels </s> find /home/calvin/ -maxdepth 2  -name “*.txt”
Find all directories under current directory and set read-write-execute permission for owner, read-execute permission for group and no permission for other for those directories </s> find . -type d -exec chmod u=rwx,g=rx,o= '{}' \;
Make directory "/tmp/new" </s> mkdir /tmp/new
find all the files that have been changed today </s> find . -ctime 0 -type f
Find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree </s> find /var/log -group adm -name "*.log"
Find all files/directories named orm.properties under current directory </s> find . -name "orm.properties"
Change owner to "$1" and group to "httpd" of ".htaccess" </s> chown $1:httpd .htaccess
Replace all non-punctuation characters with newlines from standard input </s> tr -sc '[:punct:]' '\n'
List all .jpg files in the home directory tree </s> find . -name "*.jpg" -exec ls {} \;
Search the current directory tree for files whose names end in "rb" or "js" </s> find . -name "*js" -o -name "*rb"
find all the directories in the current folder which have been modified in 24 hours and move them to the folder  /path/to/target-dir </s> find . -depth -type d -mtime 0 -exec mv -t /path/to/target-dir {} +
Find all files/directories owned by the user 'bob' under '/home' directory tree </s> find /home -user bob
Find files that don’t have 644 permissions </s> find / -type f ! -perm 644
Decompress "path/to/test/file.gz" to standard output and save all lines matching "my regex" to files with a 1000000 line limit </s> gzip -dc path/to/test/file.gz | grep -P --regexp='my regex' | split -l1000000
Find directories that are directly under $workspace_ts directory (no-subdirectories) and were modified more than 30 days ago </s> find $workspace_ts -mindepth 1 -maxdepth 1 -type d -mtime +30 -print
Create a symbolic link named the basename of "$file" to "$file" </s> ln -s $file `basename $file`
Open "charm" executable file in vim </s> sudo vim `which charm`
Find regular files in the current directory that are writable by their owner </s> find -maxdepth 1 -type f -perm /200
Print the empty files/directories among empty1, empty2 and not_empty </s> find empty1 empty2 not_empty -prune -empty
Count the number of times each person is logged in on the system </s> who | awk '{print $1}' | sort | uniq -c | sort -n
Move all *.php~ (case insensitive) files under current directory to /mydir </s> find . -iname "*.php~" -exec mv {} /mydir \;
Save the directory of the full path to the current script in variable "dir" </s> dir=$(dirname $(readlink /proc/$$/fd/255))
Print all file/directory names without white space safety under the /proc directory </s> find /proc | xargs
find all the files in home folder which have been modified in the last 24 hours </s> find $HOME -mtime -1
Displays information about all network interfaces in system, including inactive ones. </s> ifconfig -a
Search the regular files of the current directory tree for string "whatever" </s> find . -type f | xargs grep whatever
Split "t.txt" into files with at most 30000000 lines each and use a prefix "t" and numeric suffixes of length 2 </s> split --lines=30000000 --numeric-suffixes --suffix-length=2 t.txt t
display top 11 files along with the last access date for all the files in the file system </s> find / -type f -printf "\n%AD %AT %p" | head -n 11
Save the absolute path of the current script to variable "SELF" </s> SELF=`readlink /proc/$$/fd/255`
display all the regular/normal files in current folder </s> find . -type f -print0
Print the drive and mount point of the last mounted drive </s> mount | tail -1 | sed 's/^.* on \(.*\) ([^)]*)$/\1/'
Compute the mean average of the word count of *.txt files in the home directory </s> find ~/ -name '*.txt' -print0 | xargs -0 wc -w | awk 'END { print $1/(NR-1) }'
Find all files/directories under current directory excluding the paths that match the POSIX extended regex ".*def/incoming.*|.*456/incoming.*" </s> find . -regex-type posix-extended -regex ".*def/incoming.*|.*456/incoming.*" -prune -o -print
Find all files in the home directory with open permissions </s> find ~ -perm 777
Find all files/directories  under  /eserver6 directory and follow symlinks if needed </s> find /eserver6 -L
List all files in maximum 2 levels down the current directory </s> find . -maxdepth 2  -type f -exec ls -l {} \;
display all normal / regular files in current folder in reverse order </s> find . -type f | tac
Find files with size more than 200557600B and which are more than 2 days old under  ${userdir}/${i}/incoming directory </s> find ${userdir}/${i}/incoming -mtime +2 -type f -size +200557600c -ls
Find files in the current directory tree whose names are of the form "cxx_data.txt" where xx is a number from 40 to 70 </s> find . -regextype posix-egrep -regex "./c(([4-6][0-9])|70)_data.txt"
Split "file.txt" excluding the first line into files of at most 4 lines each and with a prefix "split_" </s> tail -n +2 file.txt | split -l 4 - split_
find not case sensitive all directories that names are 'apt' </s> find  / -type d -iname "apt"
Print each line in "file1" and file2" separated by a space </s> paste -d'¤' file1 file2 | sed 's,¤, ,g'
Find recursively the files named "file" in the current directory ignoring all .git directories </s> find . -name .git  -prune -o -name file  -print
Find all .java files whose name contains "Message" </s> find . -print | grep '.*Message.*\.java'
start 2 sleep processes in the background </s> sleep 100 | sleep 200 &
Run "./configure" with a new environment variable CC set to the full path of the command 'gcc' </s> CC=$(which gcc) ./configure
Print 'Since -printf is an action the implicit -print is not applied\n' for every file named 'file' found under current directory tree </s> find -name file -printf 'Since -printf is an action the implicit -print is not applied\n'
Change to folder where the oracle binary is. </s> cd $(which oracle | xargs dirname)
copy all files which do not have execute permission to another folder </s> cp `find -perm -111 -type f` /usr/local/bin
Numerically sort each line in file "bb" and output the result to console from greatest value to least value </s> sort -nr bb
Remount "/dev/block/mtdblock3" on "/system" with read only permission </s> mount -o remount,ro -t yaffs2 /dev/block/mtdblock3 /system
Save the current working directory with resolved symbolic links to variable "real1" </s> real1=$(pwd -P)
List all existing environment variables in the current shell. </s> env | awk -F= '/[a-zA-Z_][a-zA-Z_0-9]*=/ { if (!system("[ -n \"${" $1 "+y}\" ]")) print $1 }' | sort | uniq
Print the last file extension from standard input </s> sed 's/^/./' | rev | cut -d. -f1  | rev
Display only first and second dot-separated numbers of kernel version, ie. 4.4 </s> uname -r | sed 's/\([0-9]\+\.[0-9]\+\)\..*/\1/'
Rename all .html files to .txt </s> rename 's/\.html$/\.txt/' *.html
Print "new.txt" with line numbers prepended and lines 3 and 4 deleted </s> cat new.txt  |  nl |sed  "3d;4d"
find all the png files in the current folder which are present in the pattern list search .txt </s> find . -name '*.png' | grep -f search.txt
Display "/tmp/file" as a table of width 30 with columns filled before rows </s> column -x -c 30 /tmp/file
Split the contents of all ".txt" excluding the first 1000 lines into files of at most 1000 lines each </s> cat *.txt | tail -n +1001 | split --lines=1000
find all the files ending with "clj" in the current folder and search for a pattern </s> find . -name *.clj | xargs grep -r resources
force remove all the regular/normal files which begin with sess in the temp folder </s> find /tmp -type f -name sess* -exec rm -f {} \;
Recursively removes all empty folders under current path, printing info message on each operation, and suppressing error messages if folder is not empty. </s> find -type d -empty -exec rmdir -vp --ignore-fail-on-non-empty {} +
display list of all the hidden regular/normal files in the directory "/dir/to/search/" </s> find /dir/to/search/ -type f -iname ".*" -ls
find all hidden files in the current folder which have been modified after profile file </s> find . -type f -name ".*" -newer .cshrc -print
Delete all regular files that reside in directory $OUTPUTDIR and below, and were last modified more than 7 days ago </s> find $OUTPUTDIR -type f -mtime +7 -delete
Search the current working directory tree for files whose names start with "fileA_" or "fileB_" </s> find . -name 'fileA_*' -o -name 'fileB_*'
search for "specified string" in all the php files in the current folder </s> find . -name “*.[php|PHP]” -print | xargs grep -HnT “specified string”
list all regular files which path is not dir1 or dir2 </s> find ! -path "dir1" ! -path "dir2" -type f
Search for all files with same inode NUM </s> find . -inum NUM
Search the *.cc files in the current directory tree for string "xxx" </s> find . -name "*.cc" | xargs grep "xxx"
recursively finds all files newer than a date </s> find . -type f -newermt "$(date '+%Y-%m-%d %H:%M:%S' -d @1494500000)"
Find all files named `file1' starting from / </s> find / -name file1
Recursively finds all files in root folder and prints all strings with 'text-to-find-here' from that files, preceding matched string with filename. </s> find ~/ -type f -exec grep -H 'text-to-find-here' {} \;
Show the subdirectories of the current directory </s> find . -maxdepth 1 -type d -print | xargs -I {} echo Directory: {}
List all files in the current directory tree that were last modified on the 3rd of March, 2010 or later </s> find -newermt "mar 03, 2010" -ls
Open a ssh connection to "user@host" with a control socket "/tmp/%r@%h:%p" </s> ssh user@host -S /tmp/%r@%h:%p
find all  files that match "[a-f0-9\-]{36}\.jpg" of grep </s> find . * | grep -P "[a-f0-9\-]{36}\.jpg"
Calculate the md5 sum of the list of files in the current directory </s> find . -maxdepth 1 -type f | md5sum
Search for $SEARCH in all regular files under $DIR directory tree and display the number of bytes of the matched output </s> find $DIR -type f -exec grep $SEARCH /dev/null {} \; | wc --bytes
Find all files recursively starting from / that have been modified in the past 30 minutes and list them </s> find / -mmin -30 -ls
Print content of each file under the current directory followed by that file name </s> find . -type f -exec cat {} \; -print
Create a symbolic link named ".profile" to "git-stuff/home/profile" without dereferencing ".profile" </s> ln -sn git-stuff/home/profile .profile
List .log files from the current directory tree </s> find . -name "*.log" -exec echo {} \;
Find files whose data was modified within the given days of the month </s> find ./ -daystart -mtime -10 -and -mtime +1
Remove all files with a txt extension under current directory </s> find . -type f -name "*.txt" -exec rm {} \; -print
Split "/path/to/large/file" into files with at most 50000 lines and use prefix "/path/to/output/file/prefix" </s> split --lines=50000 /path/to/large/file /path/to/output/file/prefix
Search for case insensitive pattern 'search for me' in all files that match the name pattern '*.[!r]*' under current directory tree </s> find . -name "*.[!r]*" -exec grep -i -l "search for me" {} \;
Find recursively all Python files in the current directory and search them for the word ‘import’ </s> find . -name '*.py' | xargs grep 'import'
Read a line from standard input with prompt "Enter your choice: " and save response to variable "choice" </s> read -p "Enter your choice: " choice
For each item in array "alpha", display the basename, that is the part following the last slash, or the whole item if no slash is present. </s> basename -a "${alpha[@]}"
Split "/usr/bin/firefox" into 1000 files of about equal size </s> split -n 1000 /usr/bin/firefox
find files in /tmp directory that named are core and deletes them, single or double quotes, spaces or newlines are correctly handled </s> find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f
Send SIGTERM signal to last process sent to background by the current shell. </s> kill $!
Move all regular files under current directory to ./newdir </s> find ./ -type f -print | xargs    -i mv -f {} ./newdir
display all the regular/normal files in the current directory which are atleast 2 levels deep </s> find . -mindepth 2 -type f
Copy a large sparse file "sparse-1" to "sparse-1-copy" </s> rsync --sparse sparse-1 sparse-1-copy
Set permissions for directories in `foldername' and its subdirectories to 755 </s> find foldername -type d -exec chmod 755 {} ";"
ERROR - this is for DOS </s> ping -n 1 %ip% | find "TTL"
search for regular files in the current folder which path is not  "./.*" and not "./*/.*" </s> find ./ -type f -name "*" ! -path "./.*" ! -path "./*/.*"
Change to folder where the oracle binary is. </s> cd "$(dirname "$(which oracle)")"
Find recursively all files under current directory tree that contain a colon in the filename </s> find . -name \*\:\*
List files in the current directory tree which have permissions rwx for user and rw for group and others </s> find . -perm 766 -exec ls -l {} \;
force delete all the directories the folder "test folder" </s> find 'Test Folder' -type d -print0 | xargs -0 rm -rf
delete all the php files in the folder /var/www </s> find /var/www/*.php -type f -exec rm {} \;
Find all files named "file.ext" under the current working directory tree and print its filename </s> find `pwd` -name "file.ext" -printf "%f\n"
Remove all files that contain the word GUI in entire file system </s> find / -type f -print0 | xargs -0 grep -liwZ GUI | xargs -0 rm -f
Find all files more than 700 megabytes </s> find / -size +700M
find all the files that have been modified exactly 1 day ago </s> find -mtime 1
Find all .gz archives in the /path/to/dir directory tree </s> find /path/to/dir -name "*.gz" -type f
Wrap each line in "file.txt" to fit in 80 characters </s> fold -w 80 file.txt
Find all files under "/path" that do not contain a "." and append ".jpg" to their file name </s> find /path -type f -not -name "*.*" -print0 | xargs -0 rename 's/(.)$/$1.jpg/'
List all non-empty files under under current directory </s> find . -type f ! -size 0
find for lighttpd in /var </s> find /var -name lighttpd
Move server.log to 'logs' directory with new name as the current date formatted as "%Y%m%d%H%M" and with '.log' extension </s> mv server.log logs/$(date -d "today" +"%Y%m%d%H%M").log
Display file type information for all instances of "file" in the current PATH. </s> which file | xargs file
Find all "G*.html" files modified more than 7 days ago in the current directory tree </s> find . -mtime +7 -name "G*.html"
Test if "file.tar.gz" is corrupt </s> gunzip -t file.tar.gz
Print the column count of compressed file "$file" </s> zcat "$file" | awk '{print NF}' | head
Remove trailing white spaces from all files under current directory ignoring .git and .svn directories </s> find . -not \( -name .svn -prune -o -name .git -prune \) -type f -exec sed -i "s/[[:space:]]*$//g" "{}" \;
Remove the "^M" characters from all *.ext files under /home directory </s> find /home -type f -name "*.ext" -exec sed -i -e 's/^M$//' {} \;
Find all the files whose permissions are 777 </s> find . -type f -perm 0777 -print
show all regular/normal the files in the current folder whose size is bigger than 0 bytes excluding everything </s> find * -prune -type f -size +0c -print
View history using "vim" </s> vim <(history)
display a list of all the normal/regular files in the file system ,excluding the folder proc which have the suid or sgid bit set </s> find / -path /proc -prune -o -type f -perm +6000 -ls
find files in /usr directory which are modified after February 1 of the current year </s> find /usr -newermt "Feb 1"
Request A record from nameserver $ns for domain name $d, filter strings with domain name and exclude lines matching 'DIG' </s> dig @$ns $d A | grep $d | grep -v "DiG"
Find all files/directories that belong to the group 'staff' under '/usr' directory tree </s> find /usr -group staff
Print the help message of command "split" </s> split --help
Get a detailed listing of all symbolic links in /usr/bin starting with "z" </s> find /usr/bin  -type l  -name "z*" -exec ls  -l {} \;
Find all regular files in /usr/bin accessed more than 20 days ago </s> find /usr/bin -type f -atime +20
Replace all occurrences of 'previousword' with 'newword' in all regular files with '.cpp' extension under '/myprojects' directory tree and modify them in-place </s> find /myprojects -type f -name '*.cpp' -print0 | xargs -0 -n 1 sed -i 's/previousword/newword/g'
Move all *.mp4 files from directory /foo/bar and its subdirectories to /some/path </s> find /foo/bar -name '*.mp4' -exec mv -t /some/path {} +
Find files newer than main.css in ~/src </s> find ~/src -newer main.css
Find all files under current directory and set read-write permission for owner, read permission for group and no permission for other for those files </s> find . -type f -exec chmod u=rw,g=r,o= '{}' \;
display all the html files in the current folder that have been modified in the last 7*24 hours </s> find . -mtime -7 -name "*.html" -print
Format the contents of "[file]" in a neat table </s> cat file | column -t
find all the files in the current folder which which have been modified yesterday and day before yesterday and whose name is of length 1 </s> find . -name \? -daystart -mtime +0 -mtime -3
Convert the content of variable 'CLEAN' to small letters </s> CLEAN=`echo -n $CLEAN | tr A-Z a-z`
Back up all *.txt files/directories in new files/directories with a .bak extension in their names under /etc directory </s> find /etc -print0 -name "*.txt" | xargs -I {} -0 mv {} {}.bak
display the three largest files by size in current folder </s> find . -type f -exec ls -s {} + | sort -n -r | head -3
Remove all files whose names begin with "no-such-thing" in the /home/peter directory tree </s> find /home/peter -name no-such-thing* |xargs rm
Find all files/directories under current directory that match the case insensitive glob pattern {EA,FS}_* </s> find . -iname "{EA,FS}_*"
Move all files and directories matching "*.boo" in the current directory to "subdir" </s> mv `ls *.boo` subdir
Find all directories in the current directory tree that do not have `execute' permissions for anyone </s> find . -type d ! -perm -111
long list al the files in the current directory which have all the permissions </s> find . -perm 777 -type f -exec ls -l {} \;
Find all files under current directory whose status was changed less than 3 days ago and show last 5 lines of output </s> find . -type f -ctime -3 | tail -n 5
Find all *.rb (regular) files under current directory </s> find . -name "*.rb" -type f
Print 3 space separated '%' </s> echo $(yes % | head -n3)
show all the files in the current folder excluding those from the directories whose name starts with "git" </s> find . -type d -name '.git*' -prune -o -type f -print
Find all 400 permission files under /data directory and print 'Modifying ' appended with file path for each of them </s> find /data -type f -perm 400 -exec echo Modifying {} \;
Find all the files that end with the extension “.java” in the current directoy tree </s> find . -name "*.java"
Remove files erroneously named `-F' </s> find . -name "-F" -exec rm {} \;
Print the list of files in the current directory tree skipping SVN files </s> find . -name .svn -a -type d -prune -o -print
Print each line in "file1" and file2" separated by tabs and "file3" separated by a space </s> paste -d" " file1 file2 | paste -d'|' - file3 | sed 's,|, ,g'
Find all files under current directory and make them read-only for owner, read & writable by group and remove read-write-execute permission </s> find . -type f -exec chmod u+r-wx,g+rw-x,o-rwx {} \;
Find all fglrx-libGL* files under and below debian/fglrx/ </s> find debian/fglrx/ -name 'fglrx-libGL*'
display a long ilsting of all the files in the file system which are bigger than 1KB and which have not been modified in the last 30*24 hours </s> find / -size +1000 -mtime +30  -exec ls -l {} \;
Make directory "/path/to/destination" </s> mkdir /path/to/destination
show all directories in the current folder excluding those that are present in the sub directories of media, images and backups </s> find . -type d \( -name media -o -name images -o -name backups \) -prune -o -print
Split "domains.xml" into files of at most 50000 lines each with a numeric suffix of length 4 and prefix of "domains_" </s> split -a 4 -d -l 50000 domains.xml domains_
Remove everything within parentheses and substitute all non digit characters with a space from "1/2 [3] (27/03/2012 19:32:54) word word word word 4/5" and format the output as a table </s> echo '1/2 [3] (27/03/2012 19:32:54) word word word word 4/5' | sed -e 's/(.*)//' -e 's/[^0-9]/ /g' | column -t
list the files with a name ending with '.mp3' or '.jpg' and beginning with 'foo' </s> find . \( -name '*.mp3' -o -name '*.jpg' \) -name 'foo*' -print
create directory TestProject </s> mkdir TestProject
Find all *.ogg and *.mp3 (case insensitive) files/directories under your home directory </s> find $HOME -iname '*.ogg' -o -iname '*.mp3'
List all files/folders in current directory by separating them with spaces </s> ls | tr  "\n" " "
Find the first file/directory under current directory and quit </s> find . ... -print -quit
Read a single character from standard input with prompt "Is this a good question (y/n)?" and save the response to variable "answer" </s> read -n 1 -p "Is this a good question (y/n)? " answer
display all files in the current folder which end with extension "myfile" followed by one digit or two digits </s> find . -regextype sed -regex '.*myfile[0-9]\{1,2\}'
Find all the .mp3 files in the music folder recursively and pass them to the ls command </s> find ./music -name "*.mp3" -print0 | xargs -0 ls
find all the files in the current folder (handles files which contain newlines or only spaces in their names) </s> find . -print0 | xargs -0 -l -i echo "{}";
Find the total size of *.jpg files within the directory tree ./photos/john_doe </s> find ./photos/john_doe -type f -name '*.jpg' -exec du -ch {} + | grep total$
Search for regular files of the user bluher in the file system </s> find / -type f -user bluher -exec ls -ls {}  \;
Update the timestamp of '/tmp/$$' to the current month and day </s> touch -t `date +%m%d0000` /tmp/$$
Repeat "image.png" 10 times on a single line </s> echo $(yes image.png | head -n10)
Remove a leading "machine" from the system host name and save the result to variable "machnum" </s> machnum=$(hostname | sed 's/^machine//')
Creates temporary folder and saves path to it in 'td' variable. </s> td=$( mktemp -d )
find file named foo.txt under root / directory. </s> find / -name foo.txt
Show all lines in file2 that don't contain the first field of any line in file1. </s> awk '{print $1}' file2 | comm -1 -3 file1 - | join file2 -
Read a line from standard input in an interactive shell with prompt in variable "myprompt" interpreted as PS1 is interpreted </s> read -e -p "${myprompt@P}"
Replace all occurrence of "subdomainA.example.com" with "subdomainB.example.com" in all files under the current directory and below ignoring SVN files </s> find . \( ! -regex '.*/\..*' \) -type f -print0 | xargs -0 sed -i 's/subdomainA.example.com/subdomainB.example.com/g'
Find a single file called tecmint.txt and remove it </s> find . -type f -name "tecmint.txt" -exec rm -f {} \;
Set variable "MAVEN_DEBUG_OPTS" to "-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" on Windows machines </s> set MAVEN_DEBUG_OPTS=-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
Find all files that are set user ID to root </s> find . -user root -perm -4000 -print
Page through the contents of 'file', but excess from lines that don't fit within the screen/window width is cut. </s> less -S file
display a long listing of all fles in current folder which have been modified in the last 60 minutes </s> find . -mmin -60 -ls
Create a symbolic link in "/bar/tmp/" for each file in directory "/foo" that does not start with "runscript" </s> find /foo -maxdepth 1 -type f ! -name 'runscript*' -exec ln -s {} /bar/tmp/ \;
Find files and directories in the /tmp/ tree that contain spaces in their names and replace those spaces with underscores </s> find /tmp/ -depth -name "* *" -execdir rename 's/ /_/g' "{}" \;
Convert all characters in "$a" to lower case and save to variable "b" </s> b=`echo "$a" | sed 's/./\L&/g'`
find all the files in the file system which belong to the user "pat" and with the name "dateiname" </s> find / -user pat -iname "Dateiname"
Delete line 2 in numbered file "file" and renumber </s> grep -v '^2 ' file | cut -d' ' -f2- | nl -w1 -s' '
find all regular/normal files in current folder which have been modified in the last 60 minutes </s> find -type f -mtime -60
List environment variables and their values, escaping all semicolons with a backslash. </s> env | sed 's/;/\\;/g'
Show filename and filetype description of all PHP files in all directories contained in current directory whose name or filetype description includes "UTF" </s> file */*.php | grep UTF
display long listing of all the text files in the current folder (plus at the end executes quickly by sending bulk data as input to the command in exec) </s> find . -name "*.txt" -exec ls -la {} +
Clear the terminal's search history </s> history -c
find all the fles that have .ssh in the end and redirect the output to ssh-stuff </s> find / -name .ssh* -print | tee -a ssh-stuff
Find root's Ruby files accessed in the last two minutes </s> find /apps/ -user root -type f -amin -2 -name *.rb
Find files under /tmp that are larger than 10KB and smaller than 20KB </s> find /tmp -size +10k -size -20k
Make directory "temp" </s> mkdir temp
Search the *.c files residing in the current directory tree for string "blash" </s> find . -name *.c -exec grep -n -e blash {} \;
Print your/dir if it's empty </s> find "your/dir" -prune -empty
Find all files/directories following symbolic links under current directory tree that are owned by 'root' user </s> find . -follow -uid 0 -print
Find all files under directory tree /path/to/dir whose permissions are not 644 </s> find /path/to/dir ! -perm 644
search for all text files in the folder /home </s> find /home -name *.txt
Copy "./export" recursively to "/path/to/webroot" preserving permissions </s> rsync -pr ./export /path/to/webroot
Remove files from the file system that are owned by nobody </s> find / -nouser -exec rm {} +
Locate logo.gif in the /var/www directory tree </s> find /var/www -name logo.gif
List all files/directories under current directory with their inode numbers, disk space, permission, number of hard links, user name, group name, size, status change time in Y-m-d format and name filed,  then write the outptut to /tmp/files.txt </s> find . -type f -fprintf /tmp/files.txt "%i,%b,%M,%n,%u,%g,%s,%CY-%Cm-%Cd %CT,%p\n"
Remove all .txt files in and below the current directory </s> find . -name "*.txt" -print0 | xargs -0 rm
Find all files/directories named file in minimum 4 levels down the current directory </s> find -mindepth 4 -name file
Add execute permission to all files ending in ".sh" </s> chmod +x *.sh
display long listing of first 10 directories in the current folder </s> find . -type d -ls | head
find all the files in the entire filesystem which belong to the user root and display the ten files. </s> find / -user root | head
Remove all files with a txt extension under current directory </s> find . -type f -name "*.txt" -print|xargs rm
count lines of C or C++ or Obj-C code under the current directory </s> find . \( -name "*.c" -or -name "*.cpp" -or -name "*.h" -or -name "*.m" \) -print0 | xargs -0 wc
Print contents of "file" as space separated hexadecimal bytes on a single line </s> od -t x1 -An file |tr -d '\n '
Find "file.xml" under the current directory and change directory to its parent </s> cd `find . -name file.xml -printf %h`
Find files under /etc/apache-perl that are modified more recently than /etc/apache-perl/httpd.conf </s> find /etc/apache-perl -newer /etc/apache-perl/httpd.conf
List first 5 files named 'something' that are found under current directory </s> find . -name something -print | head -n 5
Print the list of files from the "/zu/durchsuchender/Ordner" directory tree whose names begin with "beispieldatei" and which contain string "Beispielinhalt" </s> find "/zu/durchsuchender/Ordner" -name "beispieldatei*" -print0 | xargs -0 grep -l "Beispielinhalt"
Read a line from standard input with prompt "Are you alright? (y/n) " and save the response to variable "RESP" </s> read -p "Are you alright? (y/n) " RESP
Copy all files under director 'foo' whose name doesn't contain 'Music' to directory 'bar'. </s> find foo -type f ! -name '*Music*' -exec cp {} bar \;
search for all xml files in current folder and display them </s> find . -name "*.xml" -exec echo {} \;
Find all regular files under and below /home/user/demo/ </s> find /home/user/demo -type f -print
Shows only process trees rooted at processes of this user. </s> pstree user
Find all SUID files . </s> find /  -perm /u=s
Print information of the process running the current script as the current user </s> ps -ef | grep $0 | grep $(whoami)
Search the current directory tree for symlinks whose contents match pattern "*sysdep.c" </s> find . -lname '*sysdep.c'
Removes resursively all files and folders named ".DS_Store". </s> find . -name ".DS_Store" -print0 | xargs -0 rm -rf
Mount "/path/to/device" on "/path/to/mount/location" as a loop back device </s> mount /path/to/device /path/to/mount/location -o loop
Synchronize "/path/to/dir_b" with files in "/path/to/dir_a/" if the files are newer </s> rsync -rtuv /path/to/dir_a/* /path/to/dir_b
Recursively change the owner to "user" and group to "www-data" of "yourprojectfoldername" </s> chown -R user:www-data yourprojectfoldername
find all the backup files in the current folder and delete them </s> find . -type f -name "*.bak" -exec rm -f {} \;
Delete all files under /path/to/files that are not newer than dummyfile </s> find /path/to/files -type f ! -newer dummyfile -delete
find all regular files  then display the number of occurrences of banana without lines not proper end </s> find . -type f -print0| xargs -0 grep -c banana| grep -v ":0$"
Display differences between /tmp/test1 and /tmp/test2 side-by-side. </s> diff -y /tmp/test1  /tmp/test2
create a list of all files in all subdirectories </s> find . -type f -exec md5 {} \;
Recursively removes all files and folders that match pattern '/usr/local/{lib/node{,/.npm,_modules},bin,share/man}/npm*' </s> rm -rf /usr/local/{lib/node{,/.npm,_modules},bin,share/man}/npm*
Search for files only that end with .php and look for the string $test inside those files </s> find . -name \*.php -type f -print0 | xargs -0 -n1 grep -Hn '$test'
Reports count of characters in the value of ${FOO_NO_TRAIL_SPACE} variable as follows: "length(FOO_NO_TRAIL_SPACE)==<counted number of characters>" </s> echo -e "length(FOO_NO_TRAIL_SPACE)==$(echo -ne "${FOO_NO_TRAIL_SPACE}" | wc -m)"
Find files/directories named<filetype> under current directory which were accessed less than 5 days ago </s> find -name "<filetype>" -atime -5
perform a case insensitive search </s> find  / -type d -iname "apt" -ls
Search for 'mystring' in all *.txt (case insensitive) files under current directory </s> find . -iname *.txt -exec egrep mystring \{\} \;
Find all or single file called FindCommandExamples.txt under / directory of owner root </s> find / -user root -name FindCommandExamples.txt
Gets back to the foreground a job with number 2. </s> fg 2
Archive "/home/path" to "path" on host "server" showing progress and statistics and remove files in the destination not found in the source </s> rsync -a --stats --progress --delete /home/path server:path
Give all files in the /path/to/base/dir tree read privileges </s> find /path/to/base/dir -type f -exec chmod 644 {} +
Replace all commas with tab characters in 'filename.csv' and page interactively through the result. </s> sed "s/,/\t/g" filename.csv | less
Write out the entire directory hierarchy from the current directory </s> find . -print
display long listing of all the files in the root folder which are bigger than 3KB </s> find / -dev -size +3000 -exec ls -l {} ;
Monitor 3 specific process IDs: 18884, 18892, and 18919 (GNU specific) </s> top -p 18884 -p 18892 -p 18919
search for the directory "ora10" in the entire file system </s> find / -type d -name "ora10"
List all the file links </s> find . -type l
Recursively change the user and group of all files in "/var/log/jenkins" to "root" </s> chown -R root:root /var/log/jenkins
Find all regular files in and below the home directory that have been modified in the last 90 minutes </s> find ~ -type f -mmin -90
Get the grandparent directory of each found 'pattern' file in $SEARCH_PATH </s> find "$SEARCH_PATH" -name 'pattern' | rev | cut -d'/' -f3- | rev
same as above example with -exec , in this example with -OK it should ask for confirmation before executing the rm command . that is called user intractive command </s> find . -name core -ok rm {} \;
Search the /home/pankaj directory for regular files whose status has changed within the last 5 minutes </s> find /home/pankaj -maxdepth 1 -cmin -5 -type f
Print file name without the last two extensions assuming the file name doesn't contain any other dots. </s> echo "$FILE"|rev|cut -d"." -f3-|rev
Search the directory tree given as variable $root_dir for regular files </s> find $root_dir -type f
Create tar archive "dirall.tar" and copy all files from directory tree /tmp/a1 to it </s> find /tmp/a1 -exec tar -rvf dirall.tar {} \;
Find files/directories under current directory without descending into it </s> find -prune
Search the current directory tree for files containing "needle" in their names </s> find . -iname "*needle*"
Display differences between directories dir1 and dir2. </s> diff -r dir1/ dir2/
Print the first line of every file matching pattern 'file?B' in the xargstest/ directory tree </s> find xargstest/ -name 'file?B' | sort | xargs head -n1
Find all duplicate ".jar" files in the current directory tree </s> find . -type f -printf "%f\n" -name "*.jar" | sort -f | uniq -i -d
The file "files_to_find.txt" contains a list of filenames, create each file or update its timestamp if it exists. </s> touch `cat files_to_find.txt`
find all files in the current folder that are modified exactly 1 minute ago </s> find -mmin 1 -print
Prints total count of lines of all *.py files in a current folder and subfolders. </s> find . -name "*.py" -exec wc -l {} \; | awk '{ SUM += $0} END { print SUM }'
Find all the files in file system which are greater than 50MB and less than 100MB </s> find / -size +50M -size -100M
Find all files/directories under current directory and print them </s> find . -print0 | xargs -I{} -0 echo {}
Count the number of unique 3 to 6 character file extensions are in the current directory tree </s> find . -type f -name "*.*" | grep -o -E "\.[^\.]+$" | grep -o -E "[[:alpha:]]{3,6}" | awk '{print tolower($0)}' | sort | uniq -c | sort -rn
display all the files in the current folder excluding the files with the name mmm </s> find . -name mmm -prune -o -print
delete all normal/regular files in the current folder which are empty </s> find . -type f -empty -delete
find all the text files in the entire filesystem which belong to the user root and display the ten files. </s> find / -user root -iname "*.txt" | head
Find command will list of all files & directories from current directory , before listing echo command will display ' List of files & Directory ' </s> find . -exec echo ' List of files & Direcoty'   {} \;
Find all *.ogg (case insensitive) files/directories under your home directory that are greater than 100MB in size </s> find $HOME -iname '*.ogg' -size +100M
Prints string "0 1 * * * /root/test.sh" to the terminal, and append it to file '/var/spool/cron/root' </s> echo "0 1 * * * /root/test.sh" | tee -a /var/spool/cron/root
Search for 'Attached: Yes' in all regular files under '/proc/scsi' directory tree matching the path '/proc/scsi/usb-storage' and show only the matched filenames </s> find /proc/scsi/ -path '/proc/scsi/usb-storage*' -type f | xargs grep -l 'Attached: Yes'
find for the word "dba_2pc_pending" in all the files of current fodler having the word "sql" in their name </s> find . -print|grep sql|xargs grep -i dba_2pc_pending
Recursively change ownership of "/usr/local/lib" to the current user </s> sudo chown -R `whoami` /usr/local/lib
Delete all files named 'sample' (case insensitive) under '/home/user/Series' directory tree with superuser privilege </s> sudo find /home/user/Series/ -iname sample -exec rm {} \;
Look for `regexp' in binary files </s> find .  -type f -print|xargs file|grep -i text|cut -fl -d:    | xargs grep regexp
find all the files in the home folder which are bigger than 2MB and zip them </s> find ~ -size +2000000c -regex '.*[^gz]' -exec gzip '{}' ';'
Find regular files whose names end in .JPG </s> find . -type f -name "*.JPG"
Prints process tree of the current process with parent processes. </s> pstree -s $$
List files in the current directory </s> find . \( -path './*' -prune \)
Find all files larger than 100M and delete them </s> find / -size +100M -exec rm -rf {} \;
List all IPV4 addresses found in all files under /etc directory </s> find /etc -type f -exec cat '{}' \; | tr -c '.[:digit:]' '\n'  | grep '^[^.][^.]*\.[^.][^.]*\.[^.][^.]*\.[^.][^.]*$'
Search the current directory tree for all files matching regular expression ".*\.rb$" </s> find . -regex ".*\\.rb$"
Print the directories that are taken by the glob pattern $SrvDir* </s> find $SrvDir* -maxdepth 0 -type d
Connect as ssh user specified by variable USER to host whose IP address or host name is specified by HOST, and copy remote file specified by variable SRC to location on local host specified by variable DEST, disabling progress info but enabling debug info. </s> scp -qv $USER@$HOST:$SRC $DEST
Display the entire file system in a tree-like format </s> tree /
display all the files in the current folder which have are bigger than 1KB </s> find . -size +1024 -print
Find all php files under current directory </s> find . -type f -name "*.php"
Print the last command in history </s> history | tail -1 | awk '{print $1}'
Print a list of all *.code files from the current directory tree </s> find . -name *.code
search for MP3 files in the current folder and subfolders exclude dir1 AND dir2 </s> find ! -path "dir1" ! -path "dir2" -iname "*.mp3"
Search for 'ireg' in all PHP files under 'project' directory tree and show only the files that match </s> find project -name '*.php' -type f -print0 | xargs -0 grep -l ireg
Search the current directory tree for regular files whose names match pattern $x </s> find . -type f -name $x
Creates temporary file in TMPDIR folder or /tmp/ if TMPDIR is not defined, named by template ${tempname}.XXXXXX, and saves path to new file in  a TMPPS_PREFIX variable. </s> TMPPS_PREFIX=$(mktemp "${TMPDIR:-/tmp/}${tempname}.XXXXXX")
Remount "yaffs2" filesystem "/dev/block/mtdblk4" to "/system" as read and write only </s> mount -o rw,remount -t yaffs2 /dev/block/mtdblk4 /system
Find all files and directories that have been modified in the last seven days. </s> find . -mtime -7
Find '*prefs copy' files under /mnt/zip and delete them with confirmation prompt ensuring white space safety </s> find /mnt/zip -name "*prefs copy" -print0 | xargs    -0 -p /bin/rm
Print input "your, text, here" formatted to fit 70 characters per line breaking at spaces </s> echo 'your, text, here' | fold -sw 70
Find all files/directories that are owned by user 'eric' under current directory tree </s> find -user eric -print
Handles shell option 'nullglob' according with flags stored in $NGV variable. </s> shopt "$NGV" nullglob
extract "phantomjs-1.9.0-linux-x86_64.tar.bz2" </s> sudo tar xvf phantomjs-1.9.0-linux-x86_64.tar.bz2
display all text, mpg, jpg files  in the folder /Users/david/Desktop </s> find /Users/david/Desktop -type f \( -name '*.txt' -o -name '*.mpg' -o -name '*.jpg' \)
display long listing of all the files in the folder "/myfiles" </s> find /myfiles -exec ls -l {} ;
Copy all files in current directory that do not match */exlude-path/* in their paths to /destination/ preserving directory structure </s> find . -type f -not -path '*/exlude-path/*' -exec cp --parents '{}' '/destination/' \;
Set permissions to ug=rwx,o= for directories under the $d directory tree </s> find $d -type d -exec chmod ug=rwx,o= '{}' \;
Copy the entire directory tree under t1 to t2, do not create a containing t1 directory in t2. </s> cp -R t1/ t2
Find all files/directories under $1 which have at least write permission for their owner and set write permission for group for these files/directories </s> find "$1" -perm -u+w -print0 | xargs chmod g+w
Find empty regular files in /dir and its subdirectories </s> find /dir -type f -size 0 -print
Find all *.mp3 files in file system with more than 10MB and delete them using rm command </s> find / -type f -name *.mp3 -size +10M -exec rm {} \;
replaces the last occurrence of 'a' with 'c' in file </s> tac file | sed '/a/ {s//c/; :loop; n; b loop}' | tac
Recursively find the latest modified "zip" file in the current directory </s> find . -name "*zip" -type f | xargs ls -ltr | tail -1
Find files matching pattern $2 in the $1 directory recursively and search them for text $3, where $1, $2, $3 are the command line arguments to the Bash script </s> find $1 -name "$2" -exec grep -Hn "$3" {} \;
find all the directories in the file system which have read, write and execute to all the users </s> find / \( -type d -a -perm -777 \) -print
Find and delete all hard links in the /home directory to file1 </s> find /home -xdev -samefile file1 -print0 | xargs -0 rm
Show all previously typed shell commands, waiting for user interaction after each page of output. </s> history | more
Find all *fstab* files under and below /etc </s> find /etc -name *fstab*
Read a line from standard input into variable "message" with prompt "Please Enter a Message: " followed by a newline </s> read -p "`echo -e 'Please Enter a Message: \n\b'`" message
Find all empty files in home directory </s> find ~ -empty
Remove all .gz files in the current directory tree </s> find . -name '*.gz' -type f -printf '"%p"\n' | xargs rm -f
display list of all the files in the current folder which are empty. </s> find . -size 0 -ls
Remove all .txt files in and below the current directory </s> find . -name "*.txt" -exec rm {} \;
Make a list of all files in the current directory tree, except *.png and *.class, and view it in the vim editor </s> find . | grep -E -v '\.png$|\.class$' | vim -
List the full path of each directory in the current working directory </s> tree -dfi -L 1 "$(pwd)"
find all the text files in the home directory </s> find ~/ -name '*.txt'
Print the text file paths that match 'needle text' in their contents under 'my_folder' recursively </s> grep -rl "needle text" my_folder | tr '\n' '\0' | xargs -r -0 file | grep -e ':[^:]*text[^:]*$' | grep -v -e 'executable'
Remount "/" without writing in "/etc/mtab" </s> mount -n -o remount /
For each .def file under the current directory, create an empty .def.out file with current timestamp. </s> find . -name '*.def' | sed 's/\(.*\)/\1.out/' | xargs touch
Force delete all files in the current folder </s> find . | xargs -i rm -f "{}"
Search for the regex "+\S\+" in file 'in.txt' and print the matches by replacing newlines with comma (',') </s> grep -o "+\S\+" in.txt | tr '\n' ','
Compresses all '*.xml' files under current directory with 'bzip2' utility. </s> find -name \*.xml -print0 | xargs -0 -n 1 -P 3 bzip2
Find all 777 permission files/directories under current directory tree </s> find -perm 777
Find all *.py files under and below the current directory and search them for "xrange" </s> find . -name '*.py' -exec grep --color 'xrange' {} +
Exclude directory from find . command </s> find ./ -path ./beta/* -prune -o -iname example.com -print
Remove all directories called "test" from the current directory tree </s> find -name "test" -type d -delete
Mount "vfat" filesystem "/dev/sda7" to "/mnt/my_partition" with read and write permission, umask of files and directories set to "0000", and save in fstab and allow ordinary users to mount </s> sudo mount -t vfat -o rw,auto,user,fmask=0000,dmask=0000 /dev/sda7 /mnt/my_partition
Save the last modified time of file 'file_name' to variable 'STAMP' </s> STAMP=`date -r file_name`
Search the system for *.rpm files ignoring removable media </s> find / -xdev -name \*.rpm
Unzip "file.gz", list the unique lines matching regex pattern '"searchstring":"[^"]*"' prefixed by the number of occurrences, sort from least frequent to most frequent </s> zcat file.gz | grep -o '"searchstring":"[^"]*"'| sort | uniq -c | sort -n
Find files/directories that does not have write permssion for group </s> find /path ! -perm /g+w
Make directories to file "/full/path/to/file.txt" as needed </s> mkdir -p `dirname /full/path/to/file.txt`
Keep only the last two hyphen-separated sections of "abc-def-ghi-jkl" </s> echo "abc-def-ghi-jkl" | rev | cut -d- -f-2 | rev
Print disk of mount point "/pa/th" </s> mount | awk '$3 == "/pa/th" {print $1}'
Read a single character from standard input into variable "key" without backslash escapes and using the prompt "Press any key to continue..." </s> read -n1 -r -p "Press any key to continue..." key
Find files/directories named 'file.txt' in the path '/usr/lib/important/' </s> find / -path /usr/lib/important/*/file.txt
find all the html files in the current folder </s> find . -name "*.html"
display a long list of all the directories which have files ending with ".todo" </s> find "$STORAGEFOLDER" -name .todo -printf '%h\n' | uniq | xargs ls -l
Delete all filename* files under /dir directory </s> find /dir -name "filename*" -type f -exec rm {} \;
Find all files under current directory and set their permission to 775 </s> find -type f | xargs chmod 775
search all the files in the current folder using name patterns </s> find . -name 'a(b*' -print
Find directories named `build' </s> find . -type d -name build
List files with C-style escape sequences for non-alphanumeric characters </s> ls -b
Delete all regular files named 'IMAG1806.jpg' under current directory tree </s> find . -type f -name "IMAG1806.jpg" -exec rm -f {} \;
list in long format all files from / whose filename ends in "jbd", not descending into directories that are not readable while searching, and not descending into directories on other filesystems </s> find / -mount \! -readable -prune  -o  -path /dev -prune  -o  -name '*.jbd' -ls
Search the /root directory recursively for the regular file named "myfile" </s> find /root/ -name myfile -type f
Format output of 'file' content to columns with wide not less than 80 pixels </s> cat file | column -c 80
Prints all NS servers of domain google.com. </s> dig google.com ns | awk 'p{print $5}/^;; ANSWER SECTION:$/{p=1}/^$/{p=0}'
find all the perl files in /var/www </s> find /var/www/ -type f -name "*.pl" -print
Find directories in the current directory recursively that are not "executable" by all </s> find -type d ! -perm -111
Join lines of 'file': fields 1 and 2 of lines discarding adjascent lines ignoring first 3 fields, with fields 3 to end of line discarding adjascent lines ignoring 3 last fields. </s> paste <(uniq -f3 file | cut -f1,2) <(tac file | uniq -f3 | tac | cut -f3-)
Find all directories under current directory and change their permission to 644 </s> find -type d -print0|xargs -0 chmod 644
Print common lines in sorted files "ignore.txt" and "input.txt" </s> comm -12 ignore.txt input.txt
display all the header files  and cpp files in the current folder </s> find . -name \*.h -print -o -name \*.cpp -print
display all the text files in the home folder </s> find /home -name "*.txt"
Print the sizes of all files from the current directory tree </s> find . -iname '*.jpg' -type f -printf +%b
Add cron lists from "filename" to list of cron jobs, giving errors for any lines that cannot be parsed by crontab. </s> crontab filename
Print only the line "foo///" given two empty directories foo and bar </s> find foo/// bar/// -name foo -o -name 'bar?*'
Finds all files in $LOCATION, prints file names, overwrite files with random content $TIMES times, and finally remove them. </s> find $LOCATION -print -exec shred $TIMES -u '{}' \;
Find all files in /home/kos and below whose names end in ".tmp" </s> find /home/kos -name *.tmp -print
Find all files/directories under current directory and set their permission to 775 </s> find . -type f -exec chmod 775 {} \;
Look for files with wide open permissions </s> find . -type f  -perm a=rwx -exec ls -l {} \;
Find all files with '.db' extension (case insensitive) that belong to user 'exampleuser' and were modified exactly 7 days ago under '/home' directory tree </s> find /home -user exampleuser -mtime 7 -iname ".db"
Counts all *.mod files in a /boot/grub/ folder. </s> ls -l /boot/grub/*.mod | wc -l
create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units) </s> find . -name '*.log' -mtime +3 -print0 | xargs -0 -n 500 -P 4 bzip2
Update the archived copy of the home directory, "alldata.tar" </s> find ~/ -newer alldata.tar -exec tar uvf alldata.tar {} ;
Find all files in the current directory recursively with "linkin park" in their names and copy them to /Users/tommye/Desktop/LP </s> find . -type f -iname "*linkin park*" -exec cp -r {} /Users/tommye/Desktop/LP \;
find all the directories in current folder and do not search in sub directories </s> find . -maxdepth 1 -type d -print0
display all the regular files in the current folder that are bigger than 10KB </s> find . -type f -size +10k
Limits the number of results from grep to 2 lines </s> grep -o '1.' yourfile | head -n2
Copy file header.shtml to directories dir1, dir2, dir3, and dir4 </s> find dir1 dir2 dir3 dir4 -type d -exec cp header.shtml {} \;
Archive "/source/backup" to "/destination" with compression during transfer </s> rsync -ravz /source/backup /destination
Show all running processes with a name matching "postgres" </s> ps -ef | grep postgres
Find files under current directory that contains the string '/bin/ksh' </s> find . -type f -print | xargs    grep -il 'bin/ksh'
display all regular files in current folder excluding search in the directories that are ending with "git,svn" </s> find . \( -type d -regex '^.*/\.\(git\|svn\)$' -prune -false \) -o -type f -print0
Saves listing of a current folder in 'OUTPUT' variable. </s> OUTPUT="$(ls -1)"
search for the folder .dummy and remove it from the folder "Test folder" </s> find "Test Folder" -type d -name .dummy -exec rm -rf \"{}\" \;
Find all regular files under $SOURCE directory tree that were modified more than $KEEP days ago and show only the names without the paths </s> find $SOURCE -type f -mtime +$KEEP | sed ‘s#.*/##'
display all the files on the current folder excluding those that are present in the folder "./src/emacs" </s> find . -path ./src/emacs -prune -o -print
display all the files having the word "searched phrasse" in their name in the current folder excluding those from the paths "/tmp/" and "./var/log" </s> find . -type f -name "*searched phrasse*" ! -path "./tmp/*" ! -path "./var/log/*"
Find files under current directory that contains the string '/bin/ksh' </s> find . -type f -exec grep -iH '/bin/ksh' {} \;
display the version of find command </s> find -version
Search for files containing string "PENDWIDTH" and view the result using the more command </s> find . -exec grep PENWIDTH {} \; | more
display a long listing of all the empty files in the entire file system which are empty </s> find / -type f -size 0 -exec ls -l {} \;
List all files bigger than 10000 blocks </s> find . -type f -size +10000 -exec ls -al {} \;
Show manual page of find utility </s> man find
Enables shell option 'cmdhist'. </s> shopt -s cmdhist
Print which files differ between "dir1/" and "dir2/" </s> diff --brief -r dir1/ dir2/
display all directories in vim folder do not search in sub directories </s> find .vim/ -maxdepth 1 -type d
Creates temporary file, replacing XXXXXXXXXXXXXXXXXXXXXXX with equal length suffix. </s> mktemp /tmp/banana.XXXXXXXXXXXXXXXXXXXXXXX.mp3
Join comma-separated information in 4 files </s> join -t, <(sort test.1) <(sort test.2) | join -t, - <(sort test.3) | join -t, - <(sort test.4)
List all environment variables containing 'USER' in their name or value that would result in running a command with 'sudo env'. </s> sudo env |grep USER
Change permissions to 644 for all regular files under the /path/to/dir/ tree </s> find /path/to/dir/ -type f -print0 | xargs -0 chmod 644
Copy a comlex directory tree from one machine o another while preserving copy permissions and ownership </s> find . -depth -print | cpio -o -O /target/directory
Display the number of sub-directories for all directories under current directory tree, sort them according to the decreasing order of the number and show only the first 10 of them </s> find . -type d -ls | awk '{print $4 - 2, $NF}' | sort -rn | head
Delete files under $LOCATION that match $REQUIRED_FILES in their names and were modified more than 360 minutes ago </s> find $LOCATION -name $REQUIRED_FILES -type f -mmin +360 -delete
Replace spaces in file names with underscores for all files in the current directory tree </s> find -name "* *" -type f | rename 's/ /_/g'
Count the number of lines in all files in the xargstest/ directory tree that match pattern 'file??' </s> find xargstest/ -name 'file??' | sort | xargs wc -l
Md5sum the last 5 files in /directory1/directory2/ </s> find /directory1/directory2/ -maxdepth 1 -type f | sort | tail -n 5 | xargs md5sum
Look for directory `Cookbook' </s> find -name Cookbook -type d
Decompress ${set1[@]} files with gzip </s> gzip -d ${set1[@]} &
Recursively copy "emptydir" to "destination/newdir" </s> rsync --recursive emptydir/ destination/newdir
search for text files in the current folder which have write access to others </s> find . -type f \( -iname "*.txt" -and -perm -o=w \)
Find all regular files under $dir directory tree that are bigger than $size MB in size and print them along with their sizes in decreasing order of size </s> find $dir -type f -size +"$size"M -printf '%s %p\n' | sort -rn
Set the setup connection timeout to 3 seconds for connecting to "user@ip" via ssh </s> ssh -o ConnectTimeout=3 user@ip
display the number of lines in all the header files in the current folder </s> find . -name "*.h" -print | xargs wc -l
List all regular files from the current directory tree that were modified less than 60 days ago </s> find -type f -mtime -60
Search all files from the /tmp directory tree for the string "search string" </s> find /tmp -type f -exec grep 'search string' '{}' /dev/null \+
delete all the normal/regular files in the current folder </s> find . -type f -print -delete
Print the list of regular files in the current directory and all subdirectories </s> find . -type f
Look for *.jpg files </s> find . -name “*.jpg”
find all files in the a direcotry which have been modified in exactly 1 day back </s> find /home/bozo/projects -mtime 1
Find all directories under $ROOT_DIR and show the sub-directories of the directories before the directories themselves </s> find $ROOT_DIR -type d -depth -print
Find recursively all regular files in the current directory tree not ending in .dll or .exe </s> find . -type f | grep -vP "\.dll$|\.exe$"
Find all files in the current directory tree whose names are ".DS_STORE" and delete them </s> find . -name ".DS_STORE" -delete
Find *.pl files/directories under /users/tom </s> find /users/tom -name "*.pl"
Find all *.html files under current directory and for each file replace the first occurrence of STRING and previous lines with the content of common_header file </s> find . -type f -name '*.html' -exec sed -i -e '1r common_header' -e '1,/STRING/d' {} \;
Search the current directory recursively for regular files last accessed less than 2 minutes ago </s> find . type -f -amin -2
Copies file 'file1' to each of directories 'dir1', 'dir2', 'dir3'. </s> echo dir1 dir2 dir3 | xargs -n 1 cp file1
Output the string 'yes' continously until killed </s> yes
Prints process tree for the current process with ASCII line drawing characters. </s> pstree -A -s $$
SSH into user@server and run command ${SSH_COMMAND} </s> ssh user@server "${SSH_COMMAND}"
Execute "ls" every second </s> watch -n 1 ls
Split "infile" into 2 files of about equal size </s> split -n2 infile
Delete all *.zip files under current directory that are older than 2 days </s> find . -name "*.zip" -mtime +2 orint0 | xargs -0 rm
Change permissions to u=rwx,g=rx,o= for all directories in the current directory tree </s> find . -type d -exec chmod u=rwx,g=rx,o= '{}' \;
Search the regular files of the current directory tree for string "whatever" </s> find . -type f -exec grep -H whatever {} \;
Read a line from standard input into variable "message" with escaped prompt "\nPlease Enter\na Message: '" </s> read -p "`echo -e '\nPlease Enter\na Message: '`" message
Search only for directories </s> find -type d
Find all files/directories with '.mp4' extension and all regular files with '.flv' extension, sort them according to their names and display the first 500 of them </s> find /storage -name "*.mp4" -o -name "*.flv" -type f | sort | head -n500
find the path of a specfic video file in the current directory </s> find ./ -name "foo.mp4" -printf "%h\n"
Recursively find the latest modified file in the current directory and print the modification time and filename </s> find . -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" " | sed 's/.*/"&"/' | xargs ls -l
Find all *.tar.gz files/directories under /directory/whatever which were modified more than $DAYS ago </s> find /directory/whatever -name '*.tar.gz' -mtime +$DAYS
Copy all files (not directories) in "/path/to/local/storage" to "/path/to/copy" on host "remote.host" authenticating as user "user" </s> rsync /path/to/local/storage user@remote.host:/path/to/copy
Print which files differ in "PATH1/" and "PATH2/" recursively excluding any files that match any pattern in "file1" </s> diff PATH1/ PATH2/ -rq -X file1
Find and delete all .zip files in the current directory tree </s> find . -depth -name '*.zip' -exec rm {} \;
find all files in the current directory excluding those that end with .js or have the words .min or console in their name </s> find . -type f \( -name "*.js" ! -name "*-min*" ! -name "*console*" \)
Calculate md5 sums for each files matching 'main.cpp*' </s> md5sum main.cpp*
Remove all regular files from the current directory tree whose names do not end with "txt" </s> find . -type f -not -name '*txt' -print0 | xargs -0 rm --
display all files in the current folder </s> find . -print
Find all regular files under current directory (excluding hidden directories) and replace every occurrences of 'subdomainA.example.com' with 'subdomainB.example.com' in those files </s> find . \( ! -regex '.*/\..*' \) -type f -print0 | xargs -0 sed -i 's/subdomainA.example.com/subdomainB.example.com/g'
Find all .txt files in the /home/user directory tree and copy them to /home/backup </s> find /home/user -name '*.txt' | xargs cp -av --target-directory=/home/backup/ --parents
Gets string with MAC addess of network interface eth0. </s> ifconfig eth0 | grep HWaddr
Find all files/directories under ./var/log directory </s> find ./var/log
Find *.c and *.sh files </s> find . -type f \( -name "*.c" -o -name "*.sh" \)
Perform a dry run replacing "special" with "regular" in all file names in the current directory </s> rename -n 's/special/regular/' **
Overwirte file '/path/to/your/file' with random content, showing progress while execution. </s> shred -v -n 1 /path/to/your/file #overwriting with random data
display the count of all the files in the current folder </s> find . -print | wc -l
List each file or directory in the current directory prefixed by its filesize in bytes and sorted from smallest to largest </s> du -a --max-depth=1 | sort -n
show the list of all the files in the current folder which have been modified within the 24 hours </s> find . -mtime 0 -print
Find all .mp3 files with more then 10MB and delete them from root directory . </s> find /  -type f -name *.mp3 -size +10M -exec rm  {} \;
Search for 'string' case insensitively in all files under current directory tree and show the matched lines with their filenames </s> find . -name * | xargs grep -iH "string"
Write output of "ls -a" to standard output and to "output.file" </s> ls -a | tee output.file
find all the files which have size 0 bytes in temp folder </s> find /tmp -type f -empty
Returns 0 if user $1 belongs to group $2. </s> groups $1 | grep -q "\b$2\b"
Removes files ~/.android/adbkey and ~/.android/adbkey.pub without prompting. </s> rm -f ~/.android/adbkey ~/.android/adbkey.pub
search for the word echo all the bash files(files ending with .bash) in the current folder </s> find . -name "*.bash" |xargs grep "echo"
Find all files/directories with 664 permission under current directory tree </s> find -perm 664
Prints processes with 'MDSImporte' in name, cutting off  lines longer than screen width, exiting from less after end of output and saving printed lines on terminal after exit. </s> pstree | grep MDSImporte | less -SEX
Find files with size more than 200557600B and which are more than 2 days old under  ${userdir}/${i}/incoming directory and remove them </s> find ${userdir}/${i}/incoming -mtime +2 -type f -size +200557600c -exec rm {} \;
Find all directories under /home/username/public_html/sites/all/modules and set their permission to 750 </s> find /home/username/public_html/sites/all/modules -type d -exec chmod 750 {} +
Find all the Sticky Bit set files whose permission are 551 in the file system </s> find / -perm 1551
Print a colon-separated list of all directories from the ~/code directory tree </s> find ~/code -type d | tr '\n' ':' | sed 's/:$//'
Print the entire saved command history </s> history
Raise an error if there is a reference to a non-existent environment variable and exit the shell immediately if there is any error </s> set -eu
Recursively set all permissions under "/opt/lampp/htdocs" to 755 </s> sudo chmod 755 -R /opt/lampp/htdocs
Set environment variables using assignments are listed in '.env' file and run 'rails' command with defined environment </s> env $(cat .env | xargs) rails
Assign permissions 755 to directories in the current directory tree </s> find . -type d -print0 | xargs -0 chmod 755
Save absolute path of "$path" that may not exist to variable "abspath" </s> abspath=$(readlink -m $path)
Find all files in the home directory tree that are owned by another user </s> find ~ ! -user ${USER}
display a long listing of all regular files  in current folder which have been modified in the last 60 minutes </s> find . -mmin -60 -type f -ls
Number each line in "/etc/passwd" as right-justified zero padded to a width of 9 </s> nl -nrz -w9  /etc/passwd
Make directories for each line in "folder_list.txt" </s> cat folder_list.txt | xargs mkdir
find all the files in the folder /opt which have been accessed exactly 20 days ago </s> find /opt -atime 20
execute a command in 10 seconds </s> true | sleep 10
Recursively copies everything from '/source/path/*' to the '/destination/path/', preserving from overwriting existing files, and printing info message on each operation. </s> cp -Rvn /source/path/* /destination/path/
For each line in 'file', print "result = " followed by the line backwards. </s> rev file | awk '{print "result =",$0}'
Find all PHP files under current directory that contain only one line </s> find . -type f -name '*.php' -exec wc -l {} \; | egrep "^\s*1\s"
Search the current directory tree for files whose name is ".note", case insensitive </s> find . -iname '.note' | sort
Deletes folder like /tmp/*/* or deeper, older than +7 days if they don`t contain files or other folders. </s> find /tmp/*/* -mtime +7 -type d -exec rmdir {} \;
find all regular files under the /etc/sysconfig directory that were accessed in the last 30 minutes </s> find /etc/sysconfig -amin -30 -type f
Create intermediate directories as required directory{1..3} and subdirectory{1..3} and directories subsubdirectory1 and subsubdirectory2 </s> mkdir -p directory{1..3}/subdirectory{1..3}/subsubdirectory{1..2}
List all files except for those in directory SCCS </s> find . -print -o -name SCCS -prune
Calculate the md5sum of the executable file of command "cc" </s> md5sum $(which cc)
Find the top 5 biggest files </s> find . -type f -exec ls -s {} \; | sort -n -r | head -5
Find all files/directories named 'game' under current directory tree </s> find . -name game
Saves date of the first Sunday in month $mo of year $yo in the 'do' variable. </s> do=$(cal -m $mo $yo|awk 'NR>2&&!/^  /{print$1;exit}')
Search the current directory tree for regular files changed on the 10th of September </s> find ./ -type f -ls |grep '10 Sep'
Read one character from standard input into variable "REPLY" </s> read -n 1 -r
Finds matched text in defined path recursively, but not follows symlinks. </s> grep -r "string to be searched"  /path/to/dir
Merge colon-separated information from file1 and file2 where first field of both files matches </s> join -t: <(sort file1) <(sort file2)
display all the directories in the folder /path/to/dest except tmp and cache directories </s> find /path/to/dest -type d \( ! -name tmp \) -o \( ! -name cache \) -print
Read a single character from standard input into variable "REPLY" ignoring backslash escapes and using the prompt "${1:-Continue?} [y/n]: " </s> read -r -n 1 -p "${1:-Continue?} [y/n]: " REPLY
find the top 25 files in the current directory and its subdirectories </s> find . -type f -exec ls -al {} \; | sort -nr -k5 | head -n 25
lists txt or html files older than 5 days, null separated </s> find . \( -name '*.txt' -o -name '*.html' \) -mtime +5 -print0
search for the file foo.txt in the entire file system </s> find / -name foo.txt
Find all files/directories with '.js' extension under current directory tree without descending into './directory' </s> find . -path ./directory -prune -o -name '*.js' -print
Split the output of "tar [your params]" into files of at most 500 MiB in size and use prefix "output_prefix" </s> tar [your params] |split -b 500m - output_prefix
search for version in system.info files. </s> find /home/*/public_html/ -type f -iwholename "*/modules/system/system.info" -exec grep -H "version = \"" {} \;
Lists all files in a current folder, separating names with comma. </s> ls | xargs -I {} echo {}, | xargs echo
find files in the current directory and sub-directories, that were accessed within last hour </s> find -amin -60
change owner of the file /home/bob to user root </s> sudo chown root /home/bob
Search for .bam files anywhere in the current directory recursively </s> find . -name "*.bam"
Find file `foo.bar' and delete it </s> find /home -name foo.bar -type f -exec rm -f "{}" ';'
Count total number of lines in all *txt files  in current directory </s> wc -l `find . -type f -name '*.txt' `
Opens gcc info manual and goes to a node pointed by index entry "funroll-loops". </s> info gcc --index-search=funroll-loops
List all files in maximum 2 levels down the current directory </s> find . -maxdepth 2  -type f -print0 | xargs -0 -n1 ls -l
Find all files under current directory and show their file information </s> find . -type f -exec file {} \;
Remove all "core" files that were last changed more than 4 days ago from the current directory tree </s> find . -name core -ctime +4 -exec /bin/rm -f {} \;
Find all files/directories named 'foo' in the entire filesystem </s> find / -name foo
Print sed commands that would replace all occurrences of 'previousword' with 'newword' in all regular files with '.cpp' extension under '/myprojects' directory tree </s> find /myprojects -type f -name '*.cpp' -print0 |    xargs -0 echo sed -i 's/previousword/newword/g'
Add "new." to the beginning of the name of "original.filename", renaming it to "new.original.filename". </s> rename 's/(.*)$/new.$1/' original.filename
Look for all files whose names match pattern 'my*' </s> find / -name 'my*'
Find all files in the current directory tree that were last changed $minutes minutes ago </s> find . -cmin $minutes -print
List all files in entire file system that belong to the user wnj or modified later than the ttt file </s> find / \( -newer ttt -or -user wnj \) -print
Find and show all files in the current directory tree that are exactly 2000 kB </s> find . -size 2000k
Read a line from standard input with prompt "Enter your choice: ", arrow keys enabled, and "yes" as the default input, and save the response to variable "choice" </s> read -e -i "yes" -p "Enter your choice: " choice
find all files beneath the current directory that begin with the letters 'Foo' and delete them. </s> find . -type f -name "Foo*" -exec rm {} \;
Archive "/media/Incoming/music/" to "/media/10001/music/" on host "server" and skip files that are newer in the destination, delete any files in the destination not in the source, and compress data during transmission </s> rsync -avzru --delete-excluded /media/Incoming/music/ server:/media/10001/music/
Save absolute path of "$path" that must exist along with all parents to variable "abspath" </s> abspath=$(readlink -e $path)
use find -exec with multiple commands regardless of their success or failure </s> find . -name "*.txt" \( -exec echo {} \; -o -exec true \; \) -exec grep banana {} \;
Simulate a full login </s> su -
Report file system containing the current directory disk usage in kilobytes. </s> df -k .
find .gif files in /var/www and below that were last changed between 90 and 180 days ago </s> find /var/www -name *.gif -ctime +90 -ctime -180
Search for the regex "\$wp_version =" in all the regular files that end with '/wp-includes/version.php' (case insensitive) in their paths in directories/files taken from the glob pattern '/var/www/vhosts/*/httpdocs' and show the matched lines along with the file names </s> find /var/www/vhosts/*/httpdocs -type f -iwholename "*/wp-includes/version.php" -exec grep -H "\$wp_version =" {} \;
Make directory "dirname" with permissions set to 777 </s> mkdir -m 777 dirname
find all files in the current folder that are modified exactly 2 minutes ago </s> find -mmin 2 -print
Number each line in "foobar" as right-justified zero padded to a width of 9 </s> nl -nrz -w9 foobar
Prints all child processes of a process with id 20238, separated with comma. </s> pstree -p 20238 | sed 's/(/\n(/g' | grep '(' | sed 's/(\(.*\)).*/\1/' | tr "\n" ,
Find files in the current directory recursively that are not readable by all </s> find -type f ! -perm -444
Recursively copy all ".txt" files to "user@remote.machine:/tmp/newdir/" </s> rsync -rvv *.txt user@remote.machine:/tmp/newdir/
Find all *.m4a files/directories under /home/family/Music directory </s> find /home/family/Music -name '*.m4a' -print0
Find regular files under '/somefolder' directory tree satisfying the options/conditions/operations provided in ${ARGS[@]} array with find command </s> find /somefolder -type f '(' "${ARGS[@]}" ')'
Print yesterday's date as yyy:mm:dd </s> date +%Y:%m:%d -d "yesterday"
Find all .bak files starting from the current directory and delete them </s> find . -iname "*.bak" -type f -print | xargs /bin/rm -f
Find all files named "filename" </s> find -name "filename"
delete all the ".doc" files in the current folder </s> find . -name '*.doc' -exec rm "{}" \;
Compress all *.img files using bzip2 </s> find ./ -name "*.img" -exec bzip2 -v {} \;
find all the text files in the current folder starting with "somefiles-" </s> find . -name "somefiles-*-.txt" -type f
Force create a symbolic link named "$*" to the canonical absolute path of "$1" </s> ln -sf "$(readlink -f "$1")" "$*"
Replace all spaces with underscores in directory paths under current directory. </s> find -name "* *" -type d | rename 's/ /_/g'
change the permissions of all regular/normal files in the file system </s> chmod 640 `find ./ -type f -print`
Print the current directory </s> find -prune
Search /usr/local for subdirectories whose names end with a number 0-9 </s> find /usr/local -maxdepth 1 -type d -name '*[0-9]'
display the commands to force delete all jpg files in current directory which are less than 50KB and do not search in the sub directories </s> find . -maxdepth 1 -name "*.jpg" -size -50k | xargs echo rm -f
Find all files/directories that are owned by user 'takuya' under current directory tree </s> find -user takuya
Find all regular files under current directory tree and replace all '1.2.3.4' with '5.6.7.8' in these files modiying the files in-place </s> find . -type f -exec sed -i "s/1\.2\.3\.4/5.6.7.8/g" {} \
display the manual page of find </s> man find
Print the first line of output after alphabetically sorting the file "set" </s> head -1 <(sort set)
Create the directory '.npm-global' in the user's home directory(~). </s> mkdir ~/.npm-global
Search the *.code files from the current directory tree for string 'pattern' </s> find . -name '*.code' -exec grep -H 'pattern' {} +
change the permissions of all regular/normal files in the current directory </s> find . -type f -exec chmod 664 {} \;
Find all files in entire file system which are larger than 20000KB and show file name/path followed by its size </s> find / -type f -size +20000k -exec ls -lh {} \; | awk '{ print $8 ": " $5 }'
Change the owner of "/var/www/html/mysite/images/" to "nobody" </s> sudo chown nobody /var/www/html/mysite/images/
find md5sum of an empty string </s> echo -n '' | md5
Gets IP address of 'en1' network interface. </s> ifconfig en1 | sed -n '/inet addr/s/.*addr.\([^ ]*\) .*/\1/p'
For each line which has a common first field in file1.csv and file2.txt, output the first 4 fields of file1.csv - both files must be sorted first. </s> join -o 1.1,1.2,1.3,1.4 -t, file1.csv file2.txt
Delete all files in the /myDir directory tree that were last modfied 7 days ago </s> find /myDir -mindepth 1 -mtime 7 -exec rm -rf {} \;
Display a count of regular files in each directory at the current level. </s> find -P . -type f | rev | cut -d/ -f2- | rev | cut -d/ -f1-2 | cut -d/ -f2- | sort | uniq -c
Print a count of each unique line in "ip_addresses" </s> sort ip_addresses | uniq -c
List all files under current directory matching the regex '.*(c|h|cpp)$' </s> find -E . -type f -regex '.*(c|h|cpp)$' -exec ls {} \;
Forward port 16186 on hello.com to 8888 on localhost using private key "privatekeystuffdis88s8dsf8h8hsd8fh8d" for login </s> ssh -N -i <(echo "privatekeystuffdis88s8dsf8h8hsd8fh8d") -R 16186:localhost:8888 hello.com
display list of all the hidden files in the home folder </s> find $HOME -name ".*" -ls
Eliminates partially duplicate lines by column, keeping the last occurrence </s> tac temp.txt | sort -k2,2 -r -u
Find all catalina* files/directories under current directory </s> find -name 'catalina*'
find all regular/normal files in the folder "myfiles" which have read and write permission to the other users </s> find /myfiles -type f -perm -o+rw
Locate all *.csv files under the current directory tree separating the file names with zeroes </s> find . -name "*.csv" -print0
Remove all directories called "test" from the current directory tree </s> find . -name test -type d -print0|xargs -0 rm -r --
Remount "extX" filesystem "/dev/hdaX" on "/" without writing in "/etc/mtab" </s> mount -n -o remount -t extX /dev/hdaX /
Traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt. </s> find /       \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \( -size +100M -fprintf /root/big.txt  '%-10s %p\n' \)
Counts lines of /etc/fstab file. </s> cat /etc/fstab | wc -l
Calculate md5 sum of file ${my_iso_file} and save it to variable 'md5' </s> md5="$(md5sum "${my_iso_file}")"
Search the .java files from the current directory tree for TODO lines </s> find . -name "*.java" -exec grep -Hin TODO {} \;
Copy the executable "python2.7" in $PATH to "myenv/bin/python" </s> cp `which python2.7` myenv/bin/python
Overwrites file $FILE with random content, then truncates and deletes it. </s> shred -u $FILE
create directory /tmp/new </s> mkdir /tmp/new
Find all files/directories under current directory tree whose paths match the regex 'filename-regex.\*\.html' </s> find . -regex filename-regex.\*\.html
Find all files with '.txt' (case insensitive) extension under $dir directory non-recursively and sort them numerically </s> find "$dir" -maxdepth 1 -type f -iname '*.txt' | sort -n
Remove junk files modified more than 31 days ago recursively </s> find /path/to/junk/files -type f -mtime +31 -print0 | xargs -0 -r rm -f
Search for aaa in all files under current directory and count the number of matches </s> find . -type f -exec grep -o aaa {} \; | wc -l
search for files that are readable for everybody, have at least on write bit set but are not executable for anybody </s> find . -perm -a+r -perm /a+w ! -perm /a+x
Find files/directories named 'aaa.txt' under current directory tree </s> find . -name aaa.txt
Save absolute path of "$path" whose parents exist to variable "abspath" </s> abspath=$(readlink -f $path)
Find all regular files under ${S} directory </s> find "${S}" -type f
Print the files in the current directory as a list of comma separated values </s> ls -1 | tr '\n' ','
Find all files under and below the current working directory with the word California in the file, and count the number of lines in the output </s> find . -type f -exec grep California {} \; -print | wc -l
change the permissions of all regular/normal files in the current directory </s> find . -type f | xargs chmod 664
find all the files in the entire file system whose size is exactly 15MB </s> find / -size 15M
Display a long listing of all the files/directories under current directory tree that are newer than the file 'Nov' by modification time </s> find . -newer Nov -ls
Displays calendar for a previous, current and next month. </s> cal -3
find all the files in the current directory which have the size 40 bytes in the current disk partition. </s> find . -size -40 -xdev -print
Removes all files from current folder but 5 newest ones, ignoring folders in a files list. </s> find . -maxdepth 1 -type f | xargs -x ls -t | awk 'NR>5' | xargs -L1 rm
Find all regular .abc files under and below /the/path and rename them prefixing their names with "version_1" </s> find /the/path -type f -name '*.abc' -execdir rename 's/\.\/(.+)\.abc$/version1_$1.abc/' {} \;
Find all files/directories under /myfiles that are 2560 bytes in size </s> find /myfiles -size 5
Gets string with IP4 address of en0 network interface. </s> ifconfig en0 | grep inet | grep -v inet6
Set prompt to the system host name and history number </s> PS1="`hostname`:\!>"
Get the total size of all files under dir1 directory </s> find dir1 ! -type d -printf "%s\n" | awk '{sum += $1} END{print sum}'
Attempt to connect as root to localhost and copy /home/reportuser/dailyReport.doc to directory /root/dailyReports/20150105/ - this will normally fail because ssh won't accept root connections by default. </s> scp -p /home/reportuser/dailyReport.doc root@localhost:/root/dailyReports/20150105/
Search directory tree `MyApp.app' for directories whose name is 'Headers' and delete them </s> find MyApp.app -name Headers -type d -delete
Print the home directory of "$username" </s> finger $username | awk '/^Directory/ {print $2}'
Find all regular files whose names contain a case insensitive pattern composed of space separated positional arguments and display a long listing of them </s> find . -type f -iname '*'"$*"'*' -ls
find all files in the current directory which are bigger than 4MB </s> find . -size +4096k -print
find symbolic links with pattern` '*sysdep.c' </s> find . -lname '*sysdep.c'
Find all broken symlinks under current directory </s> find ./ -type l -exec file {} \; |grep broken
change owner of the files into directory "/mydir" with ".txt" extension to user root </s> find /mydir -type f -name "*.txt" -execdir chown root {} ';'
Find all SUID set files </s> find / -perm /u=s
Find all files/directories named orm.properties under  /eserver6 directory </s> find /eserver6 -name "orm.properties"
search for a word in all the .C files in the current directory </s> find . -name "*.c" -exec grep -ir "keyword" {} ";"
Delete files in /var/tmp/stuff and below that have not been modified in over 90 days </s> find /var/tmp/stuff -mtime +90 -delete
Remove all regular files under '/var/log/remote' directory tree that have not been modified in the last 14 days where day count starts from today </s> find /var/log/remote/ -daystart -mtime +14 -type f -exec rm {} \;
Search for environmental variables with "HIST" in their name or contents </s> set | grep HIST
Shows state of 'globstar' shell option. </s> shopt globstar
Unzip "file.gz" to stdout </s> zcat file.gz
Find all files/directories named 'file1' under current directory tree </s> find . -name file1 -print
Search the current directory tree for files last accessed more than 10 days ago </s> find . -atime +10
List all leaf directories of the current directory tree </s> find . -type d -links 2
Changes group ownership of 'target_directory' to 'target_group'. </s> chgrp target_group target_directory
display all normal/regular files in current folder which have readable permission </s> find . -type f -readable
Recursively finds all 'STATUS.txt' files containing text 'OPEN' and prints containing folder of them. </s> fgrep --include='STATUS.txt' -rl 'OPEN' | xargs -L 1 dirname
Sort content of files 'file1' and 'file2' by second of dot-separated fields. </s> cat file1 file2 |sort -t. -k 2.1
Create a compressed archive from "www" and split the contents into files of at most 1073741824 bytes and use prefix "www-backup.tar." </s> tar czf - www|split -b 1073741824 - www-backup.tar.
Prints name of temporary file but doesn`t create nothing. </s> mktemp -u
find all the files in current directory of size smaller than 10KB. </s> find . -size -10k
Save the network node hostname append with '-', the current date and '.txt' into variable 'filename' </s> filename="$(uname -n)-$(date +%F).txt"
Write "deb blah ... blah" to standard output and append to "/etc/apt/sources.list" as root </s> echo 'deb blah ... blah' | sudo tee --append /etc/apt/sources.list
Archive "/usr/local/" to "/BackUp/usr/local/" on host "XXX.XXX.XXX.XXX" via ssh and show progress </s> rsync --progress -avhe ssh /usr/local/  XXX.XXX.XXX.XXX:/BackUp/usr/local/
Recursively search for all files with names ending with "_test.rb", renaming them to end with "_spec.rb". </s> find . -name "*_test.rb" | xargs rename s/_test/_spec/
Find files/directories named 'sar' under '/usr', '/bin', '/sbin' and '/opt' directory tree </s> find /usr /bin /sbin /opt -name sar
Find all files that belongs to group Developer under /home directory </s> find /home -group developer
Find recursively the files named "file" in the current directory ignoring the .git subdirectory </s> find . -path ./.git  -prune -o -name file  -print
Sends current job to the background. </s> bg
get md5sum of an iso file without displaying the filename, save value to 'md5' variable </s> md5=`md5sum ${my_iso_file} | awk '{ print $1 }'`
Find all PHP files in the current directory recursively </s> find . -name \*.php -type f
Change the permissions of all regular files whose names end with .mp3 in the directory tree /var/ftp/mp3 </s> find /var/ftp/mp3 -name '*.mp3' -type f -exec chmod 644 {} \;
Make directories to "x/p/q" as needed </s> mkdir -p x/p/q
Find files and directories with group id 1003 </s> find . -gid 1003
Unsets 'history' shell option. </s> shopt -u -o history
Find the password file between sub-directory level 2 and 4. </s> find -mindepth 3 -maxdepth 5 -name passw
Print a colon-separated list of all directories from the $root directory tree </s> find $root -type d | tr '\n' ':'
find all files in the current folder which are bigger than 10bytes </s> find . — size +10 -print
display all file in the home folder except ".c" files </s> find $HOME -not -iname "*.c" -print
Count all the lines of all files with names ending with 'php' in current directory recursively </s> find -name '*php' | xargs cat | wc -l
Count the number of files in the /usr/ports directory tree whose names begin with 'pkg-plist' and which contain 'unexec.rmdir%D' </s> find /usr/ports/ -name pkg-plist\* -exec grep 'unexec.rmdir %D' '{}' '+' | wc -l
List all nfs mount points on the system </s> mount -l | grep 'type nfs' | sed 's/.* on \([^ ]*\) .*/\1/'
Find all files/directories with '.o' extension under '/lib/modules' directory tree </s> find /lib/modules -name '*.o'
display all symbolic links in current folder </s> find . -lname "*"
Find & calculate total number of caractor  in all .txt file from current directory </s> find .  -type f  -name '*.txt' -exec wc -c {} \; | awk '{total += $1} END{print total}'
Find recursively the latest modified file in the current directory </s> find . -type f -print0|xargs -0 ls -drt|tail -n 1
Output all lines from file1 except those present in file2, assuming both files are sorted. </s> diff file2 file1 | grep '^>' | sed 's/^>\ //'
Search the /Path directory tree for files matching pattern "file_name*" </s> find /Path -name "file_name*"
list regular file which file name end with 'cache' 'xml' or 'html' in current directory </s> find . -type f \( -name "*cache" -o -name "*xml" -o -name "*html" \)
Find all first occurrences of directories named '.texturedata' under '/path/to/look/in' directory tree </s> find /path/to/look/in/ -type d -name '.texturedata' -prune
print all files in the directories except the ./src/emacs directory </s> find . -wholename './src/emacs' -prune -o -print
Source executable "virtualenvwrapper.sh" found in $PATH </s> source `which virtualenvwrapper.sh`
Find all regular files starting from level 3 of directory tree ~/container and move them to the current directory's parent </s> find ~/container  -mindepth 3 -type f -exec mv {} .. \;
Replace "_" with newlines in "Testing\r\nTested_Hello_World" and display the named characters </s> echo -e "Testing\r\nTested_Hello_World" | awk -v RS="_" '{ print $0; }' | od -a
find all the files in the current folder which have been modified in the last one day </s> find . -daystart -mtime -1 -ls
display all file in the folder /dir/to/search except ".c" files </s> find /dir/to/search/ -not -name "*.c" -print
find all the files which start with the name "Metallica" in the folder "/mp3-collection" and which are bigger than 10MB </s> find /mp3-collection -name 'Metallica*' -and -size +10000k
Print received input to the terminal </s> tee
Extract 8 bytes as an unsigned integer that is "$o" offset into "$rpm" </s> set `od -j $o -N 8 -t u1 $rpm`
Replace "foo" with "bar" in all files in the current directory tree </s> find . | xargs sed -i ‘s/foo/bar/g’
display all the jars in the current folder </s> find . -iname '*.jar'
search for a word in all the php files in the current folder and display the count of all matching lines. </s> find . -name \*.php -type f -exec grep -Hn '$test' {} \; | wc -l
Calculate the md5 sum of all files in the current directory with the filename printed first </s> find -maxdepth 1 -type f -exec md5sum {} \; | awk '{s=$2; $2=$1; $1=s;}1'
Counts lines in each *.php file. </s> wc -l $(find . -name "*.php")
Find all the files which are modified in last 1 hour </s> find / -mmin -60
Filters only directories from long file listing of the current directory </s> ls -l --color=always "$@" | grep --color=never '^d'
Set permissions for files in `foldername' to 777 </s> find foldername -exec chmod a+rwx {} ";"
remove all core files in the file system </s> find / -name "*.core" | xargs rm
Gets the groups these users belong to. </s> groups a b c d
Find find symlinks pointing to /mnt/oldname* in the entire file system </s> find / -type l -lname '/mnt/oldname*'
Split "$ORIGINAL_FILE" into files of at most "$MAX_LINES_PER_CHUNK" lines each with a prefix "$CHUNK_FILE_PREFIX" </s> split -l $MAX_LINES_PER_CHUNK $ORIGINAL_FILE $CHUNK_FILE_PREFIX
Recursively lists all files in a current folder in long format, sorting by modification time. </s> ls -ldt $(find .)
Move each of the 'm?' directories in $path_to_folders to another directory whose name is constituted by appending .mbox to each directory name and create a directory named Messages in this directory then move all *.emlx files into this directory </s> find "$path_to_folders" -name 'm?' -type d -exec mv {} {}.mbox \; -exec mkdir {}.mbox/Messages \; -exec sh -c "mv {}.mbox/*.emlx {}.mbox/Messages" \;
Delete all empty directories and directories that contain only empty directories under current directory </s> find -type d -empty -exec rmdir -vp --ignore-fail-on-non-empty {} +
Search for Subscription.java under current directory, and go to directory containing it. </s> cd "$(find . -name Subscription.java -printf '%h\n')"
Read a line of standard input with prompt "My prompt: " and save it to variable "varname" </s> read -e -p "My prompt: " varname
Remove files that are greater than 1MB in size under current directory </s> find . -type f -size +1M -exec rm {} +
Finds strings with text "searched-string" recursively in all files of current folder. </s> grep -r "searched-string" .
Search the files from the current directory tree for "foo" </s> find . -exec grep foo {} +
Prints only unique strings of those stored in variables $COMMANDS and $ALIASES. </s> echo "$COMMANDS"$'\n'"$ALIASES" | sort -u
Search the current directory tree for symlinks pointing at other symlinks </s> find . -type l -xtype l
display all the normal/regular files in the directory FOLDER1 </s> find FOLDER1 -type f -print0
Recursively copy local file/directory "/copy/from/path" to remote location "/copy/to/path" on host "server", connecting as ssh user "user" and using identity key file "/path/to/your/.pemkey" instead of the default in ~/.ssh/ </s> scp -i /path/to/your/.pemkey -r /copy/from/path user@server:/copy/to/path
List all empty files in the current directory tree </s> find . -empty -exec ls {} \;
Count total number of lines in all files below current directory. </s> find . -type f -exec wc -l {} \; | awk '{ SUM += $0} END { print SUM }'
Find all Makefile's in the current directory tree and print the line 235 of each of them </s> find . -type f -name Makefile -print -exec sed -n '235p' {} \;
change the group of all directories in the current folder </s> find . -type d -exec chgrp usergroup {} \;
Display an infinite number of lines consisting of "y", until the user presses the Q key. </s> yes | cat | more
split the file "/path/to/large/file" into pieces per 50000 lines named as /path/to/output/file/prefixNNN </s> split --lines=50000 /path/to/large/file /path/to/output/file/prefix
Find files/directories in entire file system newer than myfile </s> find / -newer myfile
Write out the entire directory hierarchy from the current directory </s> find .
Find all the .c files in the current directory tree that contain the string ‘stdlib.h’ </s> find . -name '*.c' | xargs grep 'stdlib.h'
Copy "src/prog.js" and "images/icon.jpg" to "/tmp/package/" keeping relative path names </s> rsync -Rv src/prog.js images/icon.jpg /tmp/package/
Find all file which have more the 2 hard link </s> find .  -type f -links +2 -exec ls -lrt {} \;
Find all files/directories named 'photoA.jpg' under current directory tree </s> find . -name photoA.jpg
Find files/directories with inode number '212042' under '/var' directory tree without traversing other devices/partitions </s> find -x /var -inum 212042
delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename ".svn" </s> find . -iname .svn -exec rm -rf {} \;
Find all files under current directory and print only the filenames (not paths) </s> find . -type f -printf "%f\n"
display all files in the directory "dir" which have been accessed in the last 60 minutes </s> find /dir -amin -60
Find all empty directories in minimum 2 levels down the root directory </s> find root -mindepth 2 -type d -empty
Records the number of occurences of 'needle' in the array 'haystack' into the variable 'inarray' </s> inarray=$(echo ${haystack[@]} | grep -o "needle" | wc -w)
display all instances of the .profile file in the entire file system </s> find / -name .profile -print
verbosely create intermediate directoriy tmp as required and directory boostinst </s> mkdir -pv /tmp/boostinst
List file contents of compressed file 'compressed.tar.gz' </s> gzip -l compressed.tar.gz
Print the files to which symbolic links in the current directory point </s> find . -type l -print | xargs ls -ld | awk '{print $10}'
Find all symbolic links containing 'vim' in their names uder '/usr/bin' directory tree </s> find /usr/bin -name '*vim*' -type l
Gets list of IP addresses of all network interfaces. </s> ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'
Gets MAC address of eth0 network interface. </s> ifconfig eth0 | grep -Eoi [:0-9A-F:]{2}\(\:[:0-9A-F:]{2}\){5}
display all files in current folder ending with "~" or "#" using regular expression </s> find -regex "^.*~$\|^.*#$"
Search all regular files in the current directory for "example" </s> find -maxdepth 1 -type f | xargs grep -F 'example'
find Texinfo source files in /usr/local/doc </s> find foo -path foo/bar -print
list all samba files in /var/l* directory ( /var/lib or /var/log ) </s> find  /var -path */l??/samba*
find for xml files in current folder using regular expressions </s> find ./ -regex "cmn-.*[\x4e00-\x9fa5]*\.xml"
Search the entire file hierarchy for files ending in '.old' and delete them. </s> find / -name "*.old" -delete
Find all files/directories named 'apt' in the entrie filesystem </s> find  / -name "apt"
Prints process tree of a process having id $ID with parent processes. </s> pstree -s $ID
Count the number of unique duplicate lines in "file1" and "file2" combined </s> sort file1 file2 | uniq -d | wc -l
Find all the regular files with '.tgz' and '.gz' extensions and delete the oldest file under '/home/backups' directory tree </s> find /home/backups -type f \( -name \*.tgz -o -name \*.gz \) -print0 | xargs -0 ls -t | tail -1 | xargs rm
Find all files under images directory </s> find images -type f
Find all directories under /var/www/some/subset and set their SGID bit </s> sudo find /var/www/some/subset -type d -print0 | xargs -0 chmod g+s
Search the home directory tree for files owned by sam </s> find /home -user sam
Print line, word and byte count for each file recursively and also show the total counts </s> wc `find`
display all regular files in the folder image-folder </s> find image-folder/ -type f
find the file "filename.txt" in the usr folder </s> find /usr -name filename.txt -print
Print common files of directory "one" and "two" </s> comm -12  <(ls one) <(ls two)
Print a minimal set of differences between files in directories "a" and "b", ignore differences in whitespace, and print 0 lines of unified context </s> diff -dbU0 a b
Print all lines of "seq 10" except the last 3 </s> seq 10 | tac | sed '1,3d' | tac
Find all Subscription.java files/directories under current directory and enter into the parent directory of the first one found </s> cd $(find . -name Subscription.java | xargs dirname)
Go to last directory with name starting with a number, useful for timestamped directory names. </s> cd "$(ls -rd [0-9]*/ | tail --lines 1)"
Decompress and extract '/usr/src/redhat/SOURCES/source-one.tar.gz' </s> gzip -dc /usr/src/redhat/SOURCES/source-one.tar.gz | tar -xvvf -
Search the current directory tree for regular files omitting directory `omit-directory' </s> find . \( -name omit-directory -prune \) -o \( -type f -print \)
Print the number of lines for each *.txt file from the $DIR directory tree </s> find $DIR -name "*.txt" -exec wc -l {} \;
Find *.java files under current directory and compress them to myfile.tar </s> find . -type f -name "*.java" | xargs    tar rvf myfile.tar
Locate all *.csv regular files under the current directory tree </s> find . -type f -name "*.csv"
Connect to host "${HOSTNAME}" as user "${USERNAME}" and execute "${SCRIPT}" non-interactively </s> ssh -l ${USERNAME} ${HOSTNAME} "${SCRIPT}"
Create a symbolic link named "$tmpdir/bam" to the full path of command "bam2" found in "$PATH" </s> ln -s "$(which bam2)" "$tmpdir"/bam
list the regular files in your home directory that were modified yesterday </s> find ~/ -daystart -type f -mtime 1
delete all the files in the current folder </s> find . -delete
Make a new directory "new-dir" in every directory in the current working directory non-recursively </s> find . -maxdepth 1 -type d | xargs -I "{x}" mkdir "{x}"/new-dir
Save the full path of command "~/f" to variable "foo" </s> foo=`which ~/f`
List all regular files under current directory (not white space sage) </s> find . -type f -print | xargs -n 1
Sort the contents of file "ips.txt", eliminate duplicate entries, and prefix each entry with number of occurrences. </s> sort ips.txt | uniq -c
Set the 'xtrace' shell option </s> set -o xtrace
Search /etc for files modified within the last 10 minutes </s> find /etc -type f -mmin -10
Print a line of 100 random characters either "." or " " </s> cat /dev/urandom | tr -dc '. ' | fold -w 100 | head -1
Creates temporary folder in a $temp_dir folder with name pattern defined by $template, and stores path to created folder in 'my_temp' variable. </s> $ my_temp_dir=$(mktemp -d --tmpdir=$temp_dir -t $template)
Replace each non-blank line in "YOURFILE" preceded with "pX=" where "X" is the line number </s> grep -v '^$' YOURFILE | nl -s= -w99 | tr -s ' ' p
Check if current system is running in 64-bit addressing. </s> uname -m | grep '64'
Display inputfile all on one line (replace newlines by spaces) </s> awk '{printf "%s|", $0} END {printf "\n"}' inputfile
Save a nginx link to "/path/to/file" with the current user and system FQDN host name in variable "path" </s> path="http://$(whoami).$(hostname -f)/path/to/file"
search for all the files in the current directory which have the name a.out or core or which end with .o and delete them. </s> find . \( -name a.out -o -name '*.o' -o -name 'core' \) -exec rm {} \;
Find all OGG files in the home directory that are at most 20 megabytes in size </s> find $HOME -iname '*.ogg' ! -size +20M
Find files that have a modification time of a day ago </s> find / -mtime 1
Findx all files having text "texthere" recursively in a current folder, and prints only file names with matching strings. </s> find -type f -exec grep -l "texthere" {} +
Gets IP addresses of all active network interfaces on host. </s> ifconfig | awk -F':' '/inet addr/&&!/127.0.0.1/{split($2,_," ");print _[1]}'
Print lines 10000 to 10010 from input "seq 1 100000" </s> seq 1 100000 | sed -n '10000,10010p'
Search the current directory tree for files modified less than 5 days ago </s> find . -mtime -5
change the permissions of all the directories in the folder "/path/to/someDirectory" to 755 </s> sudo find /path/to/someDirectory -type d -print0 | xargs -0 sudo chmod 755
Find all files/directories under current directory with 'foobar' (case insensitive) in their names and copy them to ~/foo/bar </s> find . -iname "*foobar*" -exec cp "{}" ~/foo/bar \;
Display the content of file "f" in home directory if it exists and is executable </s> cat `which ~/f`
Find files/directories under current directory and print them as null terminated strings. </s> find -print0
Print the file sizes along with their paths for all *.txt (case insensitive) files/directories under current directory tree </s> find . -name "*.txt" -print0 |xargs -0 du -ch
find the file arrow.jpg in the entire file system </s> find / -name arrow.jpg
Finds out what groups a given user has. </s> groups user
Search for files only that end with .php and look for the string $test inside those files </s> find . -name \*.php -type f -exec grep -Hn '$test' {} \;
Recursively finds all files with any cased text "Text" in a current folder, and precedes found string with its number in file. </s> grep -inr "Text" folder/to/be/searched/
Change all file permissions to 664 and all directory permissions to 775 in directory tree "htdocs" </s> find htdocs -type f -exec chmod 664 {} + -o -type d -exec chmod 775 {} +
Make directories "a", "b", "c", "d", and "e" </s> mkdir a b c d e
Find all files whose owner is `user1' </s> find / -user user1
Lists content of the current folder. </s> $ ls
find all gif files in the file system </s> find / -name "*gif" -print
Find all regular files on the system whose size is greater than 20000k and print their names and sizes </s> find / -type f -size +20000k -exec ls -lh {} \; | awk '{ print $8 ": " $5 }'
Search for 'whatIWantToFind' in all files under current directory </s> find . -exec grep whatIWantToFind {} \;
Find all .java files starting from the current folder </s> find . -name "*.java"
display all the empty files in the current folder( files of size 0 bytes) </s> find . -empty
display all the doc files in the current folder ( files ending with ".doc" ) </s> find . -name '*.doc'
Print a list of symbolic links reachable from the current directory that do not resolve to accessible files </s> find -L. -type l
display all the regular files in current folder excluding all the directories and all the sub directories having "normal" in their name </s> find . \( \( -path "\.?.*" -type d \) -o -path "*normal*" \) -prune -o \( -type f \) -print
Recursively changes group ownership of everything in a '/home/user1/project/dev' folder to 'project_dev'. </s> chgrp -R project_dev /home/user1/project/dev
Move all files and directories in the current directory to "/tmp/blah/" </s> mv * /tmp/blah/
find not case sensitive all directories that names are 'apt' and display details </s> find  / -type d -iname "apt" -ls
Resolve symbolic link of path of "python2.7" </s> readlink $(which python2.7)
Removes 5 oldest files in the current folder. </s> ls -t *.log | tail -$tailCount | xargs rm -f
Find all *.dbf files/directories in entire file system </s> find / -name "*.dbf"
List all files in /home/bozo/projects directory tree that were modified exactly one day ago </s> find /home/bozo/projects -mtime 1
Find all files/directories named 'testfile.txt' under current directory tree </s> find . -name testfile.txt
Send two ping requests to "www.google.com" </s> ping -c 2 www.google.com
Prints message info about filename and location of the current script </s> echo "The script you are running has basename `basename $0`, dirname `dirname $0`"
Find all directories under '.cache/chromium/Default/Cache' that are bigger than 100 MB in size excluding single letter directory names </s> find .cache/chromium/Default/Cache/ -type d -print0 | du -h | grep '[0-9]\{3\}M' | cut -f2 | grep -v '^.$'
List the files from the current directory tree that contain lines matching regular expression  '^Subject:.*unique subject' </s> find . -type f -print | xargs grep -il '^Subject:.*unique subject'
Find all *.tex regular files under current directory </s> find . -type f -name "*.tex"
Find all files that were not accessed in the past 100 days </s> find /home -atime +100
Search for the query "filename" in the current directory and any subdirectories </s> find -iname "filename"
SSH into "myhost.com" as user "myname" with a check every 60 seconds that the server is still alive </s> ssh -o ServerAliveInterval=60 myname@myhost.com
List each unique character in "file" prefixed by number of occurrences </s> grep -o . file | sort | uniq -c
Enables shell option 'promptvars'. </s> shopt -s promptvars
list all the sqlite files in the current folder </s> find ./ -name "*.sqlite" -ls
recursively change owner of the directory /Users/xxx/Library/Developer/Xcode/Templates and all files to user xxx </s> sudo chown -R xxx /Users/xxx/Library/Developer/Xcode/Templates
search for the files in the current folder which begin with the word "kt" followed by a digit </s> find . -name 'kt[0-9] '
find  files which full path name is /tmpfoo/bar under /tmp/foo directory and print </s> find /tmp/foo -path /tmp/foo/bar -print /tmp/foo/bar
display all the normal/regular files in the current folder which are empty </s> find . -type f -empty
search for the word "mysql" in all the files in the current containing the word "notes" in their name </s> find . -iname "*notes*" | xargs grep -i mysql
Remove the regular files from the current directory tree that are newer than /tmp/date.start but not newer than /tmp/date.end </s> find ./ -type f -newer /tmp/date.start ! -newer /tmp/date.end -exec rm {} \;
Find all files/directories named file in 2 and 3 levels down the current directory </s> find -mindepth 2 -maxdepth 3 -name file
Give all directories in the /path/to/base/dir tree read and execute privileges </s> find /path/to/base/dir -type d -print0 | xargs -0 chmod 755
Archive the list of 1st level subdirectories in /fss/fin to /fss/fi/outfile.tar.gz </s> tar -czf /fss/fi/outfile.tar.gz `find /fss/fin -d 1 -type d -name "*" -print`
Add "prefix" to every non-blank line in "file.txt" </s> nl -s prefix file.txt | cut -c7-
search for directories in the folder "test" which end with 5 digits using regular expressions </s> find ./test -regextype posix-egrep -type d -regex '.*/[0-9]{5}$'
change the group of all the files in the folder /u/netinst/ to staff </s> find /u/netinst -print | xargs chgrp staff
