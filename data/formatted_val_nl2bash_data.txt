Make directory "backup" </s> mkdir backup
Find all directories under current directory and set read-write-execute permission for owner, read-execute permission for group and execute permission for other for those directories </s> find . -type d -exec chmod u=rwx,g=rx,o=x {} \;
Change permissions to u=rwx,g=rx,o= for all directories in the current directory tree </s> find . -type d -exec chmod u=rwx,g=rx,o= '{}' \;
Creates temporary file with name formatted like '.script.XXXXXX' in '/tmp/' folder and saves path to it in 'script2' variable. </s> script2=`mktemp /tmp/.script.XXXXXX`;
Force delete all jpg files in current directory which are less than 50KB and do not search in the sub directories </s> find . -maxdepth 1 -name "*.jpg" -size -50k -exec rm {} \;
Remove all core dump files from user's home directory </s> find ~/ -name 'core*' -exec rm {} \;
Find all regular files in the current directory tree last modified between 1 and 3 days ago and list them using find's -ls option </s> find ./ -daystart -mtime -3 -type f  ! -mtime -1 -exec ls -ld {} \;
Make directories and parents as needed for each file path in "a.txt" excluding the basename for each path </s> cat a.txt | grep / | sed 's|/[^/]*$||' | sort -u | xargs -d $'\n' mkdir -p
Find all regular files under current directory tree that were accessed $FTIME days ago </s> find . -type f -atime $FTIME
Prints current directory name </s> pwd | grep -o "\w*-*$"
Returns unsuccessful exit code on each found file like '*tests*' within current directory. </s> find . -name '*tests*' -print -exec false \;
display all the text files in the current folder  and do not search in the bin directory </s> find . -name bin -prune -o -name "*.txt" -print
Copy all files with name pattern $j.sh (case insensitive) under '/tmp/2' directory tree to $i directory </s> find "/tmp/2/" -iname "$j.sh" -exec cp {} "$i" \;
Calculate the md5 sum of the output of "du -csxb /path" and compare it against the md5 sum saved in "file" </s> du -csxb /path | md5sum -c file
Save actual working directory in variable "target_PWD" </s> target_PWD=$(readlink -f .)
Print the full real path of "/dev/disk/by-uuid/$1" followed by "is not mounted" </s> echo $(readlink -f /dev/disk/by-uuid/$1) is not mounted
Save the directory of the full path to the current script in variable "dir" </s> dir=$(dirname $(readlink -m $BASH_SOURCE))
Find a directory named 'project.images' in the entire filesystem </s> find  / -type d -name "project.images"
Search the /root directory recursively for files named "FindCommandExamples.txt" </s> find /root -name FindCommandExamples.txt
display all file in the folder /dir/to/search except ".c" files </s> find /dir/to/search/ -not -name "*.c" -print
search for "some_function" in all the python files in the current directory </s> find . -name \*.py | xargs grep some_function
Find all files under and below the current working directory with the word California in the file, and count the number of lines in the output </s> find . -type f -exec grep -n California {} \; -print | wc -l
Print common files of directory "one" and "two" </s> comm -12  <(ls one) <(ls two)
Search the current directory tree for regular files changed on the 10th of September </s> find ./ -type f -ls |grep '10 Sep'
find all the files that have been modified today </s> find /tmp/test/* -mtime +0
Print the last 10 lines of '/var/log/syslog', printing out any additional data appended to the file </s> tail -f /var/log/syslog
find files with the extension .conf in the /etc directory </s> find /etc -name '*.conf'
Print the full real path of "/dev/disk/by-uuid/$1" followed by "is mounted" </s> echo $(readlink -f /dev/disk/by-uuid/$1) is mounted
Execute `somecommand' on each file from the current directory tree with the environment variable f set to the filename </s> find . -exec env f={} somecommand \;
Prints Kb size of all top-level files and folders in a current folder in descending order in human readable format. </s> du -ksh * | sort -n -r
Find all files/directories under /myfiles following symlinks if needed </s> find -L /myfiles
Find recursively all regular files in the current directory whose names contain "." </s> find . -type f -a -name '*.*'
Find all files/directories under /home/baumerf/public_html/ that were modified less than 60 minutes ago excluding error_log files/directories </s> find /home/baumerf/public_html/ -mmin -60 -not -name error_log
find all the files in the entire file system which have been modified in the last 48 hours </s> find / -mtime -2 -print
Find out if there are any files on the system owned by user `account' </s> find / -path /proc -prune -o -user account -ls
display all regular/normal files in the current folder that were accessed exactly 7*24 hours back </s> find . -type f -atime 7
Mount "/path/to/device" on "/path/to/mount/location" as a vfat filesystem and a loop back device </s> mount /path/to/device /path/to/mount/location -o loop -t vfat
Move each of the directories in /path/to/folders/* to another directory whose name is constituted by appending .mbox to each directory name and create a directory named Messages in this directory </s> find /path/to/folders/* -type d -exec mv {} {}.mbox \; -exec mkdir {}.mbox/Messages \;
Find all files under $root_dir </s> find $root_dir -type f
Set variable 'rav' to the contents of 'var' spelled backwards. </s> rav=$(echo $var | rev)
Delete all contents form the files that contain the case insensitive regex 'stringtofind' in maximum 1 level down the / directory excluding other partitions </s> find / -maxdepth 1 -xdev -type f -exec grep -i "stringtofind" -l {} \; -exec sed -i '/./d' {} \;
Print the base name of the current working directory </s> basename $(pwd)
List all environment variables whose name contains 'ipo', showing only the names of the variables and not their values. </s> env | grep ipo | awk 'BEGIN {FS="="} ; { print $1 } '
Shows status of a shell option 'dotglob'. </s> shopt dotglob
Search the /path directory recursively for TXT files </s> find /path -type f -iname "*.txt"
Remount "/media/Working/" with a umask of 000 </s> mount /media/Working/ -oremount,umask=000
Mount remote "cifs" filesystem "//server/source/" on "/mnt/source-tmp" with username "Username" and password "password" </s> mount -t cifs //server/source/ /mnt/source-tmp -o username=Username,password=password
find all the text files in the home folder </s> find ~ -name "*.txt" — print
find all js files under the build direcotry except build/external directory. </s> find build -not \( -path build/external -prune \) -name \*.js
Create 6-letter named temporary file in a folder path $file1, and save the path to it in a variable 'tmpfile' </s> tmpfile=$(mktemp $(dirname "$file1")/XXXXXX)
Count the number of lines in "/dir/file.txt" </s> cat /dir/file.txt | wc -l
Search the /home/weedly directory tree for regular files named myfile </s> find /home/weedly -name myfile -type f -print
list all zero-length files under the current directory </s> find . -empty -exec ls {} \;
Recursively change owner to "amzadm" and group to "root" of all files in "/usr/lib/python2.6/site-packages/awscli/" </s> chown amzadm.root -R /usr/lib/python2.6/site-packages/awscli/
Save the logical current working directory to variable "basedir" </s> basedir=$(pwd -L)
Find regular files named "expression -or expression" under and below /dir/to/search/ </s> find /dir/to/search/ -type f -name 'expression -or expression' -print
Find all *.$input_file_type files/directories under $source_dir </s> find "$source_dir" -name *.$input_file_type
Read a line from standard input with prompt "Continue (y/n)?" and save response in variable "CONT" </s> read -p "Continue (y/n)?" CONT
Find all directories under current directory </s> find -type d
Find all files residing in /home/dm/Video or below that were changed less than 7 days ago </s> find /home/dm/Video -mtime -7
display all the files in the folder "/home/mywebsite" which have been changed in the last 7*24 horus </s> find /home/mywebsite -type f -ctime -7
update the permission of all the php files in current directory and save the output to a file </s> find . -name '*.php' -exec chmod 755 {} \; | tee logfile.txt
find all the regular/normal files in the current folder and replace everything expect the extension of the file and display unique file extensions </s> find . -type f | sed -e 's#.*\(\.[a-zA-Z]*\)$#\1#' | sort | uniq
Find "*prefs copy" files in the /mnt/zip directory tree and remove them with prompting </s> find /mnt/zip -name "*prefs copy" -print0 | xargs -p rm
Find and remove multiple files such as *.mp3 or *.txt under current directory </s> find . -type f -name "*.txt" -exec rm -f {} \;
Print whether the unique contents of "set1" and "set2" differ </s> diff -q <(sort set1 | uniq) <(sort set2 | uniq)
display list of all the hidden regular/normal files in the directory "/dir/to/search/" </s> find /dir/to/search/ -type f -iname ".*" -ls
Find all files/directories under current directory that are greater than 10MB in size </s> find . -size +10M
Search the /home/user1 directory tree for files whose names end in ".bin" </s> find /home/user1 -name "*.bin"
find all the files in the current folder that end with the word bar </s> find -name *bar
Prints all child processes of a process with id 20238. </s> pstree -p 20238 | sed 's/(/\n(/g' | grep '(' | sed 's/(\(.*\)).*/\1/'
Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them </s> find ~/code -name '.*' -prune -o -type f -a -perm /u+x -printf ':%h\n' | sort | uniq | tr -d '\n'
Search the current user's home directory and below for all .png files and copy those files in the directory imagesdir. </s> find ~/ -name *.png -exec cp {} imagesdir \;
Search the files in the current directory tree that are named "string to be searched" for "text" </s> find . -name "string to be searched" -exec grep "text" "{}" \;
create directories mnt and point </s> mkdir mnt point
Number each line in "foobar" as right-justified zero padded to a width of 9 </s> nl -nrz -w9 foobar
Find the password file between sub-directory level 2 and 4. </s> find -mindepth 3 -maxdepth 5 -name passw
Search for files whose name is "filename" and whose permissions are 777 </s> find / -perm 777 -iname "filename"
Set permissions of all files under "/opt/lampp/htdocs" to 644 </s> find /opt/lampp/htdocs -type f -exec chmod 644 {} \;
Set permissions of all directories under "/path/to/base/dir" to 755 </s> chmod 755 $(find /path/to/base/dir -type d)
Remove the last two components (directories) of $path </s> echo $path | rev | cut -d'/' -f4- | rev
search for the file "myfile" in the current folder and display all errors apart from permission denied error </s> find . -name myfile |& grep -v 'Permission denied'
find files in /usr directory which are modified after February 1 of the current year </s> find /usr -newermt "Feb 1"
search for a word in all the php files in the current folder and display the count of all matching lines. </s> find . -name \*.php -type f -print0 | xargs -0 -n1 grep -Hn '$test' | wc -l
Extract the contents of "Input.txt.gz", list the unique first comma separated field prefixed by the number of occurrences </s> zcat Input.txt.gz | cut -d , -f 1 | sort | uniq -c
Find recursively all regular .txt files in the current directory tree except README.txt </s> find . -type f -name "*.txt" ! -name README.txt -print
Prints path to folder that contains file "/path/to/vm.vmwarevm/vm.vmx". </s> echo /path/to/vm.vmwarevm/vm.vmx | xargs dirname
Find all directories under current directory and change their permission to 700 </s> find . -type d -exec chmod 700 {} \;
Find all files/directories under current directory tree whose paths start with './sr' and end with 'sc' </s> find . -path './sr*sc'
Cut off three last symbols from string '1234567890  *' </s> echo '1234567890  *' | rev | cut -c 4- | rev
use regex with find command </s> find . * | grep -P "[a-f0-9\-]{36}\.jpg"
List files larger than 9MB residing in the current directory and below </s> find . -size +9M
Find links to any file that happens to be named `foo.txt' </s> find / -lname foo.txt
find not case sensitive all directories that names are 'apt' and display details </s> find  / -type d -iname "apt" -ls
find files in $HOME ending in "txt" or "html" and case insensitive search for the word "vpn" </s> find $HOME \( -name \*txt -o -name \*html \) -print0 | xargs -0 grep -li vpn
Find file1 in the level 1 directories and above </s> find -maxdepth 2 -name file1
locate large files (> 100 MB) in /home/ for 'cleaning' </s> find /home -type f -size +100M -print0 |xargs -0 rm
Copy a large sparse file "sparse-1" to "sparse-1-copy" </s> rsync --sparse sparse-1 sparse-1-copy
Change owner of "my_test_expect.exp" to "el" </s> sudo chown el my_test_expect.exp
Find all the files in the current directory recursively whose permissions are 644 and show the first 10 of them </s> find . -perm 0644 | head
Find all regular files under current directory non-recursively that have execute permission set for all (user, group and other) </s> find . -maxdepth 1 -type f -perm -uga=x
Extract files from archive 'archive.tar' </s> cat archive.tar | tar x
List file information of the full path of command "c++" </s> ls -ald `which c++`
search for all the files ending with "fits" in the folder "/store/01" </s> find /store/01 -name "*.fits"
Search for the extened regex 'expr' in all files with '.c' and '.h' extension under current directory tree </s> find . -name '*.[ch]' | xargs grep -E 'expr'
display long listing of all the text files in the current folder </s> find . -name "*.txt" -exec ls -la {} \;
display all the html files in the current folder that have been modified exactly 7*24 hours ago </s> find . -mtime 7 -name "*.html" -print
Delete all files with inode number 804180 </s> find -inum 804180 -exec rm {} \
Prints listing of a root folder including hidden files, and saves output to 'output.file'. </s> ls -a | tee output.file
Read a line from standard input with prompt "Enter your choice: " and save response to variable "choice" </s> read -p "Enter your choice: " choice
Find files with SGID (2000) and SUID(4000) permssions set in the file system </s> find /  \( -perm -2000 -o -perm -4000 \) -ls
Search for all files in the /home directory tree that have the same inode number </s> find /home -xdev -inum 2655341
display all the directories in the folder /usr/share </s> find /usr/share -type d
Print lines in the sorted contents of "second.txt" that are not in the sorted contents of "first.txt" </s> comm -13 <(sort first.txt) <(sort second.txt)
find all the php files in current folder and search for multiple patterns in these files </s> find -name '*.php' -exec grep -li "fincken" {} + | xargs grep -l "TODO"
Copy file "exist" from directory "/file/that" to a new file named "file" in "/location/for/new" </s> cp /file/that/exists /location/for/new/file
Find all files in current directory that were modified less than 1 day ago excluding hidden files  and archive them and put the output into the variable file_changed </s> file_changed=$(find . -depth \( -wholename \./\.\* \) -prune -o -mtime -1 -print | cpio -oav)
List the current directory recursively ignoring the "dir1" subdirectory </s> find . -path ./dir1\*  -prune -o -print
Prints top-ten list of most used utilities from history. </s> history | awk '{ print $2 }' | sort | uniq -c |sort -rn | head
Convert Unix `cal` output to latex table code. </s> cal | sed '1d;2{h;s/./ /g;x};/^\s*$/b;G;s/\n/ /;s/^...\(.\{15\}\).*/\1/;s/.../ &\t\&/g;s/\&$/\\\\/'
Find all $2 files in $1 path excluding /proc and search for the regex expanded by $3 in those files </s> find $1 -path /proc -prune -o -name "$2" -print -exec grep -Hn "$3" {} \;
Save the physical current working directory to variable "END_ABS" </s> END_ABS=`pwd -P`
Create a compressed archive named 'my_directory.tar.gz' with files inside directory 'my_directory' without including the directory entry 'my_directory' itself </s> tar -czvf my_directory.tar.gz -C my_directory .
Prints out all the logged-in users along with their group information. </s> groups $(who | cut -d' ' -f 1)
Find regular files named core under /tmp and delete them </s> find /tmp -name core -type f -print | xargs /bin/rm -f
Search the current directory tree for *bash* files </s> find . -name "*bash*"
Find all *.tar.gz files/directories under /directory/whatever which were modified more than $DAYS ago </s> find /directory/whatever -name '*.tar.gz' -mtime +$DAYS
Start 'top' to monitor all processes with the default settings. </s> top
Display the number of lines in all regular files under current directory tree and also show the total count </s> find . -type f -exec wc -l {} +
Look for files whose names begin with letters a-j </s> find  / -name "[a-j]*" -print
Sort and remove duplicate lines in the output of "finger" </s> finger | sort -u
Write "hello world" to the console and print number of bytes, symbols and strings in provided input. </s> echo "hello world" | tee >(wc)
find all log files larger then 100MB  in /home directory and delete them . </s> find /home -type f -name *.log -size +100M -exec rm -f {} \;
remove all the "core" files in the current folder which have not been changed in the last 4 days. </s> find . -name core -ctime +4 -exec /bin/rm -f {} \;
ssh into "hostname" as user "buck" </s> ssh -l buck hostname
display all regular/normal files in the current folder with the name dummy </s> find -type f -name dummy
Archive "/path/to/sfolder/" to "name@remote.server:/path/to/remote/dfolder" preserving hard links and compressing the data during transmission </s> rsync -aHvz /path/to/sfolder/ name@remote.server:/path/to/remote/dfolder
Remount "/mnt/mountpoint" with read and write permission </s> mount /mnt/mountpoint -oremount,rw
Search for the case insensitive regex 'STRING_TO_SEARCH_FOR' in all files under current directory </s> find . -type f -exec grep -n -i STRING_TO_SEARCH_FOR /dev/null {} \;
Search the current directory tree for hidden files </s> find .*
display all file in the folder /dir/to/search except ".c" files </s> find /dir/to/search/ \! -name "*.c" print
Prints path to the folder that contains target of symbolic link ../../../../etc/passwd. </s> $(dirname $(readlink -e ../../../../etc/passwd))
view the manual page of find </s> man find
Change to folder where the oracle binary is. </s> cd "$(dirname "$(which oracle)")"
search for all the jpg files in the folder "/mnt/hda1/zdjecia/test1/" and copy these files to the folder  /mnt/hda1/test/<same name as the found file> </s> find /mnt/hda1/zdjecia/test1/ -iname “*.jpg” -type f -exec cp {} -rv /mnt/hda1/test{} ‘;’
Save the first word of the first difference in ".dir_list_2" compared to ".dir_list_1" into variable "extract_dir" </s> extract_dir=$(diff .dir_list_1 .dir_list_2 | grep '>' | head -1 | cut -d' ' -f2)
display all the text files in the current folder except readme files </s> find . -type f -name "*.txt" ! -name README.txt -print
Grab the output of "basename" (the last slash-separated section of variable "filename") and echo it to stdout, which basename would do by default anyway. </s> echo `basename "$filename"`
Compare files in "/tmp/dir1" and "/tmp/dir2", treating absent files as empty and all files as text </s> diff -Nar /tmp/dir1 /tmp/dir2/
Infinitely print "no" to the screen </s> yes no
search for all regular/normal files in current folder and display all the files which contain 16 lines </s> find . -type f -print0 | xargs -0 grep -cH '' | awk -F: '$2==16'
Set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/X11R6/bin, usr/sbin/ </s> find arch/x86/usr/sbin arch/x86/usr/X11R6/bin usr/sbin/ -type f | xargs chmod a+x
For each item in array "alpha", display the basename, that is the part following the last slash, or the whole item if no slash is present. </s> basename -a "${alpha[@]}"
Search for first match of the regex 're' in all *.coffee files under current directory </s> find . -name \*.coffee -exec awk '/re/ {print;exit}' {} \;
Find all regular files under current directory tree containing 'some text' in their names without descending into hidden directories and excluding hidden files </s> find . -type d -path '*/\.*' -prune -o -not -name '.*' -type f -name '*some text*' -print
View history using "more" </s> history | more
display all the files in the current folder in a single line separated by null command </s> sudo find . -print0
Print which files differ between dir1 and dir2, treating absent files as empty </s> diff --brief -Nr dir1/ dir2/
find and delete all the empty directories in the current folder and all its sub directories too </s> find . -depth -empty -type d -delete
find files in root directory that names are game </s> find / -name game
Find all files called "INPUT.txt" in the current directory tree and remove lines starting with # in them, saving backup copies as INPUT.txt.bak </s> find . -type f -name INPUT.txt -print0 | xargs -0 sed -i.bak '/^#/d'
Change permissions to 0755 for all directories in the /path directory tree </s> find /path -type d -exec chmod 0755 "{}" \;
Do a dry run of renaming file extension '.andnav' to '.tile' for all files/directories under current directory tree </s> find . -name "*.andnav" | rename -vn "s/\.andnav$/.tile/"
Search for files which are writable by somebody </s> find . -perm /222
Replace the occurrences of "HOGE" with "MOGA" once per each line of the files from the current directory tree, keeping a backup copy of every touched file </s> find . -type f -print0 | xargs -0 sed -i.bak -e "s/HOGE/MOGA/"
Search the current directory tree for symbolic links named "link1" </s> find . -type l -name link1
Deletes empty folder 'nonsense_dir'. </s> rmdir nonsense_dir
Save the number of matching executables for "$cmd" in $PATH to variable "candidates" </s> candidates=$(which -a $cmd | wc -l)
find all the files in the entire file system that have been accessed exactly  50 days ago </s> find / -atime 50
Prints line count of each file within current directory. </s> find . -type f -print | xargs -L1 wc -l
Find all hard links to file1 under /home directory </s> find /home -xdev -samefile file1
Remount "/dev/block/mtdblock3" on "/system" with read and write permission </s> mount -o remount,rw -t yaffs2 /dev/block/mtdblock3 /system
Change the permission to 0644 for all files under current directory </s> find . -type f -exec chmod 0644 {} +
Move all files that contain "Subject: \[SPAM\]" to "your_file" </s> mv $(grep -l 'Subject: \[SPAM\]' | awk -F ':' '{print $1}') your_file
Print the list of all regular files residing in the current directory and below </s> find ./ -type f -print
Search the current directory tree for regular files that were modified $FTIME days ago </s> find . -type f -mtime $FTIME
Count all the lines of all '*.c' files in current directory recursively </s> find . -name "*.c" -print0 | xargs -0 cat | wc -l
Find all files/directories under current directory that match the case insensitive glob pattern {EA,FS}_* </s> find . -iname "{EA,FS}_*"
List all *.txt files under current directory that contains the regex 'pattern' </s> find . -type f -name '*.txt' -exec egrep -l pattern {} \;
display all files in the folder bar only in the path /foo/bar/myfile (no output is generated) </s> find bar -path /foo/bar/myfile -print
Search the current directory tree for regular files whose names end with "keep.${SUFFIX}", where $SUFFIX is a shell variable </s> find . -type f -name "*keep.${SUFFIX}"
Print the list of regular files from the current directory that were last modified on November, 22 </s> find . -maxdepth 1 -type f -newermt "Nov 22" \! -newermt "Nov 23" -exec echo {} +
Remove all *.mp3 files in tmp directory but not in it's subdirectories </s> find tmp -maxdepth 1 -name *.mp3 -print0 | xargs    -0 rm
Remove empty directories from directory tree /srv/${x} </s> find /srv/${x} -type d -empty -exec rmdir {} \;
Search the current directory recursively for regular files last changed 2 days ago </s> find . type -f -ctime 2
Remount "/dev/block/mtdblock3" on "/system" with read only permission </s> mount -o remount,ro -t yaffs2 /dev/block/mtdblock3 /system
Find all Subscription.java files/directories under current directory and enter into the parent directory of the first one found </s> cd $(find . -name Subscription.java | xargs dirname)
Archive "fileToCopy" to "/some/nonExisting/dirToCopyTO" on host "ssh.myhost.net" via ssh </s> rsync -ave ssh fileToCopy ssh.myhost.net:/some/nonExisting/dirToCopyTO
Remove everything within parentheses and substitute all non digit characters with a space from "1/2 [3] (27/03/2012 19:32:54) word word word word 4/5" and format the output as a table </s> echo '1/2 [3] (27/03/2012 19:32:54) word word word word 4/5' | sed -e 's/(.*)//' -e 's/[^0-9]/ /g' | column -t
Find all *.foo files under current directory and print their contents </s> cat `find . -name '*.foo' -print`
change the permissions of all the directories  to 775 in the current folder </s> find . -type d -exec chmod 775 {} \;
Find directories named `doc' in /usr and below </s> find /usr -name doc -type d
Search the current directory tree for symlinks pointing at other symlinks </s> find . -type l -xtype l
Find and delete all .zip files in the current directory tree </s> find . -depth -name '*.zip' -exec rm {} \;
Print the home directory of "$username" </s> finger $username | awk '/^Directory/ {print $2}'
find all the files with the name september ( case insensitive ) </s> find -iname september
find all the text files in the current folder </s> find . — name "*.txt" — print
Decompress "path/to/test/file.gz" to standard output and save all lines matching "my regex" and not matching "other regex" to files with a 1000000 line limit </s> gzip -dc path/to/test/file.gz | grep -P 'my regex' | grep -vP 'other regex' | split -dl1000000 - file
Create a ssh key of RSA type, and prompt for a filename to store it, presenting the default for this type of key as $HOME/.ssh/id_rsa </s> ssh-keygen -t rsa
Find all files that belong to group developer </s> find /home -group developer
Find all files that belongs to user Tecmint under /home directory </s> find /home -user tecmint
Find all files/directories named 'my.txt' in the entire filesystem </s> find / -name "my.txt"
finds all directories named CVS, and deletes them and their contents. </s> find . -type d -name CVS -exec rm -r {} \;
Add execute permission to all files ending in ".sh" </s> chmod +x *.sh
Find all files/directores that are newer than /etc/motd and conain the string 'top' at the beginning of their names under user's home directory tree </s> find ~ -name 'top*' -newer /etc/motd
Archive all filepattern-*2009* files/directories under data/ into 2009.tar </s> find data/ -name filepattern-*2009* -exec tar uf 2009.tar {} ;
display all the files in the current directory excluding the paths "targert", "tools", "git" </s> find . \( ! -path "*target*" -a ! -path "*tools*" -a ! -path "*.git*" -print \)
Show the date in default format for tomorrow + 2 days + 10 minutes </s> date -d tomorrow+2days-10minutes
find the file "MyCProgram.c" in the current folder </s> find -iname "MyCProgram.c"
Print linker search path using gcc formatted on new lines </s> gcc -print-search-dirs | sed '/^lib/b 1;d;:1;s,/[^/.][^/]*/\.\./,/,;t 1;s,:[^=]*=,:;,;s,;,;  ,g' | tr \; \\012
Remove all .txt files in and below the current directory </s> find . -name "*.txt" -print0 | xargs -0 rm
Recursively removes all files in a current folder but '*txt' files. </s> find . -type f -not -name '*txt' | xargs rm
Search for case-insensitive "string" in "log.tar.gz" </s> zcat log.tar.gz | grep -a -i "string"
display all the files in the current folder which are present in the path "./src/emacs" </s> find . -path './src/emacs' -prune -o -print
Changes group ownership of 'target_directory' to 'target_group'. </s> chgrp target_group target_directory
Locate logo.gif in the /var/www directory tree </s> find /var/www -name logo.gif
find all normal/regular files in current folder and display the total lines in them </s> find . -type f -exec wc -l {} +
Print a minimal set of differences between files in directories "a" and "b", ignore the first 3 lines of output, and print any line starting with "-" with the first character removed </s> diff -dbU0 a b | tail -n +4 | grep ^- | cut -c2-
change the permissions of all regular/normal files in the current directory </s> find . -type f -exec chmod 664 {} \;
show all directories in the current folder excluding those that are present only in the paths ./media, ./images and ./backups </s> find . -path './media' -prune -o -path './images' -prune -o -path './backups' -prune -o -print
Find all *.gz files/directories under asia and emea directory </s> find asia emea -name \*.gz
Make directory "tata" </s> mkdir tata
find all the files that have been modified exactly 24 hours ago </s> find . -type f -mtime 1
Change permission to 000 of all directories named '.texturedata' under '/path/to/look/in/' directory tree </s> find /path/to/look/in/ -type d -name '.texturedata' -prune -print0 | xargs -0 chmod 000
Search the /myfiles directory tree for files whose names contain "blue" </s> find /myfiles -name '*blue*'
Search the current directory recursively for files last modified within the past 24 hours ignoring .swp files and paths ./es* and ./en* </s> find -mtime 0 -not \( -name '*.swp' -o -path './es*' -o -path './en*' \)
find the oldest normal file in the current directory </s> find . -type f -print0 | xargs -0 ls -ltr | head -n 1
Print login name and full name of all users currently logged in </s> finger -l | awk '/^Login/'
Search the current directory recursively for regular files last modified less than 2 days ago </s> find . type -f -mtime -2
Find all files/directories with '.bar' extension in maximum 2 levels down the current directory </s> find . -name *.bar -maxdepth 2 -print
Saves space separated content of $RAW_LOG_DIR in FILES variable </s> FILES=`cat $RAW_LOG_DIR | xargs -r`
Search for *pattern* in and below current directory </s> find -name "*pattern*"
find all the files in the current directory that have the word "bash" in their name </s> find . -name "*bash*"
Revert $string value and print first 20 space-separated fields </s> echo $string | rev | cut -d ' ' -f -20
Print the list of files in directory /tmp/a1 recursively </s> find /tmp/a1
Count the number of lines in every regular .rb file in the current directory tree </s> find . -name "*.rb" -type f -exec wc -l \{\} \;
find all  *.csv files which  modify within last 2 days in /home directory then zip ( archive )- </s> find /home/archive -type f -name "*.csv"  -mtime -2 -exec gzip -9f {} \;
Count the number of lines in each .java file in the current directory tree </s> find . -name "*.java" -exec wc -l {} \;
Find all files under $musicdir directory </s> find "$musicdir" -type f -print
Set variable 'path' to name of current directory (without the containing directories) converted to lowercase. </s> path=$(basename $(pwd) | awk '{print tolower($0)}')
Create intermediate directories "tmp" as required and directories real_dir1 and real_dir2 </s> mkdir -p tmp/real_dir1 tmp/real_dir2
find list of all files with file permission , link , owner , group , reation time , size , file name </s> find . -exec ls -ld {} \;
find all the text files in  the current folder and do not search in somedir, bin directories </s> find . -name somedir -prune , -name bin -prune -o -name "*.txt" -print
Add group write permission to all files matching "*" or "...*" </s> chmod g+w * ...*
Find all directories under current directory and set their permission to 775 </s> find -type d | xargs chmod 775
Find files recursively with extension "ext" </s> find . -name "*.ext"
Find all *.jpg files under current directory and print only unique names </s> find . -name *.jpg | uniq -u
find all the reguar/normal php files in current directory. </s> find . -type f -name "*.php"
Find all symlinks under /myfiles directory </s> find /myfiles -type l
search for the file "process.txt" in the entire file system (case insensitive search) </s> find / -iname 'process.txt' -print
Split "/usr/bin/firefox" into 1000 files of about equal size </s> split -n 1000 /usr/bin/firefox
Find all *.p[lm] files/directories under current directory </s> find -name '*.p[lm]'
Print the ping time of a single request to "8.8.8.8" </s> ping -c 1 8.8.8.8 |  awk 'FNR == 2 { print $(NF-1) }'
Display only first and second dot-separated numbers of kernel version, ie. 4.4 </s> uname -r | sed 's/\([0-9]\+\.[0-9]\+\)\..*/\1/'
Go back to last directory. </s> cd -
Find all PHP files under current directory that contain only one line </s> find . -type f -name '*.php' -exec grep -Hcm2 $ {} + | sed -n '/:1$/{s///;p}'
Gets domain name from dig reverse lookup. </s> dig -x 8.8.8.8 | awk '/PTR[[:space:]]/{print $NF}'
Finds string with text "string to be searched" in any cased files like "*.cs" recursively in a current folder. </s> find ./ -type f -iname "*.cs" -print0 | xargs -0 grep "content pattern"
Display all lines contained in 'dax-weekly.csv' in reverse order. </s> cat dax-weekly.csv | awk '{a[i++]=$0} END {for (j=i-1; j>=0;) print a[j--] }'
Remove all .txt files in and below the current directory </s> find . -name "*.txt" | xargs rm
List all the .c files under the current directory and below in a 3 column format </s> find . -name "*.c" | xargs -n3
find all CSS files that do something with your HTML ID #content </s> find . -name "*.css" -exec grep -l "#content" {} \;
display the three smallest files by size in a folder. </s> find /etc/ -type f -exec ls -s {} + | sort -n | head -3
find all data files in current folder which have not been changed in the last 60 minutes and display their name without extension </s> find . -name "*.dat" -type f -cmin +60 | grep "^./[^/]\+dat" | sed "s/^.\///"
Search the current directory recursively for directories with the execute permission set for everybody </s> find -type d ! -perm -111
Changes the group of defined file. </s> chgrp
Display human-readable file type description of ascii.txt </s> file ascii.txt
Find all *.rb files/directories under current directory </s> find . -name *.rb
Locate all passwd files on the system </s> find / -name passwd
Copy "some_file_name" to "destination_directory" and change ownership to "someuser:somegroup" </s> echo 'some_file_name' | cpio -p --owner someuser:somegroup destination_directory
display all the files in the current folder which do not belong to any user </s> find . -nouser
Force delete all files in the temp folder which have not been accesses in the last 240 hours </s> find /tmp/* -atime +10 -exec rm -f {} \;
Add executable permission to "rr.sh" </s> chmod +x rr.sh
Find all .svn directories under current directory and delete them </s> find . -type d -name ".svn" -print | xargs    rm -rf
Rename all .txt files to .bak in the current directory tree </s> find . -name "*.txt" | sed "s/\.txt$//" | xargs -i echo mv {}.txt {}.bak | sh
List each file or directory in the current directory prefixed with its filesize in bytes and sorted from smallest to largest </s> du -s * | sort -n
find all the files ending with ".foo" in the folder /usr </s> find /usr -name '*.foo' -print
Recursively change the owner of all files in "/home/test" to "test" </s> sudo chown -R test /home/test
Clears terminal screen. </s> echo `clear`
Search the file system for regular files whose names are shorter than 25 characters </s> find / -type f|egrep "/[^/]{0,24}$"
split file input.txt into pieces per 1 line named output.NNNNN </s> split --lines=1 --suffix-length=5 input.txt output.
Find all 400 permission files under /data directory, print 'Modifying ' appended with file path for each of them and change their permission to 755 </s> find /data -type f -perm 400 -exec echo Modifying {} \; -exec chmod 755 {} \;
Check if the file "somelink" links to exists </s> ls `readlink somelink`
list all javascipts file which whole name does not contain excludeddir </s> find . -name '*.js' | grep -v excludeddir
find setuid files and directories writing the details to /root/suid.txt , and find large files writing the details to /root/big.txt, traversing the filesystem just once </s> find / \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \  \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)
Search  in current directory downwards all files whose size is 10 blocks . </s> find .  -size 10 print
List all files from the current directory tree that were modified less than 60 minutes ago </s> find . -mmin -60 -ls
Find all /home/folder1/*.txt files and create symlinks appending '_CUSTOM_TEXT.txt' in their names </s> find /home/folder1/*.txt -type f | awk -F '.txt' '{printf "ln -s %s %s_CUSTOM_TEXT.txt\n", $0, $1}' | sh
find all the files that have been modified in exactly 7*24 hours ago </s> find . -mtime 7
split content of the files *.txt beginning with 1001st line into pieces per 1000 lines </s> cat *.txt | tail -n +1001 | split --lines=1000
Search for the regex '[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*' in all files under /etc </s> find /etc -exec grep '[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*' {} \;
Find all regular files that reside in the current directory tree and were last modified more than 1 day ago </s> find . -type f -mtime +1
Display operating system type, ie. GNU/Linux </s> uname -o
List the unique parent directories of all .class files found in the entire filesystem </s> find / -name *.class -printf '%h\n' | sort --unique
Find all files in the /var/tmp directory tree with uid=1000 </s> find /var/tmp -uid 1000
Gets all IP addresses from host network configuration and prints first one. </s> ifconfig | grep "inet addr:" | grep -v "127.0.0.1" | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'  | head -1
Get a recursive file list of directory $dir </s> find $dir -type f
List all files in /home/bozo/projects directory tree that were modified within the last day </s> find /home/bozo/projects -mtime -1
Search the current directory tree for regular files that contain "string" </s> find . -type f -printf '"%p"\n' | xargs grep string
Count the number of files in the /usr/ports directory tree whose names begin with 'pkg-plist' and which contain 'unexec.rmdir%D' </s> find /usr/ports/ -name pkg-plist\* -exec grep 'unexec.rmdir %D' '{}' '+' | wc -l
List content of 'myfile' in a subshell and returns output to parent shell </s> $(cat myfile)
search in the home folder for all the files with the name "monfichier" </s> find /home/ -name monfichier
FInd files in current directory and grep text and html files - but not index.html and report things that contain the word 'elevator' in four or more lines </s> find . -type f -print0 | egrep -iazZ '(\.txt|\.html?)$' | grep -vazZ 'index.html' | xargs -n 1 -0 grep -c -Hi elevator | egrep -v ':[0123]$'
Split "$INFILE" into files of at most "$SPLITLIMT" with a numeric suffix and a prefix "x_" </s> split -d -l $SPLITLIMT $INFILE x_
Print NS record for domain 'domain.' from 'some.other.ip.address' nameserver </s> dig @some.other.ip.address domain. ns
Delete all hidden files under $some_directory </s> find "$some_directory" -type f -name '.*' -exec rm '{}' \;
Print the current working directory with resolved symbolic links </s> pwd -P
Search for 'specific string' in all files matching the name pattern '“*.[txt|TXT]”' under current directory tree </s> find . -name “*.[txt|TXT]” -print | xargs grep “specific string”
Find all hard links to file /path/to/file that exist under the current directory tree </s> find . -samefile /path/to/file
Find all *.jpg files under current directory </s> find . -name *.jpg
List all leaf directories (directories which don't contain any sub-directory) under current directory </s> find . -type d -links 2
Print the files to which symbolic links in the current directory point </s> find . -type l -print | xargs ls -ld | awk '{print $10}'
Changes group ownership of 'shared' to 'Workers'. </s> chgrp Workers shared
change the permissions of all the directories in the current folder </s> find . -type d -exec chmod 2775 {} \;
display all the files in the file system which belong to the user "user1" </s> find / -user user1
Send at most 3 ping requests to "8.8.8.8" with a timeout of 3 seconds on interface "eth9" </s> ping 8.8.8.8 -I eth9 -c 3 -w 3
Search all files in the current directory tree for "SearchString", ignoring .html files and skipping .svn directories </s> find . \( -name '*.svn*' -prune  -o ! -name '*.html' \) | xargs -d '\n' grep -Hd skip 'SearchString'
Save the absolute path of the current script to variable "SELF" </s> SELF=$(readlink /proc/$$/fd/255)
display all files in the folder /usr and its sub directory(do not search beyond the sub directory) </s> find /usr -maxdepth 1 -print
prints the last occurrence of text between two tags </s> tac file | sed -n '0,/<tag>\(.*\)<\/tag>/s//\1/p'
Search for line number 111 in file "active_record.rb" </s> nl -ba  -nln  active_record.rb  | grep '^111 '
Search the home directory for files whose names begin with "test" </s> find ~ -name "test*" -print
Find all *.txt files/directories under your home directory </s> find ~/ -name '*.txt'
Find all files with the name "MyProgram.c" in the current directory and all of it's sub-directories. </s> find -name "MyCProgram.c"
Print lines in "file1.txt" that do not exist in "file2.txt" </s> sort <(sort -u file1.txt) file2.txt file2.txt | uniq -u
Remove the passphrase from ~/.ssh/id_rsa. </s> ssh-keygen -f ~/.ssh/id_rsa -P ""
List file contents of compressed file $i </s> gzip -l $i
find all files in current folder which have been accessed exactly 10 minutes ago </s> find . -amin 10
Find all 1US* files/directories under current directory </s> find . -name '1US*'
Prints year-month-date format for given time </s> date -d "yesterday 13:00" '+%Y-%m-%d'
Find all executable symlinks or upvoter-* files under maximum 1 level down the {} directory </s> find {} -name 'upvoter-*' -type f -or \( -type l \) -maxdepth 1 -perm +111
Find all files under current directory whose file type description contains "image", display only path to each file. </s> find . -type f -exec file {} \; | awk -F: '{if ($2 ~/image/) print $1}'
create a zip of all the files in the current folder which are bigger than 100Kb and do not go more than 2 levels during search </s> find . -maxdepth 2 -size +100000 -exec bzip2 {} \;
search for all "tif" images in the entire file system </s> find / -name '*.tif ' –print
long list the detials of all the shell scripts in current directory </s> find . -name "*.sh" -exec ls -ld {} \;
Prints real path of the folder containing $0 file. </s> $(readlink -f $(dirname "$0"))
display all the files in the current folder which have been accessed in the last 60 minutes </s> find . -amin -60
Find all files/directories under current directory </s> find -print
Recursively finds all files and prints all strings with 'text-to-find-here' from that files, preceding matched string with filename. </s> find ./ -type f -exec grep -H 'text-to-find-here' {} \;
Count files accessed more than a month ago </s> find . -atime +30 -exec ls \; | wc -l
Calculate the md5 sum of "exampleString" </s> echo -n 'exampleString' | md5sum
display all the files in the file system which do not belong to the user "wnj" and which are modified before the file "ttt" </s> find / \! \( -newer ttt -user wnj \) -print
Save full path of command "rm" to variable "RM" </s> RM=`which rm`
search for the file centos in /usr folder ( case insenstive search ) </s> find /usr -iname centos
Give all directories in the /path/to/base/dir tree read and execute privileges </s> find /path/to/base/dir -type d -exec chmod 755 {} +
Find all .mp3 files with more than 10MB and delete them </s> find / -type f -name *.mp3 -size +10M -exec rm {} \;
Mount "nifs" filesystem "/dev/mapper/myldm" on "/mnt" as read only </s> mount -t ntfs -o ro /dev/mapper/myldm /mnt
Numerically sort standard input by the second word of each line and output from greatest value to least value </s> sort -nrk 2,2
Counts all files in a DIR_NAME folder and subfolders. </s> find DIR_NAME -type f | wc -l
Search for 'string-to-find' in all HTML files under current directory tree and show the matched lines with their filenames </s> find . -name \*.html -exec grep -H string-to-find {} \;
Write "[some repository]" to standard output and append to "/etc/apt/sources.list" as root </s> echo "[some repository]" | sudo tee -a /etc/apt/sources.list
Remove all files with names like "vmware-*.log" from the current directory tree </s> find . -name vmware-*.log | xargs rm
Search the current directory recursively for regular files with the extension given as variable $extension </s> find . -type f -name "*.$extension"
search for a word in all the .C files in the current directory </s> find . -name "*.c" -exec grep -ir "keyword" {} ";"
searches through the /usr/local directory for files that end with the extension .html </s> find /usr/local -name "*.html" -type f
Print content of all files found regarding seach options '[whatever]' </s> find [whatever] -exec cat {} \;
Find all empty regular files in the current directory and below </s> find . -type f -empty
Delete characters in columns 36 through 40 from the output of "finger" </s> finger |  cut --complement -c36-40
find all the directories in the current folder excluding search in the sub directories and create these directories in another path </s> find . -maxdepth 1 -type d | xargs -I X mkdir '/new/directory/X'
find all files that were modified between 90 to 100 days ago in home directory and delete then . </s> find /home -type f -mtime +90 -mtime -100  -exec rm  {} \;
Move "file.txt" to docker container "$COUNTAINER_ID" in path "/var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt" </s> mv -f file.txt /var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt
Print base name of the file name without all extensions. </s> basename "$FILE" | cut -d'.' -f-1
List the directory paths of all *.ext (case insensitive) files under /path directory </s> find /path -type f -iname "*.ext" -printf "%h\n"
Find all files/directories under current directory and append a null character at the end of each path </s> find -print0
delete all the ".bak" or swap files in kat folder </s> find kat -type f \( -name "*~" -p -name "*.bak" \) -delete
Find files with inode number 199053 </s> find / -inum 199053
Reverse the space separated words in "aaaa eeee bbbb ffff cccc" </s> echo "aaaa eeee bbbb ffff cccc"|tr ' ' '\n'|tac|tr '\n' ' '
Change file owner and group of "/path/to/yourapp" to root and print a diagnostic </s> chown -v root:root /path/to/yourapp
Remove all *.log files from the current directory tree </s> find ./ -name '*.log' | xargs rm
Find *.css files in the current directory tree, skipping all directories that match pattern '*/lang/en.css' </s> find . -path '*/lang/en.css' -prune -o -name '*.css' -print
Remove all *.sql files in the $backup_path directory tree that were last modified more than 30 days ago </s> find $backup_path/* -name *.sql -mtime +30 -exec rm {} \;
remove all core dump files from user's home directory </s> find ~/ -name 'core*' -exec rm {} \;
Search the /path directory tree for files lacking the group writable bit </s> find /path ! -perm /020
Display all lines contiaining 'funcname' in system map file matching current kernel. </s> cat /boot/System.map-`uname -r` | grep funcname
display all files in current folder in sorted order of depth </s> find folder1/ -type f -printf "%d\t%p\n" | sort -n | sed -e "s|[0-9]*\t||"
Display the contents of 'your_file' wrapping lines to maximum 80 characters, and waiting for user interaction after each page. </s> fold -80 your_file | more
Find all 755 permission regular files under current directory tree </s> find . -type f -perm 755
Find writable regular files in the current directory </s> find -type f -maxdepth 1 -writable
Check if a drive is mounted to nfs </s> mount |grep nfs
Find recursively regular files in the current directory tree </s> find -type f -print0
Make directories "3/foo", "3/bar", and "3/baz" </s> mkdir 3/foo 3/bar 3/baz
Print the first line of output after alphabetically sorting the file "set" </s> head -1 <(sort set)
Display a dump of standard input as floating point values of double size </s> od -t fD
display all directories in the folder "PROD" and do not search in the sub directories </s> find /PROD -maxdepth 1 -type d
Removes all empty folders under '/path/to/the/folder' path. </s> find /path/to/the/folder -depth -type d -print0 | xargs -0 rmdir
Find and show all files in the current directory tree that are smaller than 500 kB </s> find . -size -500k
Remove all files with a txt extension under current directory </s> find . -type f -name "*.txt" -exec rm {} \; -print
Search for the string 'git' in all the files under current directory tree without traversing into '.git' folder and excluding files that have 'git' in their names </s> find . -path ./.git -prune -o -not -name '*git*' -print |grep git
Use awk command 'FNR==NR { array[$1,$2]=$8; next } ($1,$2) in array { print $0 ";" array[$1,$2] }' on compressed files "input1.vcf.gz" and "input2.vcf.gz" </s> gzip -dc input1.vcf.gz input2.vcf.gz | awk 'FNR==NR { array[$1,$2]=$8; next } ($1,$2) in array { print $0 ";" array[$1,$2] }'
Print the number of packets sent, received, and the percentage lost for each ping request to "google.com" </s> ping google.com | awk '{ sent=NR-1; received+=/^.*(time=.+ ms).*$/; loss=0; } { if (sent>0) loss=100-((received/sent)*100) } { printf "sent:%d received:%d loss:%d%%\n", sent, received, loss }'
split file /usr/bin/gcc into pieces per 100000 lines </s> split -n 100000 /usr/bin/gcc
find all the ".wma" files in the folder "$current_directory" </s> find "${current_directory}" -type f -iname "*.wma"
Find all directories under current directory and set their permission to 775 </s> find -type d exec chmod 775 {} +
search for the directory "config" in the current folder and change directory to the first instance of the search </s> cd $(find . -name config -type d | sed 1q)
Find all files/directories with '.log' extension whose names start with 'app-', have been modified in the last 5 minutes and show the first one found </s> find /var/log/crashes -name app-\*\.log -mmin -5 -print | head -n 1
Find all directories at level 3 of directory tree $from_dir </s> find $from_dir -mindepth 3 -maxdepth 3 -type d
Print a welcome message with the current user's user name </s> echo "Welcome `whoami`!"
Find all symlinks under current directory </s> find ./ -type l
Find all orm.* files/directories under current directory </s> find . -name "orm.*"
Print which files differ in "dir1" and "dir2" recursively </s> diff -qr dir1/ dir2/
Write output of "ls -a" to standard output and to "output.file" </s> ls -a | tee output.file
Print the list of files changed within the last minute </s> find / -newerct '1 minute ago' -print
Log in using key file "./device_id.pem" as user "deviceuser" on host "middle.example.org" and port 2222 </s> ssh -i ./device_id.pem -p 2222 deviceuser@middle.example.org
display all the files in the entire file system which are bigger than 10MB </s> find / -size +10000k
Find all 0644 permission files/directories under current directory tree and show only the first 10 of them </s> find . -perm 0644 | head
Split "input_file" into files of at most 100 lines each with prefix "output_file" </s> split -l 100 input_file output_file
split compressed content of the directory /home into pieces per 4000 mb named as  "/media/DRIVENAME/BACKUPNAME.tgz.NNN" </s> tar --one-file-system -czv /home | split -b 4000m - /media/DRIVENAME/BACKUPNAME.tgz
Counts lines in each *.php file. </s> wc -l $(find . -name "*.php")
Change permissions to u=rw,g=r,o= for all files in the current directory tree </s> find . -type f -exec chmod u=rw,g=r,o= '{}' \;
change the permission of all the regular files in the folder /home to 700 </s> find /home -type f -perm 0777 -print -exec chmod 700 {} \;
find all the files that have been changed today </s> find . -ctime 0 -type f
Recursively finds all files older than 7 minutes under the current directory, saves list of found files, and compresses them, executing at most 10 compress process at a time. </s> find . -type f  -mtime +7 | tee compressedP.list | xargs -I{} -P10 compress {} &
Remove gitlab.site.org from root's known hosts file. </s> ssh-keygen -f "/root/.ssh/known_hosts" -R gitlab.site.org
find all the files in the current folder that have a single letter in their name which have been modified in the last 3 days but not today </s> find . -name \? -daystart -mtime +0 -mtime -3
ask user confirmation and delete all the files in the directory /mydir which have not been accessed in the last 100*24 hours </s> find /mydir -atime +100 -ok rm {} \;
Change the user and group of all files and directories under /var/www to www-data:www-data </s> find /var/www -print0 | xargs -0 chown www-data:www-data
Silently read a single character from standard input into variable "REPLY" without backslash escapes, with a timeout of 5 seconds, and using the prompt $'Press any key or wait 5 seconds to continue...\n' </s> read -rsp $'Press any key or wait 5 seconds to continue...\n' -n 1 -t 5
search for a word in all the shell scripts in the current folder and display the matched files. </s> find . -type f -name "*.sh" -exec grep -l landoflinux {} \;
force remove all the regular/normal files which begin with sess in the temp folder </s> find /tmp -type f -name sess* -exec rm -f {} \;
List environment variables whose name contains "X" </s> set | grep -oP '^\w*(?==)' | grep X
Display summary of each specified file in human readable form </s> du -sh *
Add read permission for 'other' for all files/directories named 'rc.conf' under current directory tree </s> find . -name "rc.conf" -exec chmod o+r '{}' \;
Print joined strings from 'file', using space symbol as separator. </s> cat file | xargs
Remove trailing white spaces from all files under current directory ignoring .git and .svn directories </s> find . -not \( -name .svn -prune -o -name .git -prune \) -type f -exec sed -i "s/[[:space:]]*$//g" "{}" \;
Find all regular files under $FILES_PATH directory tree and save the output to 'FILES' variable </s> FILES=$(find $FILES_PATH -type f -name "*")
Force decompress all files into '/etc' </s> gzip -d --force * /etc
Search the /tmp directory tree for files owned by user `ian' </s> find /tmp -user ian
Find all regular files whose names contain "@" in directory tree ~/$folder </s> find ~/$folder -name "*@*" -type f -print0
display all normal/regular files in current directory </s> find . -type f -print0
Remove all .tmp files in and below /tmp </s> find /tmp -name "*.tmp" -print0 | xargs -0 rm
Find all files with '.txt' (case insensitive) extension under $dir directory non-recursively and sort them numerically </s> find "$dir" -maxdepth 1 -type f -iname '*.txt' | sort -n
Search all .c and .h files in the current directory tree for string "e" </s> find . -name "*.[ch]" -exec grep --color -aHn "e" {} \;
Find all 100MB files in file system and delete them using rm command </s> find / -size +100M -exec rm -rf {} \;
Open a ssh connection to user@host with X11 forwarding to run GUI programs </s> ssh user@host -X
Execute `find -type f | egrep -i "(jpg|bmp|png|gif)$"` every 300 seconds and display without title </s> watch -n 300 -t `find -type f | egrep -i "(jpg|bmp|png|gif)$"`
Create a symbolic link named "/usr/bin/my-editor" to "/usr/share/my-editor/my-editor-executable" and attemp to hard link directories </s> ln -sF /usr/share/my-editor/my-editor-executable   /usr/bin/my-editor
Create intermediate directories foo and bar as required and directory foo/bar/baz </s> mkdir -p foo/bar/baz
display all files in the current folder which end with extension "myfile" followed by one digit or two digits </s> find . -regextype sed -regex '.*myfile[0-9]\{1,2\}'
display all the files  in the current folder excluding the perl files </s> find . -not -name "*.pl"
search for a regular/normal file myfile in the folder "/home/weedly" </s> find /home/weedly -name myfile -type f -print
Delete all files/directories in minimum 2 levels down the root directory </s> find root -mindepth 2 -delete
List files in "dir1" that are not in "dir2" </s> comm -23 <(ls dir1 |sort) <(ls dir2|sort)
Prints file.txt without the last N bytes </s> head -c -N file.txt
List all files/directories under current directory </s> find -ls
search for the file "name_to_find" in the home folder </s> find ~ -name "name_to_find"
Find all files recursively starting from / that have been modified in the past 30 minutes and list them </s> find / -mmin -30 -ls
Recursively copy everything in /source/path whose name doesn't begin with a period, to /destination/path, without overwriting existing files, and outputting a line for each file copied or skipped. </s> cp -Rvn /source/path/* /destination/path/
Find all directories with space in their names under current directory and rename them by replacing all spaces with _ </s> find -name "* *" -type d | rename 's/ /_/g'
Calculate md5 checksum of '/etc/localtime' and save the first space separated part in variable 'checksum' </s> checksum=`md5sum /etc/localtime | cut -d' ' -f1`
Find files named "needle" ignoring the case </s> find . -iname "needle"
list all files under the current directory called cookies.txt </s> find -name cookies.txt
find all the files that have the word "fstab" in their name in a folder </s> find /etc -name *fstab*
Find all files in the current directory recursively with "linkin park" in their names and copy them to /Users/tommye/Desktop/LP, preserving path hierarchy </s> find . -type f -iname "*linkin park*" | cpio -pvdmu /Users/tommye/Desktop/LP
Prints week day of a 31 day in a current month. </s> cal | awk -v date=31 'NR == 2 { split($0, header) } NR > 2 { for (i = 1; i <= NF; ++i) if ($i == date) { print header[NR == 3 ? i + 7 - NF : i]; exit } }'
Find all regular files in the home directory tree that were modified in the last 24 hours </s> find ~ -type f -mtime 0
Move all *.mp4 files from directory /foo/bar and its subdirectories to /some/path </s> find /foo/bar -name '*.mp4' -print0 | xargs -0 mv -t /some/path {}
Removes empty folder 'symlink'. </s> rm -d symlink
Counts lines in each of *.php files in a current folder and subfolders ignoring 'tests' folder and prints total count as well. </s> find . -name tests -prune -o -type f -name '*.php' | xargs wc -l
Search the current directory tree for symbolic links to files matching pattern '*test*' </s> find . -lname '*test*'
Copies newest file under the current folder to the '/tmp/' </s> cp $(ls -1tr * | tail -1) /tmp/
Clear the in-memory history and read from the current history file </s> history -cr
Find all files whose names begin with 'Makefile' at the /usr/ports directory tree's level 3 and count the number of lines with NOPORTDOCS or NOPORTEXAMPLES in them. </s> find /usr/ports/ -name Makefile\* -mindepth 3 -maxdepth 3 -exec egrep "NOPORTDOCS|NOPORTEXAMPLES" '{}' '+' | wc -l
Display the content of file "f" in home directory if it exists and is executable </s> cat `which ~/f`
Display each line in file.txt backwards </s> rev file.txt
Find all files/directories under /path/to/dir/* paths and print the timestamp in YmdHMS format along with their paths and object of symlinks </s> find /path/to/dir/* -printf "%TY%Tm%Td%TH%TM%TS|%p|%l\n"
Get current directory name without full path, ie. the part after the last / </s> basename "$(pwd)"
Set the exit code($?) to '0'. </s> true
List all *.ogg files under your home directory along with their size </s> find $HOME -name '*.ogg' -type f -exec du -h '{}' \;
Save the percentage of packets lost of the 5 packets sent to "$host" in variable "packet_loss" </s> packet_loss=$(ping -c 5 -q $host | grep -oP '\d+(?=% packet loss)')
Make directory "mybuild" </s> mkdir mybuild
Find all 'test' directories in the current directory tree and remove them </s> find . -name test -type d -print0|xargs -0 rm -r --
find all files  the current folder which have not been accessed in the last 7 days and which are bigger than 20KB </s> find . -atime +7 -size +20480 -print
Sets shell options 'globstar' and 'nullglob'. </s> shopt -s globstar nullglob
create archive "backup.tar.gz" from /path/to/catalog </s> tar czfP backup.tar.gz /path/to/catalog
find all the files in the current folder which end with "ext1" or "ext2" or "ext3" </s> find -E . -regex ".*ext1|.*ext2|.*ext3"
Set the group to "username" for all files with GID=1000 in the current directory tree </s> find -gid 1000 -exec chown -h :username {} \;
Move all Emacs backup files from the current directory tree to ~/backups/ </s> find . -name '*~' -print 0 | xargs -0 -I % cp % ~/backups
Overwrites file 'filename' with random content 35 times, finally writes it with zeros, truncates and deletes. </s> shred -uzn 35 filename
Find all PHP files in the current directory recursively </s> find . -name \*.php -type f
Delete all files in the current user's home directory and its sub-directories that have not been accessed for more than 100 days. </s> find ~ -atime +100 -delete
Find all files/directories in entire file system that are owned by "syslog" user </s> find / -user syslog
Move all files and directories in the current directory to "$TARGET" excluding files matching "$EXCLUDE" </s> ls -1 | grep -v ^$EXCLUDE | xargs -I{} mv {} $TARGET
split file abc.txt into pieces per 1500000000 bytes named as "abc.NNN" </s> split --bytes=1500000000 abc.txt abc
find all the text files in the current folder and display the results pagewise </s> find . -name "*.txt" -print | less
find all symbolic links in the current folder </s> find -type l
find all files in the current folder which have been modified in the last 24 hours and whose file name is of length 1 </s> find . -name \? -mtime -1
Recursively counts non-blank, non-comment lines in all *.c files in a current folder. </s> find . -type f -name '*.c' -exec cat {} \; | sed '/^\s*#/d;/^\s*$/d;/^\s*\/\//d' | wc -l
Print the current directory name without full path </s> echo "$PWD" | sed 's!.*/!!'
search for the regular/normal file "myfile" in the current folder excluding search in the paths of "work" and "home" sub directories </s> find .  \( -name work -o -name home \)  -prune -o -name myfile -type f -print
Find all files named "foo_bar" in the current directory recursively </s> find -name foo_bar
Print unique lines of sorted file "a" and "b" and remove leading tabs </s> comm -3 a b | sed 's/^\t//'
Remove all regular files in the current directory </s> find ./ -type f -exec rm -rf {} \;
Find all the files that end with the extension “.java” in the current directoy tree </s> find . -name "*.java"
Set variable PING to 1 if it's possible to ping host ADDRESS, to 0 otherwise. </s> PING=$(ping ADDRESS -c 1 | grep -E -o '[0-9]+ received' | cut -f1 -d' ')
display all file in the home folder except ".c" files </s> find $HOME \! -iname "*.c" print
create a compressed archive with files newer than 1st of January 2014, 18:00:00. </s> tar -N '2014-02-01 18:00:00' -jcvf archive.tar.bz2 files
Search for files only that end with .php and look for the string $test inside those files </s> find . -name \*.php -type f -print0 | xargs -0 -n1 grep -Hn '$test'
remove all the ".core" files in the file system </s> find / -name "*.core" -print -exec rm {} \;
Gets IP addresses of all active network interfaces. </s> ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $1}'
split compressed content of the file www into pieces per 1073741824 bytes named as "backup.tar.NNN" </s> tar czf - www|split -b 1073741824 - www-backup.tar.
Recursively change the group ownership to "laravel" in "./bootstrap/cache" </s> sudo chown -R :laravel ./bootstrap/cache
Change permissions to u=rw,g=r,o= for all files inside the current directory tree </s> find . -type f -exec chmod u=rw,g=r,o= '{}' \;
Find all files/directories named 'vimrc' in the entire filesystem </s> find / -name vimrc
Replace each non-blank line in "YOURFILE" preceded with "pX=" where "X" is the line number </s> grep -v '^$' YOURFILE | nl -s= -w99 | tr -s ' ' p
List all files in entire file system owned by the user wnj and are newer than the file ttt </s> find / -newer ttt -user wnj -print
remove all the files in the folder "myfiiles" which have not been accessed in the last 30*24 hours </s> find /myfiles -atime +30 -exec rm {} ;
Find all files/directories named 'pattern' under current directory tree </s> find . -name "pattern" -print
extract "filename.tar.xz" with verbose output </s> $ tar xvfJ filename.tar.xz
search the pattern ^PyErr in all the ".c" files in the folder Lib/ </s> find Lib/ -name '*.c' -print0 | xargs -0 grep ^PyErr
find all files in the file system which belong to the group users and having the word "filename" in their name. </s> find / -group users -iname "filename"
Saves index number of file 'script.sh' in the 'inode' variable. </s> inode=`ls -i ./script.sh | cut -d" " -f1`
display all the doc files in the current folder ( files ending with ".doc" ) </s> find . -name '*.doc'
Find all test1.h files under current directory </s> sudo find . -name test1.h
Exclude directory from find . command </s> find ./ -path ./beta/* -prune -o -iname example.com -print
List environment variable values whose name matches '^\w*X\w*' </s> set | grep -P '^\w*X\w*(?==)' | grep -oP '(?<==).*'
sort each file in the bills directory, leaving the output in that file name with .sorted appended </s> find bills -type f | xargs -I XX sort -o XX.sorted XX
Find all *.ogg (case insensitive) files/directories in entire file system </s> sudo find / -iname '*.ogg'
Search the system for the file 'myfile' ignoring permission denied errors </s> find . -name myfile |& grep -v 'Permission denied'
Print numbered list of all third-level files under the current directory </s> ls -d -1 $PWD/**/*/* | cat -n
Enables 'dotglob' shell option. </s> shopt -s dotglob
Find a 400 permission file under /data directory </s> find /data -type f -perm 400 -print -quit
Write "deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen" to standard output and append to "/etc/apt/sources.list.d/10gen.list" as root </s> sudo echo "deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen" | sudo tee -a /etc/apt/sources.list.d/10gen.list
find all the files in the folder /opt which have been accessed exactly 20 days ago </s> find /opt -atime 20
use regex with find command </s> find . -regextype posix-egrep -regex '\./[a-f0-9\-]{36}\.jpg'
Print "#include" statements found in "file2" that are not in "file1" </s> comm -13 <(grep '#include' file1 | sort) <(grep '#include' file2 | sort)
Search all variables and their values for "NAME" </s> env | grep NAME
Find and delete all hard links in the /home directory tree to file1 </s> find /home -xdev -samefile file1 | xargs rm
search for all regular files in the current directory which have the extension "c" or "asm" </s> find . -type f \( -iname "*.c" -or -iname "*.asm" \)
Search directory tree $DIR for *.txt files </s> find $DIR -name "*.txt" -print
Remove all regular files found in and below /path </s> find /path -type f -exec rm '{}' +
display all directories which have not been accessed in the last 24*3 hours </s> find -type d -and -atime +3
Split "input.txt" into files of at most 10 bytes each with prefix "xxx/split-file" </s> split -b 10 input.txt xxx/split-file
Wrap each line in "file" to fit in 80 characters and count the number of lines </s> fold file | wc -l
Change every reference to the colour red to green in all CSS files </s> find . -name "*.css" -exec sed -i -r 's/#(FF0000|F00)\b/#0F0/' {} \;
Display a long listing of the oldest file under '/hom/backups' directory tree </s> find /home/backups -printf "%T@ %p\n" | sort -n | head -1 | cut -d" " -f2- | xargs ls -al
search for all empty directories in the folder /home </s> find /home -type d -empty
SSH into "hostname" on port 22 as user "myName" </s> ssh -l myName -p 22 hostname
Print a list of all the files in entire file system whose inode has been modified no later than one minute ago </s> find / -newerct '1 minute ago' -print
display all the hidden files in the directory "/dir/to/search/" </s> find /dir/to/search/ -name ".*" -print
find all the mp3 files in the home folder which have been modified today </s> find ~ -type f -mtime 0 -iname '*.mp3'
Remove trailing white spaces from all files under current directory ignoring directories wtih *.git* (case insensitive) in their paths and keep backups of the originals </s> find . -type f -not -iwholename '*.git*' -print0  | xargs -0 sed -i .bak -E "s/[[:space:]]*$//"
search for the file "file_name" in the folder /path </s> find /path -name file_name
Find all .txt files under the current directory and below </s> find . -name "*.txt"
Merge colon-separated information from file1 and file2 where second field of both files matches, sorting the result based on this field - for each line, output: first 3 fields of first file, followed by first 3 fields of second file. </s> join -o 1.1,1.2,1.3,2.1,2.2,2.3 -j2 <(sort -k2 file1) <(sort -k2 file2)
Change the file extension from '.txt' to '.bak' for all files/directories under current directory tree </s> find . -name "*.txt" | sed "s/\.txt$//" | xargs -i echo mv {}.txt {}.bak | sh
Print only first line of 'file' content, formatted as 29-symbol wide column </s> cat file | fold -w29 | head -1
Calculate the md5 sum of all files in "/your/dir" including content and filenames and following symbolic links </s> grep -aR -e . /your/dir | md5sum | cut -c-32
find all files in current folder which are bigger than 1 MB and move them to another folder </s> find . -size +1M -exec mv {} files \+
Replace all occurrences of word "foo" with "bar" in *.c and *.h files from the current directory tree </s> find -name '*.[ch]' -exec sed -i 's/\<foo\>/bar/g' {} +
Find all *shp* directories under current directory and move all regular files inside those directories to ../shp_all/ </s> mv $(find $(find . -name "*shp*" -printf "%h\n" | uniq) -type f) ../shp_all/
Prints process tree of a process having id $ID with parent processes. </s> pstree -s $ID
Find directories owned by user news with permissions 775 </s> find / -user news -type d -perm 775 -print
Remove what follows the forth occurrence of the character ":" in any field which contains it </s> sed -r 's/((:[^: \t]*){3}):[^ \t]*/\1/g' file | column -t
find all files that are readable and writable by their owner </s> find . -perm -600 -print
Remove everything in a current folder prompting user on each action. </s> rm -ri *
Remount "/" with read and write permission </s> mount / -o remount,rw
Recursively change the owner of all files in "/usr/local/lib/node_modules" to the current user </s> sudo chown -R $USER /usr/local/lib/node_modules
search for the file test in the current folder </s> find . -name test
Find regular files matching pattern "*oraenv*" and excecute the "file" utility for each of them </s> find . -name "*oraenv*" -type f -exec file {} \;
Find all *.c files under and below the current directory that contain "wait_event_interruptible" </s> find . -name \*.c -print | xargs grep wait_event_interruptible /dev/null
Find all .sql files in the current directory recursively and print their path names separated by zeroes </s> find . -name '*.sql' -print0
Find all files/directories under current directory that match the case insensitive regex .*/\(EA\|FS\)_.* </s> find . -iregex '.*/\(EA\|FS\)_.*'
Print the difference between line 2 and 3 in file "$f" </s> diff <(fold -w1 <(sed '2q;d' $f)) <(fold -w1 <(sed '3q;d' $f)) | awk '/[<>]/{printf $2}'
Rename file extension '.andnav' to '.tile' for all files/directories under current directory tree </s> find . -name "*.andnav" | rename "s/\.andnav$/.tile/"
Find '*prefs copy' files under /mnt/zip and delete them with confirmation prompt ensuring white space safety </s> find /mnt/zip -name "*prefs copy" -print0 | xargs    -0 -p /bin/rm
Find empty files/directories under test directory </s> find test -empty
Search .c and .h files in the current directory tree for "expr" </s> find . -name '*.[ch]' | xargs grep -E 'expr'
Changes group ownership of 'logdir' to 'loggroup'. </s> chgrp loggroup logdir
Pick up a list of variable:value pairs from msgs.config and add them to the current shell or script's environment. </s> source <( sed 's/:\(.*\)/="\1"/' msgs.config )
Replace all negative numbers in the 3rd comma-separated column of inputfile by the number notated in parenthesis instead of with a minus sign. </s> awk -F, 'BEGIN {OFS = ","} {gsub("-([0-9.]+)", "(" substr($3, 2) ")", $3); print}' inputfile
find all files in the file system which belong to no user or which have no user </s> find / -nouser
Find all "YourProgramName" regular files in the current directory tree and print the full paths to the directories containing them </s> find . -type f -name YourProgramName -execdir pwd \;
Find all symbolic links containing 'javaplugin' in their names under '/usr' directory tree </s> find /usr/ -lname *javaplugin*
Find all files/directories under '/var/tmp' directory tree that belong to a user with user id 1000 </s> find /var/tmp -uid 1000
Takes folder name of file $0, changes backslashes to forward ones and saves result in $basedir variable. </s> basedir=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")
Find all regular files in the current directory tree and print a command to move them to the current directory </s> find . -type f -exec echo mv -t . {} +
Make directories "es/LC_MESSAGES" as needed and do not error if it exists </s> mkdir -p es/LC_MESSAGES
find all the jpg files in the directory /ftp/dir which are bigger than 500KB </s> find /ftp/dir/ -size +500k -iname "*.jpg"
display long listing of all normal/regular files in the current directory which have been modified in the last 2 days. </s> find . -mtime -2 -type f -name "t*" -exec ls -l '{}' \;
display list of all the files in the current directory </s> find | xargs ls
Find all files/directories named 'foo.bar' under './dir1' and './dir2' directory trees </s> find ./dir1 ./dir2 -name foo.bar -print
Search for files/directories with a case insensitive .txt extension in entire file system </s> find / -iname '*.txt'
display all the directories in the folder /path/to/dest except tmp and cache directories </s> find /path/to/dest -type d \( ! -name tmp \) -o \( ! -name cache \) -print
Remove all regular files under $DIR directory tree that were accessed more than 5 days ago </s> find "$DIR" -type f -atime +5 -exec rm {} \;
find all the files ending with "clj" in the current folder and search for a pattern </s> find . -name '*.clj' -exec grep -r resources {} \;
Find all regular files in /usr/bin modified less than within the last 10 days </s> find /usr/bin -type f -mtime -10
Find recursively all empty directories in the current directory </s> find -type d -empty
Find all instances of first column with unique rest of line, and output a count for each first column that found in unique lines. </s> sort file | uniq | cut -f1 -d' ' | uniq -c | rev
Search the current directory tree for a regular file named "file_name" </s> find . -type f -name file_name
List regular files in current directory with read, write and execute permission for all users and also show the permissions </s> find . -type f  -perm a=rwx -exec ls -l {} \;
Finds recursively and following symlinks from root folder all files that contain "text-to-find-here" and prints files names. </s> grep -Ril "text-to-find-here" /
Count the number of files named 'job.history' under '/data/SpoolIn' directory tree that match 'FAIL' in their contents </s> find /data/SpoolIn -name job.history -exec grep -l FAIL {} \; | wc -l
Print the current directory tree with file permissions </s> tree -p
Search "file1" for lines matching regex patterns listed in "file2" and list the unique results (sorted alphabetically) </s> grep -f file2 file1 | sort -u
Save absolute path of "$path" that must exist along with all parents to variable "abspath" </s> abspath=$(readlink -e $path)
display all scala files in the directory "src/main" </s> find . -path "*src/main*" -type f -iname "*\.scala*"
Remove all *.mp3 files in tmp directory but not in it's subdirectories </s> find tmp -maxdepth 1 -name '*.mp3' -maxdepth 1 | xargs    -n1 rm
Ping every address from 192.168.0.1 to 192.168.0.254 with a timeout of 1 second and filter out no responses </s> echo $(seq 254) | xargs -P255 -I% -d" " ping -W 1 -c 1 192.168.0.% | grep -E "[0-1].*?:"
delete all text files in the entire file system </s> find / -type f -name "*.txt" -print | xargs rm
Search the current directory tree for files and directories whose names do not end in ".exe" and ".dll" </s> find . -name \*.exe -o -name \*.dll -o -print
Run the file command on every regular file under current directory </s> find . -type f -exec file '{}' \;
Find all files whose names end with "~" in the /home/peter directory tree, following symlinks, and delete them </s> find -L /home/peter -name *~ -print0 |xargs -0 -r rm
Finds recursively all folders named 'a' within current folder and removes only ones without files and another folders within. </s> find . -name "a" -type d | xargs rmdir
Locate files not owned by any user or group </s> find / -path /proc -prune -o -nouser -o -nogroup
Find all *.html files under current directory </s> find . -type f -name '*.html'
change the directory to the last found folder in the directory 'a' </s> cd `find a |sed '$!d'`
Find files that don’t have 644 permissions </s> find / -type f ! -perm 644
Print file information of command "bash" </s> echo $(ls -l $(which bash))
Search the /etc/apache-perl directory tree for files newer than /etc/apache-perl/httpd.conf </s> find /etc/apache-perl -newer /etc/apache-perl/httpd.conf
Find all .java files whose name contains "Message" </s> find . -print | grep '.*Message.*\.java'
Display the host's ECDSA fingerprint using the md5 hasing algorithm. </s> ssh-keygen -l -E md5 -f /etc/ssh/ssh_host_ecdsa_key.pub
Find all *.txt files/directories under current directory </s> find . -name "*.txt" -print
Display the current directory tree except files or directories starting with "3rd" </s> tree -I '3rd*'
Print only common file names in sorted listings of directory 'dir1' and 'dir2' </s> comm -1 -2 <(ls /dir1 | sort) <(ls /dir2 | sort)
Show a listing of files not modified in over 20 days or not accessed in over 40 days </s> find /mydir \(-mtime +20 -o -atime +40\) -exec ls -l {} \;
search for the directory starting with "ora10" in the entire file system </s> find / -type d -name "ora10*"
Search for files in your home directory which have been modified in the last twenty-four hours. </s> find $HOME  -mtime 0
Display inputfile all on one line (replace newlines by spaces) </s> awk 1 ORS=' ' file
List all cron jobs for current user. </s> crontab -l
Set permissions for files in `foldername' and its subdirectories to 644 </s> find foldername -type f -exec chmod 644 {} ";"
Find all *.* directories under /home/feeds/data directory </s> find /home/feeds/data -type d \( -name 'def/incoming' -o -name '456/incoming' -o -name arkona \) -prune -o -name '*.*' -print
Search the file hierarchy for files larger than 100000 KB without searching any mounted removable media </s> find / -path /media -prune -o -size +200000 -print
Remove the .jpg files from the current directory whose names match regular expression ".+-[0-9]+x[0-9]+\.jpg" </s> find . -type f -regex ".+-[0-9]+x[0-9]+\.jpg" | xargs rm
Counts lines in each *.cpp, *.c, *.h file. </s> wc -l `find . -type f \( -name "*.cpp" -o -name "*.c" -o -name "*.h" \) -print`
Make all regular files in the current directory tree world-readable </s> find . -type f -print0 | xargs -0 chmod go+r
Search the "test1" directory recursively for regular files named "textfile.txt" </s> find test1 -type f -name 'textfile.txt' -print
find all files in home folder which have been modified exactly 1 day before </s> find ~ -mtime 1 -daystart
List all files in /var/www and below that have changed in the last 10 minutes </s> find /var/www -cmin -10 -printf "%c %pn"
Rotates the dirs stack so that the second directory (counting from the right of the list shown by `dirs', starting with zero) is at the top. </s> pushd -2
find all gif files in the file system </s> find / -name "*gif" -print
search for the file chapter1 in the folder /work </s> find /work -name chapter1
Display who is logged on and what they are doing </s> w
Get domain name from dig reverse lookup. </s> $dig -x 8.8.8.8 | grep  PTR | grep -o google.*
Print the date formatted with "%a %x %X" followed by the host name </s> echo `date +"%a %x %X"` `hostname`
change the permissions of all regular/normal files in the current directory, print0 is used for handling files with newlines in their file name </s> find . -type f -print0 | xargs -0 chmod 664
Display the content of YourFile.txt, waiting for user input at each page. </s> more YourFile.txt
Search the current directory for regular files whose names start with my </s> find . -name 'my*' -type f
Find all directories under /path/to/Dir and set their permission to 755 </s> sudo find /path/to/Dir -type d -print0 | xargs -0 sudo chmod 755
Recursively change the owner and group of "/workspace" and "775" to "your_user_name" </s> chown -R your_user_name.your_user_name 775 /workspace
Copies all files like "*FooBar*" under the current directory to the '~/foobar' directory. </s> find . -name '*FooBar*' -exec cp -t ~/foobar -- {} +
Create symlinks to all  /home/folder2/*.txt files with the same name in current directory </s> find /home/folder2/*.txt -type f -exec ln -s {} \;
Make directory "TestProject" </s> mkdir TestProject
Copy the owner and group of "oldfile" to "newfile" </s> chown --reference=oldfile newfile
simulate a full login of user builder </s> su -l builder
Find all directories under /path/to/base/cache, /path/to/base/tmp, /path/to/base/logs  and change their permission to 755 </s> find /path/to/base/cache /path/to/base/tmp /path/to/base/logs -type d -exec chmod 755 {} +
Search *.x files from the current directory tree for string "fred" </s> find . -name ‘*.x’ -print0 | xargs -0 grep fred
display all files  expect directories in the current folder </s> find . ! — type d -print
In the current shell, interpret 'incl.sh' which is in the directory pointed by variable DIR </s> source "$DIR/incl.sh"
Print the average round trip time of 5 pings to "google.com" </s> ping -q -c 5 google.com | tail -n 1 | cut -f 5 -d '/'
display all regular/normal files in a directory </s> find $directory -type f
Search the /path directory tree for files that do not have a valid user or group </s> find /path -nouser -or -nogroup
Prints long listing of directories '/tmp', '/tnt' themselves. </s> ls -ld /tmp /tnt
display all regular files in the folder image-folder </s> find image-folder/ -type f
Finds only parts of echoed string that match with regex 'run-parts (-{1,2}\S+ )*\S+', and saves them in $match variable, each matched part on a separate line. </s> match=$(echo "${line}" | egrep -o 'run-parts (-{1,2}\S+ )*\S+')
Print the line with most consecutive repeats prefixed with its count from standard input </s> uniq -c | sort -n | tail -n1
Find the 5 largest regular files in the Downloads folder of tecmint's home directory. </s> find /home/tecmint/Downloads/ -type f -exec du -Sh {} + | sort -rh | head -n 5
find all the directories in the current directory which dont have the execute permission. </s> find -type d ! -perm -111
search for all the files in the current directory which have size greater than 10KB (approx) and less than 32KB(approx). </s> find . -size +10000c -size -32000c -print
List all empty files in the current directory tree </s> find . -type f -empty
Creates temporary file in default folder and saves path to it in 'source' variable. </s> source=`mktemp`
Recursively finds all files in root folder and prints all strings with 'text-to-find-here' from that files, preceding matched string with filename. </s> find ~/ -type f -exec grep -H 'text-to-find-here' {} \;
Find all files with '.db' extension (case insensitive) that belong to user 'exampleuser' and were modified exactly 7 days ago under '/home' directory tree </s> find /home -user exampleuser -mtime 7 -iname ".db"
Delete all regular files that have not been modified in the last 31 days under '/path/to/junk/files' directory tree </s> find /path/to/junk/files -type f -mtime +31 -exec rm -f {} \;
Returns exit status 0. </s> foo=$(false)$(true)
Make "file.sh" executable </s> chmod +x file.sh
find all files in the current folder which have been modified after /etc/passwd </s> find -newer /etc/passwd
Find all *.rpm files/directories under current directory </s> find . -name '*.rpm'
force remove all the directories with the name logs in the folder /var/www </s> find /var/www -type d -mtime 0 -name logs -exec sudo rm -fr {} \;
Show files in maximum 1 level down the current directory that were modified less than 1 day ago from today </s> less `find -maxdepth 1 -type f -daystart -mtime -1`
List files in the current directory and below that are exactly 1234 bytes in size </s> find . -size 1234c
Split "your_file" into files with at most 9 lines each </s> split -l9 your_file
delete all the files which start with "Tes" in the current folder </s> find . -type f -name "Tes*" -exec rm {} \;
Perform a case insensitive search for *.jpg files which are greater than 500KB in size under /ftp/dir/ directory </s> find /ftp/dir/ -size +500k -iname "*.jpg"
Find and clear UTF-8 files with BOM </s> find . -type f -exec sed '1s/^\xEF\xBB\xBF//' -i.bak {} \; -exec rm {}.bak \;
Print yesterday's date as yyy:mm:dd </s> date +%Y:%m:%d -d "yesterday"
Find all files accessed on the 29th of September, 2008, starting from the current directory </s> find . -type f -newerat 2008-09-29 ! -newerat 2008-09-30
Adjust the timestamp of 'filename' by subtracting 2 hours from it. </s> touch -d "$(date -r filename) - 2 hours" filename
Read the history file and append the contents to the history list </s> history -r
Find all regular files in the current directory tree, except GIT files </s> find .  -name .git -prune -o -type f -print
search for the word "nutshell" or "Nutshell" in all the files in the folder book </s> find /book -print | xargs grep '[Nn] utshell'
run ksh shell as user apache </s> su apache -s /bin/ksh
Search for first match of the case insensitive regex 're' in all *.coffee files under current directory and print the file paths along with the matches </s> find . -print0 -name '*.coffee'|xargs -0 grep -m1 -ri 're'
Creates temporary file name and saves path to it in 'TMP_FILE' variable. </s> TMP_FILE="$(mktemp -t)"
Find files/directories named 'somename.txt' under current directory tree </s> find ./ -name "somename.txt"
display ten files in the tmp directory </s> find /tmp  | head
find all the files in the file system which have not been modified in the last 100*24 hours </s> find / -mtime +100 -print
change permission of all the files in the entire file system which have the permissions 777. </s> find / -type f -perm 0777 -print -exec chmod 644 {} \;
search for the file foo in  the current folder and display a long listing of it in sorted order of modification date </s> find . -name foo | xargs ls -tl
Print lines of 'file' reverted order, and reverted characterwise </s> tac file | rev
Compose filepath as folder path where file $SRC is located, and lowercase filename of $SRC file, and save it in 'DST' variable </s> DST=`dirname "${SRC}"`/`basename "${SRC}" | tr '[A-Z]' '[a-z]'`
Creates temporary folder within a $mnt_dir folder and saves path to it in a 'rsync_src' variable. </s> rsync_src=`mktemp -d -p $mnt_dir`
Find all directories under current directory and set read & execute permission for group and other for these files </s> find . -type d -print0 | xargs -0 chmod go+rx
change the permission of all php files in current folder </s> find . -name "*.php" -exec chmod 755 {} \;
Search for the wp-config.php file in /var/www and one level below </s> find /var/www/ -name wp-config.php -maxdepth 2
Print command history </s> history
Compress regular files in the current directory tree that were last modified more than 7 days ago </s> find . -type f  -mtime +7 | tee compressedP.list | xargs compress
Copy all .txt files from the dir/ directory tree along with their parent directories hierarchy </s> find dir/ -name '*.txt' | xargs cp -a --target-directory=dir_txt/ --parents
Display inputfile all on one line (replace newlines by spaces) </s> awk '{printf "%s|", $0} END {printf "\n"}' inputfile
Search for files/directories with the case insensitive pattern anaconda.* in var/log directory </s> find var/log/ -iname anaconda.*
Lists all files in a current folder, separating names with comma. </s> ls -1 | paste -sd "," -
find all the files that have been modified in the last 2 days </s> find . -type f -daystart -mtime -2
Find files under /tmp that are larger than 10KB and smaller than 20KB </s> find /tmp -size +10k -size -20k
Remove the "^M" characters from all *.ext files under /home directory </s> find /home -type f -name "*.ext" -exec sed -i -e 's/^M$//' {} \;
find all the symbolic links in the current folder and follow to the pointing file </s> find -L
display all the text files in the home folder ( case insensitive search ) </s> find /home -iname "*.txt"
Print the first line of every file matching pattern 'file?B' in the xargstest/ directory tree </s> find xargstest/ -name 'file?B' | sort | xargs head -n1
Count the number of the regular files residing under and below ./randfiles/ </s> find ./randfiles/ -type f | wc -l
Shows MAC address of network interface eth0. </s> ifconfig eth0 | grep HWaddr |cut -dH -f2|cut -d\  -f2
get a PID of a process </s> jobs -x echo %1
Find all files whose filename does not end with *.html. </s> find . -type f -not -name "*.html"
only get md5sum of a file </s> md5 -q file
Find all files/directories named 'articles.jpg' under current directory tree </s> find . -name "articles.jpg"
Display the 5 smallest files in the current directory and its sub-directories. </s> find . -type f -exec ls -s {} \; | sort -n  | head -5
find all the ".JPG" files in current folder and display their count </s> find ./ -name '*.JPG' -type f | wc -l
get all files in a current directory modified in the last 7 days </s> find . -mtime -7 -print0 | xargs -0 tar -rf /foo/archive.tar
Print the terminal file of the users who are logged in with "admin" in their name </s> who |grep -i admin |cut -c10-20
Move all directories in the current directory that match "some-dir" to "x/" </s> find ./ -maxdepth 1 -name "some-dir" -type d -print0 | xargs -0r mv -t x/
display all the files in the current folder excluding those that are present in the path "./etc" </s> find . ! -wholename "./etc*"
Find all *.csv files under /foot/bar/ and move them to some_dir </s> find /foot/bar/ -name '*.csv' -print0 | xargs -0 mv -t some_dir
Find every vim undo file under current directory </s> find -type f -iname '*.un~'
Copy all *.mp3 files under the current directory to /tmp/MusicFiles/ </s> find . -type f -name "*.mp3" -exec cp {} /tmp/MusicFiles \;
Download "http://archive.ubuntu.com/ubuntu/pool/universe/s/splint/splint_3.1.2.dfsg1-2.diff.gz", unzip it, and view the output in "less" </s> curl -s 'http://archive.ubuntu.com/ubuntu/pool/universe/s/splint/splint_3.1.2.dfsg1-2.diff.gz' | gunzip -dc | less
prints a number stored among text in $filename </s> echo $filename | egrep -o '[[:digit:]]{5}' | head -n1
Find all file.ext files/directories under present working directory and print . for each of them </s> find `pwd` -name "file.ext" -exec echo $(dirname {}) \;
Find files and directories newer than CompareFile under current directory </s> find . -newer CompareFile -print
Print the current user name associated with standard input </s> who -m | awk '{print $1;}'
Prints process tree of a current process with id numbers and parent processes. </s> pstree -sp $$
Copy /my/configfile to all empty directories of the $somedir directory tree </s> find "$somedir" -type d -empty -exec cp /my/configfile {} \;
Remove all but 5 last comma-separated fields from each line in 'data.csv' </s> cat data.csv | rev | cut -d, -f-5 | rev
Find files/directories named blah under current directory </s> find ./ -name blah
Read a line from standard input into variable "REPLY" with prompt "$*" </s> read -p "$*"
find all the files (under root file system /) that were updated in the last 24 hours </s> find / -mtime -1
Find all files with the extension jpg regardless of case </s> find . -type f -iname '*.jpg' -print0
Print the list of directories that are present in the /mnt/raid directory tree </s> find /mnt/raid -type d
search  in current directory downwards all files whose status has changed more then 7  days ago </s> find .  -ctime +7 -print
delete all the mp3 files in the current folder. </s> find . -type f -name "*.mp3" -exec rm -f {} \;
find all files in the file system which are modified after the file /tmp/checkpoint </s> find / -newer /tmp/checkpoint
Find recursively the latest modified file in the current directory </s> find . -type f | sed 's/.*/"&"/' | xargs ls -E | awk '{ print $6," ",$7," ",$9 }' | sort | tail -1
Count the number of regular files with 755 permission under current directory tree </s> find . -type f -perm 755 | wc -l
Archive "/path/to/files" on host "remotemachine" authentifying as user "user" and compressing data during transmission, copy symlinks as symlinks. </s> rsync -avlzp user@remotemachine:/path/to/files /path/to/this/folder
Find files in the current directory tree whose size is greater than 24000 bytes </s> find . -size +24000c
Search for files bigger than 10M </s> find ~ -size +10M
display all regular files in current folder which have spaces in their name </s> find -type f -name "* *"
find all executable files </s> find / -executable
Print 7 spaces in a row </s> yes ' ' | head -7 | tr -d '\n'
Find all the files named 'vimrc' anywhere on the system </s> find / -name vimrc
Treat each line of "list-of-entries.txt" as a value to be put in one cell of the table that "column" outputs </s> column list-of-entries.txt
Count the number of directories in the current directory and below </s> find . -type f -exec basename {} \; | wc -l
Find files under current directory without descending into other file systems and append a null character at the end of each paths </s> find -x . -type f -print0
List all *.bak files in the current directory tree </s> find  . -name '*.bak' -ls
Calculate the md5 sum of "logdir" and print only the hash </s> echo -n "logdir" | md5sum - | awk '{print $1}'
Print a sorted list of *.so files in the bla directory tree </s> find bla -name *.so -print0 | sort -rz
find all the files in the current folder which have been accessed in the last 24 hours </s> find . -type f -atime 1
Display 12345 backwards </s> echo 12345 | rev
Search "file1" for lines matching regex patterns listed in "file2" and list the unique results (sorted alphabetically) </s> grep -f file2 file1 | sort | uniq
list regular files under the user's home directory that are over 100KB and have not been accessed in over 30 days. </s> find $HOME -type f -atime +30 -size 100k
insert "e" when it's pressed </s> bind '"e":self-insert'
find all class files or sh script files  in the current folder </s> find . -type f \( -name "*.class" -o -name "*.sh" \)
search for text files in the folder /home/you which have been modified in the last 60*24 hours(case insensitive search) and display their contents </s> find /home/you -iname "*.txt" -mtime -60 -exec cat {} \;
Extract five digits sequence from a filename with x number of alphanumeric characters followed by the five digit sequence surrounded by a single underscore on either side then another set of x number of alphanumeric characters. </s> echo 'someletters_12345_moreleters.ext' | cut -d'_' -f 2
Show the list of files that are not owned by user wnj or are not newer than file `ttt' </s> find / \! \( -newer ttt -user wnj \) -print
Report file system containing path to the current working directory disk usage in kilobytes. </s> df -k .
Delete all empty files and directories in the "test" directory tree </s> find test -depth -empty -delete
Create symbolic links in the current directory for all files excluding "CONFIGFILE" located under "/your/project" directory tree </s> find /your/project -type f ! -name 'CONFIGFILE' -exec ln -s \{\} ./ \;
Search the bla directory recursively for *.so files </s> find bla -name "*.so"
Find all files under /myfiles with 647 permission </s> find /myfiles -type f -perm -647
find all the files in the current folder which are readable </s> find . -readable
search all the files in the folder "myfiles" which have the word "blue" in their name </s> find /myfiles -name '*blue*'
See the word count of every *.txt file in the home directory </s> find ~/ -name '*.txt' -print0 | xargs -0 wc -w
Find all *.m4a files/directories under /home/family/Music directory </s> find /home/family/Music -name '*.m4a' -print0
display all the files in current folder which are bigger than 10KB </s> find . -size +10k
Print the list of all files except files named BBB </s> find . \! -name BBB -print
Find files owned by nonexistent users </s> find / -nouser -print
Copy the current directory tree to '/path/to/destination/dir' preserving permissions, timestamp and ownership </s> find . | cpio -pdumv /path/to/destination/dir
Set variable 'file' to the base name of first argument to script or function, that is the part following the last slash. </s> file=`basename "$1"`
search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 </s> find / -iname "*.mp3" -type f -print0 | xargs -0 -I '{}' /bin/mv "{}" /mnt/mp3/
remove all the files with the name "Trash" in the folder /home </s> find /home -name Trash -exec rm {} \;
Find all *.ogg files under the home directory ignoring the case </s> find $HOME -iname '*.ogg'
Find files owned by nonexistent groups </s> find / -nogroup -print
Delete all non digits from index "$i" in bash array "depsAlastmodified" and print the hex dump as characters </s> echo "${depsAlastmodified[$i]}" | tr -cd '[[:digit:]]' | od -c
Delete all *.zip files under current directory that are older than 2 days </s> find . -name "*.zip" -mtime +2 -print0 | xargs -0 -I {} rm {}
Search /etc for files modified within the last 10 minutes </s> find /etc -type f -mmin -10
Print $d if $d is an empty directory </s> find "$d" -prune -empty -type d
Search the current directory tree for .rb files ignoring the "./vendor" subdirectory </s> find . -name '*.rb' ! -wholename "./vendor/*" -print
Look for *.jpg files </s> find . -name “*.jpg”
Find all regular files starting from level 3 of directory tree ~/container and move them one level up </s> find ~/container -mindepth 3 -type f -execdir mv "{}" ./.. \;
Search  in current directory downwards all files which  have not been accessed since last 7 days </s> find . -atime +7 -print
Find all files whose names end with "~" in the /home/peter directory tree, following symlinks, and delete them </s> find -L /home/peter -name *~ -print0 |xargs -0 -r -n1000 rm
Find all files under current directory and show their file information </s> find . -type f -exec file {} \;
Find all the Sticky Bit set files in entire file system whose permission are 551 </s> find / -perm 0551
Find files that have a modification time of a day ago </s> find / -mtime 1
Delete all directories found in $LOGDIR that are more than a work-week old </s> find $LOGDIR -type d -mtime +5 -exec rm -rf {} \;
search for all the files in the folder /usr/bin which have not been accessed in the last 100*24 hours </s> find /usr/bin -type f -atime +100
Print the names of the directories from the paths expanded by the glob pattern /path/to/directory/* </s> find /path/to/directory/* -maxdepth 0 -type d -printf '%f\n'
remove all the pdf files in the current folder and do not delete those in the sub folders </s> find . -name "*.pdf" -maxdepth 1 -print0 | xargs -0 rm
List all .jpg files in the home directory tree </s> find . -name "*.jpg" -exec ls {} \;
Set permissions to ug=rwx,o= for directories inside the ./default/files tree </s> find ./default/files -type d -exec chmod ug=rwx,o= '{}' \;
display all the files in current folder which have been changed in the last 2-6 days </s> find . -cmin +2 -cmin -6
find all files in the folder /path/to/dir which have been modified between two dates </s> find /path/to/dir -newermt yyyy-mm-dd ! -newermt yyyy-mm-dd -ls
Find all files/directories named 'text' under current directory </s> find -name "text"
Print only digits in variable "$name" </s> echo $name | tr -c -d 0-9
Split "INPUT_FILE_NAME" into files of at most 500 MiB each with a numeric suffix of length 4 and prefix "input.part." </s> split -b 500M -d -a 4 INPUT_FILE_NAME input.part.
Search the current directory tree for all files except SVN ones </s> find . | grep -v \.svn
Find all files/directories under .. directory and copy them to ~/foo/bar </s> find .. -exec cp -t ~/foo/bar -- {} +
Print the full path of command "gcc" </s> which gcc
Replace spaces with underscores in the names of all files and directories in the "/tmp" directory tree </s> find /tmp/ -depth -name "* *" -execdir rename 's/ /_/g' "{}" \;
search for a word in all the shell scripts in the current folder and display the matched files.(case insensitive search in grep commad) </s> find . -type f -name "*.sh" -exec grep -il landoflinux {} \;
Create hard links of all files and directories matching "test/icecream/cupcake/*" or "test/mtndew/livewire/*" in "test-keep" preserving directory hierarchy </s> find test -path 'test/icecream/cupcake/*' -o -path 'test/mtndew/livewire/*' | cpio -padluv test-keep
Find files in the current directory and its sub-directories that begin with 'f'. </s> find . -name f* -print
Open a ssh connection to "user@host" with a control socket "/tmp/%r@%h:%p" </s> ssh user@host -S /tmp/%r@%h:%p
display all the ".c" files which have been modified in the last 10 minutes </s> find /home/david -amin -10 -name '*.c'
Converts all windows line endings to unix line endings </s> find $(pwd) -type f | xargs -I xxx sed -i 's/\r//g' xxx
Find all files/directores under '/usr/local' directory tree that case insensitively contain the word 'blast' in their names </s> find /usr/local -iname "*blast*"
Find all files excluding *.gz files in the current directory tree and compress them with gzip </s> find . -type f ! -name '*.gz' -exec gzip "{}" \;
Print a sorted list of regular files from directory tree /folder/of/stuff </s> find /folder/of/stuff -type f | sort
Search the /usr/ directory tree for files newer than file /tmp/stamp </s> find /usr -newer /tmp/stamp
Display a dump of "file" as floating point values of double size </s> od -t fD file
Set the timestamp of B to the same one as A </s> touch -r A B
Search for all .html files in directory "www" and output only the basename (without containing path) of each. </s> find www -name \*.html -type f -exec basename {} \;
Fetch a script from the web and interpert (run) it in the current shell, without writing the script to disk. </s> source <(wget -q -O - "http://www.modulesgarden.com/manage/dl.php?type=d&id=676")
Find files containing string "#!/bin/ksh" and append their names and matching strings to /tmp/allfiles </s> find . -type f -print | xargs /usr/bin/grep -il 'bin/ksh' | tee /tmp/allfiles
display long list of all the files in the folder /home/peter which belong to no user and change the owner,group of all these files (after user confirmation) to "peter","peter" </s> find /home/peter -nouser -exec ls -l {} \; -ok chown peter.peter {} \;
finda all the hidden files excluding those having the extension htaccess </s> find . -type f \( -iname ".*" ! -iname ".htaccess" \)
Search for 'pattern' in all files with '.cc' extension under current directory tree and show the matched lines with line numbers and filenames </s> find . -name “*.cc” |xargs grep -n “pattern”
Removes everything from current folder but '*ddl*' and '*docs*' files. </s> ls -1|grep -v -e ddl -e docs| xargs rm -rf
Create intermediate directories "full", "path" as required and directory "to" </s> mkdir -p `dirname /full/path/to/file.txt`
recursively change owner and group of the directory and all files into it to user "user" and group "www-data" </s> chown -R user:www-data yourprojectfoldername
kill all jobs </s> kill $(jobs -p)
Copy all files in current directory that do not match */not-from-here/* in their paths to /dest </s> find . -type f -not -path '*/not-from-here/*' -exec cp '{}' '/dest/{}' \;
Find all directories in maximum 1 level down the $front_element directory, sort them according to modification time and list them excluding the $front_element path from the list </s> find "$front_element" -maxdepth 1 -type d -not -path "$front_element" -printf '%T@ %p\n' | sort | awk '{print $2}'
Print the average round trip time of 5 pings to "google.com" from OSX </s> ping -c 5 google.com | grep "round-trip" | cut -f 5 -d "/"
Create a copy of index.html in all directories in current directory whose name contains Va, pausing for confirmation before overwriting any existing files - names may not contain spaces. </s> find . -mindepth 1 -maxdepth 1 -type d| grep \/a |xargs -n 1 cp -i index.html
Find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories </s> find ./ -name "foo.mp4" -printf "%h\n"
find all the reglar files which ahve been changed in the last 5 minutes and do not search in the sub directories. </s> find /home/pankaj -maxdepth 1 -cmin -5 -type f
display a long listing of all the empty files in the entire file system which are empty </s> find / -type f -size 0 -exec ls -l {} \;
find all the configuration files in the file system </s> find / -name "*.conf"
Replace all non-punctuation characters with newlines from standard input </s> tr -sc '[:punct:]' '\n'
Get the actual find exectuable path </s> which find
display all the configuration files in the etc folder </s> find /etc -name '*.conf'
Compress all ".txt" files in the current directory tree with gzip </s> find . -type f -name "*.txt" -exec gzip {} \;
Find all regular files under $SOURCE directory tree that were modified more than $KEEP days ago and show only the names without the paths </s> find $SOURCE -type f -mtime +$KEEP | sed ‘s#.*/##'
Saves invoked command 'check_script_call=$(history |tail -1|grep myscript.sh )' in variable 'check_script_call', preceeding by its number in history. </s> check_script_call=$(history |tail -1|grep myscript.sh )
Save a unique list of the currently logged in usernames to variable "line" </s> line=$(who | cut -d' ' -f1 | sort -u)
display all the regular/normal files in the current folder excluding the files "bbb" and "yyy" </s> find . \( -name bbb -o -name yyy \) -prune -o -type f -print
Append the current date in '%Y%m%d_%H%M' format with the basename of $0 and save it to variable 'LOGNAME' </s> LOGNAME="`basename "$0"`_`date "+%Y%m%d_%H%M"`"
Exit the shell immediately if an error is encountered, treat references to unset variables as errors, disable overwriting existing files, and use the first non-zero exit code of a set of piped commands as the exit code of the full set of commands </s> set -o errexit -o nounset -o noclobber -o pipefail
Find files that are orphaned </s> find -nouser
display all directories in the folder Symfony </s> find Symfony -type d
Find all files under /somefolder matching the extended regex '\./(.*\.error.*|second.*log|.*FFPC\.log)$' in their paths </s> find -E /somefolder -type f -regex '\./(.*\.error.*|second.*log|.*FFPC\.log)$'
Find all files called "INPUT.txt" in the current directory tree and remove lines starting with # in them, saving backup copies as INPUT.txt.bak </s> find . -type f -name INPUT.txt -print0 | xargs -0 -I {}  sed -i.bak '/^#/d' {}
Find all regular files in the current directory tree last modified between 1 and 3 days ago and list them using format '%Tc %p\n' </s> find ./ -daystart -mtime -3 -type f  ! -mtime -1  -printf '%Tc %p\n'
Add the .abc suffix to the names of all *.txt regular files in the current directory tree </s> find . -type f -iname '*.txt' -print0 | xargs -0 mv {} {}.abc
search for the files which contain the word start in their name excluding search in ./proc, ./sys, ./run folders </s> find . -path ./proc -prune -or -path ./sys -prune -or -path ./run -prune  -or -iname '*start*' -print
Search the file system for regular files whose pathnames are shorter than 25 characters </s> find / -type f|awk -F'/' '{print $NF}'| awk 'length($0) < 25'
Change the owner of "/var/www/html/mysite/images/" to "nobody" </s> sudo chown nobody /var/www/html/mysite/images/
Convert the content of variable 'CLEAN' to small letters </s> CLEAN=`echo -n $CLEAN | tr A-Z a-z`
Print all files and directories in the `.' directory tree skipping SCCS directories but printing out the SCCS directory name </s> find . -print -name SCCS -prune
Print a welcome message with the current user's user name </s> echo -ne "Welcome `whoami`!\n"
search for text files in the current folder which do not have write access to others </s> find . -type f \( -iname "*.txt" -not -perm -o=w \)
Copy all directories recursively from "source/" to "destination/" excluding all files </s> rsync -a --include='*/' --exclude='*' source/ destination/
Prints "$NEWFILE" to the terminal and file '/etc/timezone' as a root user. </s> echo "$NEWFILE" | sudo tee /etc/apt/sources.list
Print a count of each unique line from standard input sorted from least frequent to most frequent </s> sort | uniq -c | sort -n
Remove all CVS directories in the current directory tree </s> find . -type d -name CVS -exec rm -r {} \;
split listing of the current directory into pieces per 500 lines named "outputXYZNNN" </s> ls | split -l 500 - outputXYZ.
Gets MAC address of eth0 network interface. </s> ifconfig eth0 | grep HWaddr | cut -d ' ' -f 9
Find all *.epub, *.mobi, *.chm, *.rtf, *.lit and *.djvu files/directories under current directory </s> find ./ -name '*.epub' -o -name '*.mobi' -o -name '*.chm' -o -name '*.rtf' -o -name '*.lit' -o -name '*.djvu'
find out what group a given user has </s> groups user
Return a list of files newer than file poop </s> find . -mnewer poop
Find regular non-hidden files containing 'some text' in their names </s> find . -not -path '*/\.*' -type f -name '*some text*'
Removes all files from current folder but 5 newest ones. </s> rm `ls -t | awk 'NR>5'`
find all the header files in /usr/include which have been modified in the last 399 days and display the number of lines, number of files, number of characters of all these files </s> find usr/include -name '*.h' -mtime -399 | wc
Check whether "$path_in_question" is a mount point </s> df $path_in_question | grep " $path_in_question$"
List all files matching regular expression '*foo*' in a human-readable form </s> find . -name '*foo*' -exec ls -lah {} \;
display all the regular files in the current folder that are bigger than 10KB </s> find . -type f -size +10k
Counts lines in each *.php file. </s> wc -l `find . -name "*.php"`
Find files/directories named 'aaa.txt' under current directory tree </s> find . -name aaa.txt
List all *fink* files/directories in entire file system </s> find / \( -type f -or -type d \) -name \*fink\* -ls
Search directory foo for files containing "/tmp/foo/bar" in their full names </s> find foo -path /tmp/foo/bar -print
Prints sorted list of logged in users. </s> w -h  | cut -d' ' -f1 | sort | uniq
Find all files/directories named '.todo' under $STORAGEFOLDER directory tree and print their parent paths </s> find "$STORAGEFOLDER" -name .todo -printf '%h\n'
Find all regular files that reside in the current directory tree and were last modified more than 2 days ago </s> find . -type f -mtime +2
Create a symbolic link named ".bash_profile" to ".bashrc" </s> ln -s .bashrc .bash_profile
Unzip and untar "tarball.tar.gz" </s> zcat tarball.tar.gz | tar x
Archive "/media/10001/music/" on host "server" to local directory "/media/incoming/music/" and skip files that are newer in the destination, delete any files in the destination not in the source, and compress data during transmission </s> rsync -avzru --delete-excluded server:/media/10001/music/ /media/Incoming/music/
Search the regular files of the current directory tree for string "whatever" </s> find . -type f | xargs grep whatever
Find files under /etc/apache-perl that are modified more recently than /etc/apache-perl/httpd.conf </s> find /etc/apache-perl -newer /etc/apache-perl/httpd.conf
Print current shell using process ID </s> ps  -ef | grep $$ | grep -v grep
Search for "#define" in all files in the current directory, excluding backup files *~, *.orig, *.bak </s> find . -maxdepth 1 ! -regex '.*~$' ! -regex '.*\.orig$' \     ! -regex '.*\.bak$' -exec grep --color "#define" {} +
Force create a symbolic link named "$lines" to "$c" without dereferencing "$lines" </s> ln -sfn "$c" "$lines"
Find all files/directories named 'testfile.txt' under current directory tree </s> find . -name testfile.txt
Find all *.jpg (case insensitive) files under current directory </s> find . -iname '*.jpg'
Find all directories named 'files' under current directory and set read-write-execute permission for owner and group and no permission for other for those directories </s> find . -type d -name files -exec chmod ug=rwx,o= '{}' \;
Returns exit code 1. </s> false
Perform a dry run replacing "special" with "regular" in all file names in the current directory </s> rename -n 's/special/regular/' **
Find .jpg files owned by user daniel in the current directory and its sub-directories but ignore any file beginning with "autumn". </s> find . -user daniel -type f -name *.jpg ! -name autumn*
display all the regular/normal files in the entire file system </s> find / -type f -exec echo {} \;
Set permissions to 600 for regular files under media/ </s> find media/ -type f -exec chmod 600 {} \;
Find files that match the executable bit for owner or group </s> find -type f -perm /110
display all the ".c" files in the folder "/home/david" which have been accessed in the last 48 hours </s> find /home/david -atime -2 -name '*.c'
List each subdirectory name composing the current working directory </s> pwd | cut -b2- | tr '/' '\n'
Find all files/directories under current directory in maximum 3 levels deep </s> find -maxdepth 3
find files which full path name is /tmp/foo/bar under /tmp/foo directory and print </s> find /tmp/foo -path /tmp/foo/bar -print
Search all of /usr for any directory named 'My Files', for each directory found, copy it to /iscsi preserving full paths and attributes, then remove it. </s> find /usr -type d -name 'My Files' -exec rsync -avR '{}' /iscsi \;  -exec rm -rf '{}'\;
Send 4 ping packets of size 2 to "www.google.com" on a Solaris machine </s> ping -s www.google.com 2 4
Find all files named "file.ext" within the current folder and print the path where each one is located </s> find `pwd` -name "file.ext" -exec echo $(dirname {}) \;
Prints last modified file in a current folder. </s> find . -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" "
Print second field from semicolon-seprated line $string. </s> echo $string | cut -d';' -f2
Search for 'It took' in all $srch1* (case insensitive) files under current directory </s> find . -iname "$srch1*" -exec grep "It took" {} \; -print
Search the current directory and all subdirectories for files that have 777 permissions and the permissions to 755 </s> find . -type f -perm 777 -exec chmod 755 {} \;
Find all the files/directories in the current directory tree which have been modified between 2014-08-25 and 2014-08-26 </s> find ./ -newermt 2014-08-25 ! -newermt 2014-08-26 -print
Recursively set all permissions under "/directory" to 755 </s> chmod -R 755 /directory
Find *.java files in the current directory and replace foo with bar in those files </s> find . -name "*.java" -exec sed -i '' s/foo/bar/g \;
display a long listing of all the files in the current folder which have been modified in the last 24 hours </s> find . -mtime -1 | xargs ls -ld
Append "& Bytes" to the end of every line in "$TEMPFILE" and format the result as a table </s> sed 's/.*/& Bytes/' "$TEMPFILE" | column -t
display all file in the home folder except ".c" files </s> find $HOME -not -iname "*.c" -print
Display the contents of "file" formatted into a table, removing duplicate lines where the first 12 characters are duplicates, and display the number of occurrences at the beginning of each line. </s> column -t file | uniq -w12 -c
Search the current directory and all of its sub-directory for any PDF files. </s> find . -name "*.pdf" -print
find all  tools generated files  a.out , *.o and core dump files which not required to us these all junk files & delete from  current  directory . </s> find . \( -name a.out -o -name '*.' -o -name  'core' \) -exec rm {} \;
find all the backup files in the current folder and delete them </s> find . -type f -name "*.bak" -exec rm -f {} \;
search for all perl files in the folder /nas/projects/mgmt/scripts/perl which have been modified yesterday </s> find /nas/projects/mgmt/scripts/perl -mtime 1 -daystart -iname "*.pl"
Find all regular files that reside in the current directory tree and were last modified 1 day ago </s> find . -type f -mtime 0
List the names of the directories in current directory without going into sub-directories </s> find . -maxdepth 1 -mindepth 1 -type d -printf '%f\n'
Print the 6th field (delimited by '/') from the paths specified by ~/bin/FilesDvorak/.* files/directories </s> find ~/bin/FilesDvorak/.* -maxdepth 0 | awk -F"/" '{ print $6 }'
Identify CMS version/releases accross all your Drupal websites </s> find /home/*/public_html/ -type f -iwholename "*/modules/system/system.info" -exec grep -H "version = \"" {} \;
Show the subdirectories of the current directory </s> find . -maxdepth 1 -type d -print | xargs -I {} echo Directory: {}
Counts all files in a current folder and subfolders. </s> find . -type f | wc -l
Show logged in users with idle time of each one </s> w | tr -s " " | cut -d" " -f1,5 | tail -n+3
Find all regular files that reside in the current directory tree and were last modified more than 4 days ago </s> find . -type f -mtime +4
Gets a job with defined number back to the foreground. </s> fg 1
Prints full path to files with dot in name in a current folder. </s> ls -d -1 $PWD/*.*
Make a copy of the entire contents of dir1 in the Pictures directory located in the user's home directory. </s> cp -r dir1/ ~/Pictures/
Prints process tree for the current process with ASCII line drawing characters. </s> pstree -A -s $$
Find all files/directories with '.xml' extension that start with 'log4j' in their names under '/cygdrive/e/MyDocs/Downloads/work/OATS Domain related/' directory tree, search for files that contain the string 'CONSOLE' in their contents, then search for the string 'ASYNC' in the matched files and display the matched lines along with their filenames </s> find "/cygdrive/e/MyDocs/Downloads/work/OATS Domain related/" -iname "log4j*.xml" | xargs -I % grep -ilr "CONSOLE" "%" | xargs -I % grep -H "ASYNC" %
Change permissions of all files ending in ".php" under the current directory to 755 and print a '+' for each file </s> find . -name '*.php' -exec chmod 755 {} \; -exec echo '+' \;
Make directories "Labs/lab4a/folder1", "Labs/lab4a/myfolder", and "Labs/lab4a/foofolder" </s> mkdir Labs/lab4a/{folder1,myfolder,foofolder}
Change permissions for all PHP files under the current directory tree to 755 and print the number of files changed </s> find . -name "*.php" -exec chmod 755 {} + -printf '.' | wc -c
Find all *.rb (regular) files under current directory </s> find . -name "*.rb" -type f
verbosely create intermediate directoriy tmp as required and directory boostinst </s> mkdir -pv /tmp/boostinst
From a script, output the name of the script itself, without containing directories - from a shell, output the name of the shell. </s> basename -- $0
display all the files in the current folder. </s> find .
show all the files in the entire file system which are bigger than 100MB </s> find / -size +100M
List all *.c files in entire file system </s> find / \! -name "*.c" -print
display all shell scripts in current folder </s> find . -name "*.sh"
Find all files under images directory </s> find images -type f
Execute "ls -l" every 2 seconds and highlight the differences in runs </s> watch -d ls -l
Copy all files with '.png' (case insensitive) extension under '/home/mine' directory tree to '/home/mine/pngcoppies/copy.' directory </s> find /home/mine -iname "*.png" -execdir cp {} /home/mine/pngcoppies/copy{} \;
Find all files starting from the current directory that contain '.java' in their pathnames </s> find . -print | grep '\.java'
Remove all characters except ";" and digits from standard input </s> tr -cd ";0-9"
Recursively changes group ownership of everything within a '/path/to/repo' to 'GROUP'. </s> chgrp -R GROUP /path/to/repo
Find all directories under current directory and set read-write-execute permission for owner, read-execute permission for group and other for those directories </s> find . -type d -exec chmod u=rwx,g=rx,o=rx {} \;
Find all files in "/home/" which contain "string1", "string2" or the host name in its filename </s> find /home/ -type f -regextype posix-extended -regex ".*(string1|string2|$(hostname)).*"
change the group of all the files in the folder /u/netinst/ to staff </s> find /u/netinst -print | xargs chgrp staff
Identify CMS version/releases accross all your Drupal websites </s> find /var/www/vhosts/*/httpdocs/ -type f -iwholename "*/modules/system/system.info" -exec grep -H "version = \"" {} \;
Find all files under current directory that were modified in the last 24 hours and also include the files that were modified in less than 1 day ago </s> find -daystart -mtime +0
Prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file. </s> echo 'ls -hal /root/ > /root/test.out' | sudo bash
display a long listing of all the xls or csv files in the entire file system </s> find / -regex ".*\.\(xls\|csv\)"
Find all *FooBar* files/directories under current directory and copy them to ~/foo/bar </s> find . -name '*FoooBar*' | sed 's/.*/"&"/' | xargs cp ~/foo/bar
Find the current directory and all its subdirectories. </s> find . -type d
Make directories "a", "b", "c", "d", and "e" </s> mkdir a b c d e
Print the list of files and directories of the /etc directory </s> find /etc/. ! -name /etc/.
find all the files in the current folder and display adding quotations to each file and replace spaces with new line </s> find $PWD | sed -e 's/^/"/g' -e 's/$/"/g' | tr '\n' ' '
Read a line from standard input with prompt "Is this a good question (y/n)? " and save the response to variable "answer" </s> read -p "Is this a good question (y/n)? " answer
Print the paths of all files in the current directory tree that contain "abc" replacing "abc" with "xyz" </s> find . |xargs grep abc | sed 's/abc/xyz/g'
Find all files that are modified in last 3 days </s> find . -type f -mtime -3
find all the directories with the name "some-dir" in the current folder and move them to another folder and do not search in subfolders </s> find ./ -maxdepth 1 -name "some-dir" -type d -print0 | xargs -0r mv -t x/
Make directories to "directory{1..3}/subdirectory{1..3}/subsubdirectory{1..2}" as needed </s> mkdir -p directory{1..3}/subdirectory{1..3}/subsubdirectory{1..2}
display all the ".c" files in the current folder excluding those that are present in all the sub directories </s> find . \( ! -name . -prune \) -name "*.c" -print
Continuously print the seconds since Unix epoch and the ping time to "google.com" </s> ping google.com | awk -F'[ =]' 'NR>1{print system("echo -n $(date +%s)"), $11}'
Create empty files (or update timestamps if they exist) with names matching each word in variable "correctFilePathAndName" </s> echo -e "$correctFilePathAndName" | xargs touch
Search the .cs files of the current directory tree for string "content pattern" </s> find ./ -type f -iname "*.cs" -print0 | xargs -0 grep "content pattern"
Make a new directory "new-dir" in every directory in the current directory tree </s> find . -type d | xargs -I "{x}" mkdir "{x}"/new-dir
find in the entire file system for the file mysql </s> sudo find / -name mysql -print
delete all text files in the home folder after user confirmation </s> find $HOME/. -name "*.txt" -ok rm {} \;
Find all files named 'foo' under current directory tree without descending into directories named 'foo' </s> find . -name foo -type d -prune -o -name foo -print
Reports count of characters in the value of ${FOO_NO_WHITESPACE} variable as follows: "length(FOO_NO_WHITESPACE)==<counted number of characters>" </s> echo -e "length(FOO_NO_WHITESPACE)==$(echo -ne "${FOO_NO_WHITESPACE}" | wc -m)"
Make directory "saxon_docs" </s> mkdir saxon_docs
create directory es if it is not exist and create direcoty LC_MESSAGES </s> mkdir -p es/LC_MESSAGES
Find and remove all .mp3 regular files under the current directory and below </s> find . -type f -name "*.mp3" -exec rm -f {} \;
Find all files/directories under /home/bozo/projects directory that were modified 1 day ago </s> find /home/bozo/projects -mtime 1
Determine if /full/path exists on a mounted file system. </s> df /full/path | grep -q /full/path
change group of the file /tmp/php_session to group daemon </s> chown -R :daemon /tmp/php_session
display all the files in the current folder which have been modified in the last 24 hours </s> find . -mtime -1
Find executable files </s> find . -perm -100 -print
Number each non-blank line of standard input </s> nl
Find all regular files or symlinks in the entire file system </s> find / -mount -depth \( -type f -o -type l \) -print
display all the files in the folder a </s> find a
Print the full path of a 'file.txt' file in the current folder. </s> ls "`pwd`/file.txt"
Find all the *.pl files (Perl files) beneath the current directory. </s> find . -name "*.pl"
Find all files/directories under current directory bypassing file hierarchies in lexicographical order </s> find -s
Copy and always overwrite all files in "/zzz/zzz" to "/xxx/xxx" </s> yes | cp -rf /zzz/zzz/* /xxx/xxx
List all leaf directories of the current directory tree </s> find . -type d | sort | awk '$0 !~ last "/" {print last} {last=$0} END {print last}'
Find all *.css files under $DIR and print the lines matching the regex '\.ExampleClass.{/,/}' from those files </s> find ${DIR} -type f -name "*.css" -exec sed -n '/\.ExampleClass.{/,/}/p' \{\} \+
generates a list of all files beneath the current directory whose filename DOES NOT end in .html, so it matches files like *.txt, *.jpg, and so on. </s> find . -type f -not -name "*.html"
split file data.csv into pieces per 100 lines </s> split -l 100 date.csv
Find all files/directories in directories/files taken from the glob pattern '/folder/path/*' recursively that have not been modified in the last 2 hours and delete them </s> find /folder/path/* -mmin +120 -delete
Recursively move all files in "/path/to/srcdir" to "dest/" </s> find /path/to/srcdir -type f -print0 | xargs -0 -i% mv % dest/
Print the minimum transmission time of 10 ping requests to "google.com" from cygwin </s> ping google.com -n 10 | awk '/Minimum =/ { sub(",","",$3); print $3 }'
Find all the files which are greater than 50MB and less than 100MB </s> find / -size +50M -size -100M
Gets list of IP addresses of all network interfaces. </s> ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'
Find all directories under /home/me/"$d" </s> find /home/me/"$d" -type d
Print lines 2960 to 2966 from the output of "history" </s> history | sed -n '2960,2966p'
Find all files under /path and calculate their md5sum </s> find /path -type f -print0 | xargs -0 md5sum
list regular files ending in .mbox </s> find . -type f -wholename \*.mbox
Force delete all jpg files in current directory which are less than 50KB and do not search in the sub directories </s> find . -maxdepth 1 -name "*.jpg" -size -50k | xargs rm -f
Find files in the current directory tree whose status was changed within the last 60 minutes </s> find . -cmin -60
Print the names of the directories from the paths expanded by the glob pattern /path/to/directory/* </s> find /path/to/directory/* -maxdepth 0 -type d -exec basename -a {} +
Update timestamps of all files (not directories) under current directory. </s> find . -exec touch {} \;
Move each of the 'm?' directories in current directory to another directory whose name is constituted by appending .mbox to each directory name and create a directory named Messages in this directory then move all *.emlx files into this directory </s> find . -name 'm?' -type d -exec mv '{}' '{}.mbox' ';' -exec mkdir '{}.mbox/Messages' ';' -exec sh -c 'mv {}.mbox/*.emlx {}.mbox/Messages' ';'
Find all 100MB+ files and delete them </s> find / -size +100M -exec rm -rf {} \;
Find all .mp3 files with more then 10MB and delete them from root directory . </s> find /  -type f -name *.mp3 -size +10M -exec rm  {} \;
Prints long listing of directory $var sorted from oldest to newest, with appended indicators. </s> $ ls -Fltr $var
Go to last directory with name starting with a number, useful for timestamped directory names. </s> cd "$(ls -rd [0-9]*/ | tail --lines 1)"
Find all files/directories named 'photo.jpg' under current directory tree </s> find -name photo.jpg
find all java files in the current folder and search for the pattern REGEX </s> find . -name '*.java' -exec grep REGEX {} \;
Search /var/log for logs larger than 10 megabytes </s> find /var/log -size +10M -ls
Creates temporary file with file name formatted like /tmp/gnuplot_cmd_$(basename "${0}").XXXXXX.gnuplot and saves path to it in a variable 'gnuplotscript'. </s> gnuplotscript=$(mktemp /tmp/gnuplot_cmd_$(basename "${0}").XXXXXX.gnuplot)
Find all files/directories under '/usr/local/games' directory tree that contain the string 'xpilot' in their names </s> find /usr/local/games -name "*xpilot*"
Search the "your/dir" directory for empty subdirectories </s> find your/dir -mindepth 1 -prune -empty
find all text files in the current folder which have been modified after the file /tmp/newerthan </s> find . -name "*.txt" -newer /tmp/newerthan
List files in the current directory tree which have permissions rwx for user and rw for group and others </s> find . -perm 766 -exec ls -l {} \;
display a long list of the files in the current folder which have the word fuddel in all the files in the current folder and then search for the word fiddel in the previously matched files </s> find -exec grep -q fuddel {} ";" -exec grep -q fiddel {} ";" -ls
Find all directories under current directory having DIRNAME in their name </s> find . -type d | grep DIRNAME
Search for regular files of the grooup 'users' in the file system </s> find /  -type f -group users
Create a symbolic lnk named "$1/link" to "$dir" </s> ln -s "$dir" "$1/link"
Delete files "*doc copoy" in directory tree /mnt/zip </s> find /mnt/zip -name "*doc copy" -execdir rm "{}" \;
Delete all files in the TBD directory that were modified more than 1 day ago </s> find /TBD/* -mtime +1 | xargs rm -rf
Report file system containing path to /dir/inner_dir/ disk usage in kilobytes. </s> df -k /dir/inner_dir/
find files in the current directory having name "filename" </s> find -iname "filename"
Gets IP address of 'en1' network interface. </s> ifconfig en1 | awk '{ print $2}' | grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}"
find -name '*.js' -not -path './node_modules/*' -not -path './vendor/*' </s> find -name '*.js' -not \( -path './node_modules/*' -o -path './vendor/*' \)
Finds string beginning with 'IFS' in a 'set' output. </s> set | grep ^IFS=
search for a word in all the regular files in the current folder. </s> find -type f -print0 | xargs -r0 grep -F 'example'
display all the files in the current folder which have are bigger than 1KB </s> find . -size +1024 -print
Counts total lines in PHP and JS files. </s> find . -name '*.js' -or -name '*.php' | xargs wc -l | grep 'total'  | awk '{ SUM += $1; print $1} END { print "Total text lines in PHP and JS",SUM }'
Search the /path directory tree for files missing g+w and o+w bits </s> find /path ! -perm /022
Search the current directory tree for an html file having the text 'Web sites' in it </s> find . -type f -iname \*.html -exec grep -s "Web sites" {} \;
search for all the files in the current folder which start with gen and end with bt2 and assign the output list to the variable var. </s> var="$(find . -name 'gen*.bt2')"
find all the files in the folder /work which belong to the user "olivier" </s> find /work -user olivier -print
Create a symbolic link in "/bar/tmp/" for each file in directory "/foo" that does not start with "runscript" </s> find /foo -maxdepth 1 -type f ! -name 'runscript*' -exec ln -s {} /bar/tmp/ \;
Find all files in directory tree "dirname" </s> find dirname -exec echo found {} \;
Print the IP addresses for the current host name </s> hostname  -I | cut -f1 -d' '
Recursively copies "$1" to "$2". </s> cp -R "$1" "$2"
Find all regular files with permissions 777 under and below /home/user/demo/ </s> find /home/user/demo -type f -perm 777 -print
List files under $CURR_DIR which were modified, accessed or whose status were changed $FTIME ago replacing the $CURR_DIR path string to './' </s> find ${CURR_DIR} -type f \( -ctime ${FTIME} -o -atime ${FTIME} -o -mtime ${FTIME} \) -printf "./%P\n"
Find all the files in the current directory with “linkin park” in their names </s> find . -maxdepth 1 -iname "*linkin park*"
Change all directories under "./storage/" to owner "apache" and group "laravel" </s> sudo find ./storage/ -type d -exec chown apache:laravel {} \;
Search the current directory tree for regular files modified within the past 24 hours whose names do not end with ".DS_Store" </s> find . -mtime -1 ! -name '.DS_Store' -type f -exec basename {} \;
Find all directories on the system whose size is greater than 50k </s> find / -type d -size +50k
remove all the DS_Store files in the current directory </s> find . -name .DS_Store -exec rm {} \;
Search subdirectory `Linux' in the current directory for file `teste.tex' </s> find -path './Linux/*' -name teste.tex
find all the normal/regular files in the current folder which have been modified two days ago and display a long listing of them </s> find . -type f -mtime 2 -mtime -3 -daystart -exec ls -l {} \;
Archive all directories in /path/to/directory/* (only command line arguments, no sub-directories) to files with .tar.gz extension </s> find /path/to/directory/* -maxdepth 0 -type d -printf "%P\n" -exec sudo tar -zcpvf {}.tar.gz {} \;
find all the text files in the current folder </s> find . -name "*.txt" -print
Remove all files whose names begin with "no-such-thing" in the /home/peter directory tree </s> find /home/peter -name no-such-thing* |xargs rm
find all files in the current folder that are not modified in the last 10 minutes </s> find . -mmin +10 -print
Find all executable files under {} and reverse sort them </s> find {} -type f -depth 1 -perm +0111 | sort -r
Display the sizes and filepaths of all files/directories with '.undo' extension under current directory tree </s> find -name *.undo -print0 | du -hc --files0-from=-
display all directories in a folder </s> find /etc -type d -print
Find files modified in last 7 days </s> find . -mtime -7 -type f
Search the /myfiles directory tree for regular files with read and write permissions set for `others' </s> find /myfiles -type f -perm -o+rw
Count the number of .java files in all folders rooted in the current folder </s> find . -name "*.java" | wc -l
Print the user name of the current user </s> whoami
List the files in the /etc directory tree containing text "old1.old2.co.com" </s> find /etc -type f -print | xargs grep -il old1\.old2\.co\.com
Add cron lists from "filename" to list of cron jobs, giving errors for any lines that cannot be parsed by crontab. </s> crontab filename
Display an amount of processes running with a certain name </s> ab=`ps -ef | grep -v grep | grep -wc processname`
Overwirte file '/path/to/your/file' with zeroes and remove, showing progress while execution. </s> shred -v -n 0 -z -u /path/to/your/file #overwriting with zeroes and remove the file
Count the number of regular files in the current directory tree </s> find . -type f | wc -l
Find files in the /var/log folder which were modified between 60 minutes and 10 minutes ago </s> find /var/log/ -mmin -60 -mmin +10
Dump "testscript.sh" as 2 byte hexadecimale, printable characters, and octal values </s> od -xcb testscript.sh
Print a detailed list of all regular files from the current directory tree </s> find . -type f -ls
Find all files in /home/user/ that were created or changed 10 minutes ago </s> find /home/user/ -cmin 10 -print
create directory temp into home directory </s> mkdir ~/temp
display a list of all regular/normal files in the current folder </s> find . -type f -ls
Print summary of new/missing files, and which files differ between /path/to/folder1 and /path/to/folder2, sorted alphabetically. </s> diff -rq /path/to/folder1 /path/to/folder2
Find and uncompress all files in the current directory tree ending in ".csv.gz" </s> find . -name '*.csv.gz' -print0 | xargs -0 -n1 gzip -d
Remove spaces from output of "echo aa | wc -l" </s> echo aa | wc -l | tr -d ' '
Counts lines of /etc/fstab file. </s> cat /etc/fstab | wc -l
List the drive of each "/dev/" disk mount point </s> mount | grep '^/dev/' | sed -E 's/([^ ]*) on ([^ ]*) .*/"\2" is located on "\1"/'
Print all unique file paths under "dir1" compared to "dir2" </s> comm -23 <(find dir1 | sed 's/dir1/\//'| sort) <(find dir2 | sed 's/dir2/\//'| sort) | sed 's/^\//dir1/'
find all the text files present in the current directory excluding the search in certain paths. </s> find . -type f -name "*.txt" ! -path "./Movies/*" ! -path "./Downloads/*" ! -path "./Music/*"
Remove the "123_" prefix from all filenames of .txt files in current directory. </s> rename 's/^123_//' *.txt
Recursively finds files like 'example.com', ignoring case differences, and filters out files with 'beta' in path. </s> find -iname example.com | grep -v beta
display all files which have been modified between two dates in current folder </s> find . -type f -newermt "2014-01-01" ! -newermt "2014-06-01"
Find all directories named "0" in the current directory tree and create a tar archive of their RS* subdirectories </s> find . -type d -name "0" -execdir tar -cvf filename.tar RS* \;
Print the day at 1 day ago in 2 months from now </s> date -d "$(date -d "2 months" +%Y-%m-1) -1 day" +%a
Print amount of space available on the file system containing path to the current working directory in megabytes. </s> df . -B MB | tail -1 | awk {'print $4'} | grep  .[0-9]*
Format output of "mount" as a table </s> mount | column -t
Find directories in the current directory (no sub-directories) and print them appended with a string literal 'Directory: ' </s> find . -maxdepth 1 -type d -print | xargs  -I "^" echo Directory: "^"
find all the "jpg" file in a folder. </s> find /win/C -iname *JPG
Recursively finds all '*.pdf' files in a current folder and removes them without prompting. </s> find . -name '*.pdf' -exec rm -f {} \;
Display list of files ending with '.txt' in the current folder to the terminal twice and output it to the text file "txtlist.txt" </s> ls *.txt | tee /dev/tty txtlist.txt
Saves byte size of all content of $1 folder in 'uiTotalSize' variable. </s> uiTotalSize=$(ls -l -R $1 | grep -v ^d | awk '{total+=$5;} END {print total;}')
Show all files in user's home directory that have read, write and execute permissions set for user, group and others. </s> find ~ -perm 777
create a symbolic link named "/usr/bin/my-editor" to file "/usr/share/my-ditor/my-editor-executable" </s> ln -s /usr/share/my-ditor/my-editor-executable /usr/bin/my-editor
Removes all empty folders under current folder. </s> find . -type d -empty -exec rmdir "{}" \;
Set the setup connection timeout to 3 seconds for connecting to "user@ip" via ssh </s> ssh -o ConnectTimeout=3 user@ip
display the filenames which do not have begin with dot (.) </s> find . -maxdepth 1 -name '[!.]*' -printf 'Name: %16f Size: %6s\n'
Print the real path of "$F" where each symbolic link component must exist </s> echo "$(dirname $(readlink -e $F))/$(basename $F)"
Sort and display the file name and creation month of top 11 files in the entire file system (Sort in the order of month ) </s> find / -type f -printf "\n%Ab %p" | head -n 11 | sort -k1M
prints the names of all files in the directory tree rooted in /usr/src whose name ends with ‘.c’ and that are larger than 100 Kilobytes. </s> find /usr/src -name '*.c' -size +100k -print
Finds all folders that contain 'ssh' file and have 'bin' in path. </s> find / -name ssh|grep bin|xargs dirname
Find all symbolic links under the current folder and below </s> find –L –xtype l
Find files whose content was modified at least 1 minute ago </s> find ./ -mmin +1
Moves file '$2' to the folder where '$1' file is located. </s> mv "$2" "`dirname $1`"
Display all symlinks and their targets in the current directory </s> find -P .  -maxdepth 1 -type l -exec echo -n "{} -> " \; -exec readlink {} \;
Find all *.py files under current directory and search for regular expressions taken from the search_terms.txt file </s> find . -name '*.py' -exec grep -n -f search_terms.txt '{}' \;
Set variable PacketLoss to first digit of percentage of packet loss occurring when pinging host specified by TestIP </s> PacketLoss=$(ping "$TestIP" -c 2 | grep -Eo "[0-9]+% packet loss" | grep -Eo "^[0-9]")
display all executable files in the folder /home </s> find /home -perm /a=x
Save all directories under the current directory as a comma separated list in variable "FOLDERS" </s> FOLDERS=$(find . -type d | paste -d, -s)
find files which have all permissions to all the users in the current directory </s> find . -type f -perm 0777 -print
List all files and directories in the /home directory tree whose names are "Trash" </s> find /home -name Trash -exec ls -al {} \;
Filnd all directory in root directory with 777 permission and change permision755  with chmod commad . </s> find / -type d  -perm 777 -print -exec chmod 755 {} \;
find files ending with .jpg </s> find . -name '*.jpg' -print ./bar/foo.jpg
Read a line from standard input into variable "REPLY" with prompt "Press [Enter] key to release lock..." </s> read -p "Press [Enter] key to release lock..."
delete all the text files in the current folder. </s> find . -type f -name "*.txt" -exec rm -f {} \;
Read a line from standard input with prompt "Are you sure you wish to continue?" </s> read -p "Are you sure you wish to continue?"
Print lines in "file1" that exist in "file2" </s> join -t " " -j 1 <(sort file1) <(sort file2)
Find all *company* (case-insensitive) files/directories under /basedir with null character as the delimiter </s> find /basedir/ -iname '*company*' -print0
display list of all the hidden files in the directory "/dir/to/search/" </s> find /dir/to/search/ -name ".*" -ls
display all the files in the current folder which have been modified in the last 14*24 hours </s> find . -mtime -14 -print
List files larger than 10MB in the /var directory recursively </s> find /var/ -size +10M -exec ls -lh {} \;
Search the current directory tree for files whose names begin with "my" and end with "p" followed by any character </s> find . -regex ".*/my.*p.$"
find all text files in current folder and trim the extra spaces in all lines in these files ( MAC version ) </s> find . -iname '*.txt' -type f -exec sed -i '' 's/[[:space:]]\{1,\}$//' {} \+
Create tar archive "dirall.tar" and copy all files from directory tree /tmp/a1 to it </s> find /tmp/a1 -exec tar -rvf dirall.tar {} \;
find all the files in the current directory and sub-directories, that were edited within the last 1 hour and execute the list command with long listing format </s> find -mmin -60 -exec ls -l {} \;
Find all directories under /home/username/tmp and set their permission to 770 </s> find /home/username/tmp -type d -exec chmod 770 {} +
Find all filenames ending with .c in the /usr directory tree </s> find /usr -name "*.c"
List .html files in the current directory tree that contain string "base\-maps" but do NOT contain string "base\-maps\-bot" </s> find . -name "*.html" -exec grep -lR 'base\-maps' {} \; | xargs grep -L 'base\-maps\-bot'
Eliminates partially duplicate lines by column, keeping the last occurrence </s> tac temp.txt | sort -k2,2 -r -u
Find all files/directories with space in their names under  /tmp/ directory and rename them by replacing all spaces with _ </s> find /tmp/ -depth -name "* *" -execdir rename " " "_" "{}" ";"
find all .bak files in or below the current directory and move them to ~/.old.files directory: </s> find . -name "*.sh" -print0 | xargs -0 -I {} mv {} ~/back.scripts
List all regular files in the current directory tree </s> find . -type f | xargs ls -l
Locate all *.csv files under the current directory tree separating the file names with zeroes </s> find . -name "*.csv" -print0
find files in /u/bill directory which are access an 2 to 6 minutes ago </s> find /u/bill -amin +2 -amin -6
Archive directory "tata" to directory "tata2", compressing data during copy. </s> rsync -avz tata/ tata2/
Find all CDC* files under current directory that were accessed less than 1 day ago and delete the first and last lines from those files </s> find .  -type f -name "CDC*" -ctime -1 -exec sed -i'' -e '1d' -e '$d' '{}'  \;
find all php files in the folder  /var/www/ </s> find /var/www/ -type f -iname "*.php" -print
Find all files/drectories under '/u/bill' directory tree that have been accessed in the last 2 to 6 minutes </s> find /u/bill -amin +2 -amin -6
Set the bash environmental variable "PROMPT_COMMAND" to save the output of the last executed command to variable "LAST" and file '/tmp/x" </s> PROMPT_COMMAND='LAST="`cat /tmp/x`"; exec >/dev/tty; exec > >(tee /tmp/x)'
Reports count of characters in the value of ${FOO_NO_EXTERNAL_SPACE} variable as follows:  "length(FOO_NO_EXTERNAL_SPACE)==<counted number of characters>" </s> echo -e "length(FOO_NO_EXTERNAL_SPACE)==$(echo -ne "${FOO_NO_EXTERNAL_SPACE}" | wc -m)"
Disables shell option 'dotglob'. </s> shopt -u dotglob
Prints process tree with command line arguments and process id numbers. </s> pstree -apl
Find files in the current directory tree which are larger than 5 MB in size </s> find . -size +5000k -type f
display all the regular files in the current folder and do not search in sub folders </s> find "$dir" -maxdepth 1 -type f
display long listing of all files in the current directory whose size is 24 or 25 bytes (doesnt display inode information) . </s> find . -size -26c -size +23c -exec ls -l '{}' \;
Find the total size of *.jpg files within the directory tree ./photos/john_doe </s> find ./photos/john_doe -type f -name '*.jpg' -exec du -ch {} + | grep total$
Read a line of standard input with prompt "Enter your choice: " in an interactive shell and save the response to variable "choice" </s> read -e -p "Enter your choice: " choice
List the last entry of the numerically sorted list of all files and folders under "/foldername" </s> find /foldername | sort -n | tail -1
List all active cron jobs, displaying only the command. </s> crontab -l | grep -v "^#" | awk '{print $6}'
Rename all files matching "access.log.<number>.gz" incrementing <number>. </s> find -name 'access.log.*.gz' | sort -Vr | rename 's/(\d+)/$1+1/ge'
Set the host name to "myServersHostname" </s> hostname myServersHostname
Rename "/usr/bin/php" to "/usr/bin/~php" </s> sudo mv /usr/bin/php /usr/bin/~php
Sort standard input in alphabetical order </s> sort
Search the system for *.rpm files ignoring removable media </s> find / -xdev -name \*.rpm
search for the word error in all the xml files in the current folder </s> find . -name "*.xml" -exec grep "ERROR" /dev/null '{}' \+
Delete all MP3 files under /tmp </s> find /tmp -iname '*.mp3' -print0 | xargs -0 rm
gives the chars in line 5 and chars 5 to 8 of line 5, in tst.txt </s> head -5 tst.txt | tail -1 |cut -c 5-8
Unzip "daily_backup.sql.gz" and search for lines matching "'x'|/x/" </s> zcat daily_backup.sql.gz| grep -E "'x'|/x/"
Enables shell option 'lastpipe'. </s> shopt -s lastpipe
Read the raw input of "/dev/input/mice" as hexadecimal bytes with 3 bytes per line </s> cat /dev/input/mice | od -t x1 -w3
Show version information of the find utility </s> find -version
Report file system '/dev/disk0s2' disk usage </s> df | grep /dev/disk0s2
Display inputfile all on one line (replace newlines by spaces) </s> awk '{printf "%s ", $0} END {printf "\n"}' inputfile
List all broken symlinks excluding cyclic links under current directory </s> find . -type l -printf "%Y %p\n" | grep -w '^N'
Search all files in the current directory tree whose names end in "1" for string "1" </s> find . -name "*1" -exec grep "1" {} \;
Recursively change the owner to "${JBOSS_USER}" of "$JBOSS_LOG_DIR" </s> chown -R ${JBOSS_USER}: $JBOSS_LOG_DIR
Print the names of all files in or below the current directory, with all of the file permission bits S_ISUID, S_ISGID, and S_IWOTH set </s> find . -perm -o+w,+s
Execute "ls" every second </s> watch -n 1 ls
find regular files in the "mail" folder under the user's home directory, displaying filenames and lines that contain the text "Linux" </s> find ~/mail -type f | xargs grep "Linux"
Copy loadable kernel module "mymodule.ko" to the drivers in modules directory matchig current kernel. </s> sudo cp mymodule.ko /lib/modules/$(uname -r)/kernel/drivers/
Extracts a bz2 file. </s> bunzip2 file.bz2
Print only second from the end field from slash-separated string in file 'datafile' </s> cat datafile | rev | cut -d '/' -f 2 | rev
Count the number of equal lines in "file1.txt" and "file2.txt" </s> comm -12 <(sort file1.txt) <(sort file2.txt) | wc -l
display all the files in the current folder along with the change time and display file names of the last 10 changed files </s> find . -type f -printf "%C@ %p\n" | sort -rn | head -n 10
split the file data.csv into pieces per 100 mb named as data.tsv.NNN with digital prefixes </s> split -C 100m -d data.tsv data.tsv.
Remove all .mpg files in the /home/luser directory tree </s> find /home/luser -type f -name '*.mpg' -exec rm -f {} \;
Rename file with inode number 31467125 to new_name.html </s> find . -type f -inum 31467125 -exec /bin/mv {} new_name.html \;
Get domain names from file '1.txt' and request TXT DNS record for each one </s> cat 1.txt | xargs dig TXT
show all the regular files in current folder </s> find . -type f -print0
Set permissions for files in `foldername' to 777 </s> find foldername -exec chmod a+rwx {} ";"
Delete empty regular files </s> find . -type f -empty -delete
find the file "httpd.log" in the entire file system </s> find / -type f -name httpd.log
Find all symbolic links in the current directory tree </s> find -type l
Print IP addresses of the current host </s> hostname -I|cut -d" " -f 1
Get the directory with least access time under current directory </s> find . -type d -printf "%A@ %p\n" | sort -n | tail -n 1 | cut -d " " -f 2-
Delete all files in directory $DIR that have not been accessed in at least 5 days </s> find "$DIR" -type f -atime +5 -exec rm {} \;
find all the pdf files in the current directory and display only the directory name in which the pdf file is present </s> find . -type f -name '*.pdf' |sed 's#\(.*\)/.*#\1#' |sort -u
Display the 'bash' manpage, going to the first occurence of \' sequence of characters. </s> man bash | less -Ip "\\\'"
Execute awk script "script.awk" on "File2" and "File1" and format output as a table </s> awk -f script.awk File2 File1 | rev | column -t | rev
List files in the current directory </s> find . \( ! -name . -prune \)
Read two bytes from "/dev/urandom" and print them as an unsigned integer </s> od -A n -N 2 -t u2 /dev/urandom
Finds shell options like 'checkjobs' with their state. </s> shopt -p | grep checkjobs
Copy all files under director 'foo' whose name doesn't contain 'Music' to directory 'bar'. </s> find foo -type f ! -name '*Music*' -exec cp {} bar \;
Delete all regular files that reside in directory $OUTPUTDIR and below, and were last modified more than 7 days ago </s> find $OUTPUTDIR -type f -mtime +7 -delete
Search for 'Processed Files' in all $srch* (case insensitive) files under current directory </s> find . -iname "$srch*" -exec grep "Processed Files" {} \; -print
Find movies over a gigabyte in size </s> find ~/Movies/ -size +1024M
Find all files/directories under current directory </s> find ./
Compress and display the gzip compression ratio of every file on the system that is greater than 100000 bytes and ends in ".log" </s> sudo find / -xdev -type f -size +100000 -name "*.log" -exec gzip -v {} \;
Find all files/directories with inode number 16187430 and move them to 'new-test-file-name' </s> find -inum 16187430 -exec mv {} new-test-file-name \
Mount partition with label "WHITE" on "/mnt/WHITE" with read and write permission </s> mount -L WHITE /mnt/WHITE -o rw
Remove all files and directories called "test" from the current directory tree </s> find . -name test -delete
List all regular files residing in the current directory tree and containing string "/bin/ksh" </s> find . -type f -exec grep -li '/bin/ksh' {} \;
Save a random 4 byte unsigned integer from "/dev/urandom" to variable "RAND" </s> RAND=`od -t uI -N 4 /dev/urandom | awk '{print $2}'`
Find a directory named 'project.images' in the entire filesystem and show it in long listing format </s> find  / -type d -name "project.images" -ls
Delete characters in columns 36 through 40 from the output of "finger" </s> finger |  sed 's/\(.\{35\}\)...../\1/'
Replace all occurrence of "log_errors = Off" with "log_errors = On" in all 'php.ini' files in the current directory tree </s> find . -name 'php.ini' -exec sed -i 's/log_errors = Off/log_errors = On/g' "{}" \;
Search the current directory and all of its sub-directories for the file 'file1'. </s> find . -name file1 -print
Replace "foo" with "bar" in all PHP files in the current directory tree </s> find . -name "*.php" -exec sed -i 's/foo/bar/g' {} \;
Decompress and unarchive "hello-0.2.tar.gz" </s> gzip -dc hello-0.2.tar.gz | tar -xf -
Insert the current host name on line 15 of "test.html" </s> sed -i "15i `hostname`" test.html
Traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt. </s> find /       \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \( -size +100M -fprintf /root/big.txt  '%-10s %p\n' \)
For each line in 'file', print "result = " followed by the line backwards. </s> rev file | awk '{print "result =",$0}'
List each unique case insensitive character in "file" prefixed by number of occurrences </s> grep -o . file | sort -f | uniq -ic
Search the current directory recursively for files with the exact permissions u=rwx,g=rx,o=rx </s> find . -perm a=rwx,g-w,o-w
Get the disk space used by all *.txt (case insensitive) files under /home/d directory </s> find /home/d -type f -name "*.txt" -printf "%s\n" | awk '{s+=$0}END{print "total: "s" bytes"}'
Read lookup requests from text file '1.txt' and uses them to fetch TXT records. </s> dig TXT -f 1.txt
split content of the file file.txt started from second line into pieces per 4 lines named as split_NNN </s> tail -n +2 file.txt | split -l 4 - split_
List current directory, waiting for user input at each page. </s> ls | more
Search for the extended regex expanded by"$MONTH\/$YEAR.*GET.*ad=$ADVERTISER HTTP\/1" in the decompressed contents of the /var/log/apache2/access*.gz files that are newer than ./tmpoldfile and older than ./tmpnewfile </s> find /var/log/apache2/access*.gz -type f -newer ./tmpoldfile ! -newer ./tmpnewfile \ | xargs zcat | grep -E "$MONTH\/$YEAR.*GET.*ad=$ADVERTISER HTTP\/1" -c
display all pdf files in the current folder </s> find . -name *.pdf
get year-month-day from date </s> date +%Y-%m-%d
Print unique lines of sorted file "a" compared with sorted file "b" </s> comm -23 a b
Update the timestamp of '/tmp/$$' to the current month and day </s> touch -t `date +%m%d0000` /tmp/$$
Find all *.log files under path/ that do not contain "string that should not occur" </s> find path/ -name '*.log' -print0 | xargs -r0 grep -L "string that should not occur"
Display a count of regular files in each directory at the current level. </s> find -P . -type f | rev | cut -d/ -f2- | rev | cut -d/ -f1-2 | cut -d/ -f2- | sort | uniq -c
Print file type information of the "java" executable </s> cat `which java` | file -
search for a word in all the php files in the current folder and display the matching lines </s> find . -name \*.php -type f -exec grep -Hn '$test' {} \;
Finds files in 'directory' folder with the same name and location but different content than files in 'directory.original' folder and prints location of such files. </s> diff -qr directory directory.original | cut -d' ' -f2 | xargs dirname | uniq
Remove all vmware-*.log files under current directory </s> find . -name vmware-*.log | xargs rm
Removes resursively all files and folders named "Thumbs.db", ignoring case distincts. </s> find . -iname "Thumbs.db" -print0 | xargs -0 rm -rf
Print the entire saved command history </s> history
Print the sorted and unique parent directory paths appended with : of all the files that are executable by owner under ~/code directory without descending into hidden directories </s> find ~/code -name '.*' -prune -o -type f -a -perm /u+x -printf ':%h\n' | sort | uniq | tr -d '\n'
Finds more than 5 days old files in two directories  and compresses them. </s> find /home/folder1 /home/folder2 -type f -mtime +5 -exec compress {} \;
find all the text files in the current directory which have been modified in the last 4 days and not today and copy them to another folder </s> find . -name "*.txt" -type f -daystart -mtime -4 -mtime +0|xargs -i cp {} /home/ozuma/tmp
display the number of lines in all the ".c" files in the current folder </s> find . -name "*.c" -exec wc -l {} \;
Search the /etc directory tree for files accessed within the last 24 hours </s> find /etc -atime -1
Report total file systems disk usage estimated in terabytes </s> df --total -BT | tail -n 1
Remove all files containing 'sample' (case insensitive) in their names under '/home/user/Series' directory tree </s> find /home/user/Series/ -iname '*sample*' -exec rm {} \;
display all the regular/normal files in current folder which have been modified exactly 60 minutes before </s> find . -mmin 60 -type f
display all files ending with "ini" in current folder </s> find . -type f -name '*.ini'
Print DISPLAY of "orschiro" user </s> who | sed -e '/orschiro/! d; /pts/! d; s/^.*\(:[0-9.]\+\).*$/\1/p;d' | head -n1
Create a ssh key with no passphrase and store it in "outfile". </s> ssh-keygen -f outfile -N ''
display all the ".c" files in the current directory </s> find . -name \*.c -print
Search the current directory tree for *cache, *xml, and *html files </s> find . -type f \( -name "*cache" -o -name "*xml" -o -name "*html" \)
search through only the /usr and /home directories for any file named Chapter1.txt </s> find /usr /home -name Chapter1.txt -type f
Move all hidden files in "wordpress" to the current directory </s> mv wordpress/.* .
Request IP address for each domain name received on the command input </s> dig +short -f - | uniq
display a long listing of all the files in the home folder which are bigger than 200MB </s> find /home -size +200M -exec ls -sh {} \;
display all the file in the folder /home/david/ which start with the word "index" ( case insensitive search) </s> find /home/david -iname 'index*'
Search the current directory recursively for files writable for `others' </s> find . -perm -o+w
display all the files having the word "searched phrasse" in their name in the current folder excluding those from the paths "/tmp/" and "./var/log" </s> find . -type f -name "*searched phrasse*" ! -path "./tmp/*" ! -path "./var/log/*"
Write every two lines in "infile" on a single line separated by a comma </s> cat infile | paste -sd ',\n'
Disable wildcard expansion and name globbing </s> set -f
Gets IP address of 'eth0' network interface. </s> ifconfig eth0 | awk '/inet addr/{sub("addr:",""); print $2}'
Print information of the root mount point </s> mount -v | grep " on / "
Immediately exit the shell if a command fails </s> set -e
Show the explanation of find's debugging options </s> find -D help
find all regular/normal files in the folder "myfiles" which have read and write permission to the other users </s> find /myfiles -type f -perm -o+rw
Recursively removes all files like any-cased '*.pyc' in a current folder. </s> find . -iname '*.pyc' -print0 | xargs -0 --no-run-if-empty  rm
Print which files differ in "dir1" and "dir2" recursively </s> diff -rq dir1 dir2
Find every file under the directory /home owned by the user joe. </s> find /home -user joe
search for a word in all the files in the current directory </s> find . -type f -exec grep 'needle' {} \;
Save the system host name in variable "HOSTNAME" </s> HOSTNAME=$(hostname)
find all js files under the build direcotry except build/external and build/log directory. </s> find build -not \( -path build/external -prune \) -not \( -path build/blog -prune \) -name \*.js
display a long list of all the jpg files in the home folder </s> find ~ -iname '*.jpg' -exec ls {} \;
Exclude directory from find . command </s> find build -not \( -path build/external -prune \) -name \*.js
Find all files/directories with space in their names under current directory and rename them by replacing all spaces with _ </s> find . -depth -name "* *" -execdir rename "s/ /_/g" "{}" \;
split processed content of the file temp into pieces per 1 line named "tempNNN" with numeric suffix </s> sed 's/3d3d/\n&/2g' temp | split -dl1 - temp
Exclude directory from find . command </s> find -name "*.js" -not -path "./directory/*"
Find all files under /path and below writable by `group' and `other' </s> find /path -perm -go+w
Search for '“foobar”' in all files starting with '‘' and ending with '’' and contain '.' in their names in the entire filesystem and display only the matched files </s> find / -name ‘*.*’ -exec grep -il “foobar” {} \;
Gets IP addresses of all network interfaces. </s> ifconfig | grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}" | grep -v 127.0.0.1 | awk '{ print $2 }' | cut -f2 -d:
search for all the files which have not been modified in the last 6 months (180 days) in current folder and display the total disk usage of them </s> find . -mtime +180 -exec du -ks {} \; | cut -f1 | awk '{total=total+$1}END{print total/1024}'
find all directories named build under the current directory </s> find . -type d -name build
Unzip and extract "userAgent=[^=]*'" from "input.gz" </s> zcat input.gz | grep -o 'userAgent=[^=]*' | sed 's/ [^ ]*$//'
Find files starting with the word "file" in the current directory tree, ignoring the case </s> find . -iname "file*"
Verbosely compresses all files on fifth and sixth depth level keeping original files in place. </s> bzip2 -kv */*/*/*/*/*
display list of all the hidden directories in the directory "/dir/to/search/" </s> find /dir/to/search -path '*/.*' -ls
Delete all files with '.old' extension under current directory tree </s> find . -name “*.old” -print | xargs rm
SSH into host "$1" using key file "/path/to/ssh/secret/key" and execute command "$2" </s> ssh -i /path/to/ssh/secret/key $1 $2
Find all .txt files except README.txt </s> find . -type f -name "*.txt" ! -name README.txt -print
Change permissions of all regular files from the current directory tree to 644 </s> find . -type f -exec chmod 644 {} +
display all the files in the home folder which begin with "arrow" </s> find ~ -name 'arrow*'
Look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/ </s> find /var/spool/postfix/{deferred,active,maildrop,incoming}/ -type f
Lists all directories in a current folder. </s> ls -d */
Copy all files matching "*failed.ipynb" in the current directory tree to "./fails" preserving the directory hierarchy </s> find . -name "*failed.ipynb" | cpio -pd ./fails
display a long ilsting of all the files in the file system which are bigger than 1KB and which have not been modified in the last 30*24 hours </s> find / -size +1000 -mtime +30  -exec ls -l {} \;
split file "your_file" into pieces per 9 lines </s> split -l9 your_file
Build an "svn hotcopy" command for each subdirectory of /usr/local/svn/repos/ </s> find /usr/local/svn/repos/ -maxdepth 1 -mindepth 1 -type d -printf "%f\0" | xargs -0 -I{} echo svnadmin hotcopy /usr/local/svn/repos/\{\} /usr/local/backup/\{\}
Search the files from the current directory tree for "chrome" </s> find . | xargs grep 'chrome'
Get the sizes (and total size) of all files under dir1 directory </s> find dir1 ! -type d |xargs wc -c
Change permissions of all directories residing under and below ./debian to 755 </s> find ./debian -type d | xargs chmod 755
Recursively finds strings with the whole word 'word-1' or 'word-2' in any file under 'directory-path', following symlinks, and prints found strings. </s> egrep -w -R "word-1|word-2” directory-path
Search for "whatever" in all files under /dir directory ensuring white space safety in filenames </s> find /dir -type f -print0 | xargs -0i cat {} | grep whatever
Display differences between files dir1.txt and dir2.txt. </s> diff dir1.txt dir2.txt
display the number of lines in all the ".c" files in the current folder </s> find . -name "*.c" -print0 | xargs -0 wc -l
Gets MAC address of eth0 network interface. </s> ifconfig eth0 | awk '/HWaddr/ {print $5}'
Find all files under /mnt/naspath directory without descending into .snapshot directory that were modified in last 24 hours with null character as the delimiter </s> find /mnt/naspath -name .snapshot -prune -o \( -type f -mtime 0 -print0 \)
display a long list of all the directories which have files ending with ".todo" </s> find "$STORAGEFOLDER" -name .todo -printf '%h\n' | xargs ls -l
Send SIGWINCH process to current shell, causing it to update the LINES and COLUMNS variables which describe the size of the screen/window in characters. </s> kill -s WINCH $$
Search for environmental variables with "HIST" in their name or contents </s> set | grep HIST
Find all files under current directory and set read permission for group and other for these files </s> find . -type f -print0 | xargs -0 chmod go+r
Search the current directory tree for files whose names do not end in ".exe" and ".dll" </s> find . -not -name "*.exe" -not -name "*.dll" -not -type d
Search the current directory recursively for MOV files, following symlinks </s> find . -iname "*.mov" -follow
Search for command "tail" in the maps of the process with PID 2671 </s> cat /proc/2671/maps | grep `which tail`
Find all executable upvoter-* files (following symlinks) under maximum 1 level down the current directory </s> find -L -maxdepth 1 -name 'upvoter-*' -type f -perm /111
search in the current folder for the file with the name "test" ( case insensitive search ) </s> find . -iname test
Run a shell with all environment variables specified in the file 'cronenv' in the user's home directory. </s> env - `cat ~/cronenv` /bin/sh
Find all *.ogg files on the system ignoring the case </s> find / -iname '*.ogg'
Archive "/path/to/files" to "/path" on host "user@targethost" with elevated permission on the remote host </s> rsync -av --rsync-path="sudo rsync" /path/to/files user@targethost:/path
find all the symbolic links in the current folder and check the file type and display the output of those files which are broken </s> find ./ -type l -exec file {} \; |grep broken
Archive current directory to "/some/path" on localhost, using ssh to authentify as user "me", only update files that are newer in the source directory. </s> rsync -auve "ssh -p 2222" . me@localhost:/some/path
Merge already sorted files "file*.txt" and split the result into files of at most 100000 lines each with a prefix "sorted_file" </s> sort --merge file*.txt | split -l 100000 - sorted_file
Find all regular files in the /path/to/base/dir tree </s> find /path/to/base/dir -type f
Find all *.p[lm] files under /users/tom directory that matches the regex '->get(\|#hyphenate' in their contents </s> find /users/tom -name '*.p[lm]' -exec grep -l -- '->get(\|#hyphenate' {} +
Recursively finds all '*.pdf' files and folders in a current folder and removes them without prompting. </s> find . -name "*.pdf" -print0 | xargs -0 rm -rf
find the depth of all the files in current folder and display the depth and file name </s> find folder1/ -depth -type f -printf "%d\t%p\n"
Search the current directory tree for symlinks whose contents match pattern "*sysdep.c" </s> find . -lname '*sysdep.c'
display all the files in the current directory and do not search in sub directories </s> find . -maxdepth 1 -print0
Find all directories under '/nas' directory tree </s> find /nas -type d
Find all *.mp4 files under /foo/bar and move them to /some/path </s> find /foot/bar/ -name '*.mp4' -exec mv -t /some/path {} +
remove all core files in the file system </s> find / -name "*.core" -print -exec rm {} \;
Find all *.jpg files in */201111/* paths and numerically sort them according to the second field in the file name with a delimiter '_' </s> find */201111/* -name "*.jpg" | sort -t '_' -nk2
Find all file in current directory with have .c extenstion & have 777 permission . delete then </s> find . -name "*.c" -a  -perm -777 | xargs rm -rf
Change the owner to "user" and group to "group" of files "file ..." </s> chown user:group file ...
Find all files/directories in entire file system for which owner has read/write/execute permissions, or the group has at least execute permission, or others have at least execute permission </s> find / -perm /711
Find files/directories containing 'test' in their names and display the directory contents before the directories themselves </s> find -name "*test*" -depth
display all the files in the current folder along with the hidden files with the depth </s> find . — name "*" — print -о -name ".*" — print -depth
Rename "new" to "old" and make a backup if "old" exists </s> mv new old -b
Report file systems disk usage in 1GB blocks. </s> df -BG
Print standard input to standard output line by line, discarding any adjascent duplicate lines. </s> uniq
Print common lines in "file1" and "file2" </s> comm -12 file1 file2
find files under the current directory called "foo" or "bar" </s> find . \( -name "foo" -o -name "bar" \)
Perform a dry run to recursively copy "test/a" to "test/dest" excluding "test/a/b/c/d" </s> rsync -nvraL test/a test/dest --exclude=a/b/c/d
display all files in the current folder </s> find . -print
Print file name without extension assuming there is only one dot in the file name. </s> echo "$FILE" | cut -d'.' -f1
Find file names *blast* in specfied directory, case insensitive </s> find /usr/local -iname "*blast*"
list all .c or .sh regular files. </s> find . -type f \( -name "*.c" -o -name "*.sh" \)
Copy file in current directory of local host to host "remote", connecting as ssh user matching current local username, and copying the file in home directory on remote host - enable compression during transfer. </s> scp -C file remote:
find all the files in the folder /home which are bigger than 10MB and smaller than 50 MB </s> find /home -size +10M -size -50M
Remove the last file extension from standard input </s> sed 's/^/./' | rev | cut -d. -f2- | rev | cut -c2-
Find all *.htm files under current directory and print the changed names by appending 3 levels of parent directory names at the beginning and modifying the actual name to dd-nnn format </s> find -type f -name "*.htm" | awk -F'[/]' 'BEGIN{OFS="-"}{ gsub(/^\.\//,"") ;print $1,$2, substr($4,3,2),substr($4,5,2),substr($4,8) }'
Create a symbolic link in the current directory for each file under the directories matching "../[12][0-9][0-9]" </s> find ../[12][0-9][0-9][0-9] -type f -exec ln -s {} \;
create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units) </s> find . -name '*.log' -mtime +3 -print0 | xargs -0 -n 500 -P 4 bzip2
Move all files/directories under current directory to ~/play </s> find . | xargs -I'{}' mv '{}' ~/play/
Save the first "." separated field of the system host name to variable "HOSTZ" </s> HOSTZ=$( hostname | cut -d. -f1 )
find files under the current directory containing a space in the filename and delete them </s> find . -name "* *" -exec rm -f {} \;
Prefix each non-blank line in "filename" with a line number </s> nl filename
Rename all files in current directory with names starting with "fgh" so they start with "jkl" instead </s> rename 's/^fgh/jkl/' fgh*
display all the jpg images in current folder </s> find . -type f -iregex '.*\.jpe?g'
Find and remove the file with inode number 782263 in the current directory tree </s> find . -inum 782263 -exec rm -i {} \;
Enable history and history expansion within a script </s> set -o history -o histexpand
Find all *.py files under and below the current directory and search them for "xrange" </s> find . -name '*.py' -exec grep --color 'xrange' {} +
Copies file 'index.html' to each top-level directory in the current directory. </s> find . -mindepth 1 -maxdepth 1 -type d| xargs -n 1 cp -i index.html
Print the first 5 characters followed by the next 5 characters on a new line for each line in "input_file" and split the result into files of at most 2000000 lines each with a filename prefix "out-prefix-" </s> sed 's/\(.....\)\(.....\)/\1\n\2/' input_file | split -l 2000000 - out-prefix-
Counts lines in each *.php file. </s> wc -l `tree -if --noreport | grep -e'\.php$'`
Execute "date" every second </s> watch -n 1 date
Create intermediate directories as required and directory project/{lib/ext,bin,src,doc/{html,info,pdf},demo/stat/a} </s> mkdir -p project/{lib/ext,bin,src,doc/{html,info,pdf},demo/stat/a}
search for a shell script in the current folder and display the current folder path </s> find . -name onlyme.sh -exec pwd \;
List files larger than 10MB under /var/log /tmp that haven't changed in a month </s> find /tmp /var/tmp -size +30M -mtime 31 -print0 | xargs -0 ls -l
Lists '/tmp/hashmap.$1' file or folder '/tmp/hashmap.$1' content one file per line. </s> ls -1 /tmp/hashmap.$1
Gets MAC address of eth0 network interface. </s> ifconfig | grep -i hwaddr | cut -d ' ' -f9
Save the last modified time of file 'file_name' to variable 'STAMP' </s> STAMP=`date -r file_name`
Compare the contents of "/bin" and "/usr/bin" line by line </s> diff <(ls /bin) <(ls /usr/bin)
display all the regular files in current folder </s> find . -type f
Create symlinks to all  /home/folder1/*.txt files with the same name in current directory </s> find /home/folder1/*.txt -type f -exec ln -s {} \;
Search directory $CURR_DIR for regular files that were changed, accessed, or modified $FTIME days ago </s> find ${CURR_DIR} -type f \( -ctime ${FTIME} -o -atime ${FTIME} -o -mtime ${FTIME} \) -printf "./%P\n"
List files/directories at least three levels down the directory tree </s> find / -mindepth 3  -name "*log"
List all leaf directories of the current directory tree </s> find . -type d -links 2
Recursively print all files and directories in the current directory tree </s> tree .
search for the directory testdir in the folder /home </s> find /home -type d -name testdir
Search the home directory tree for files modified less than a day ago </s> find $HOME -mtime -1
create a symbolic link named "/usr/lib/jvm/default-java" to file "/usr/lib/jvm/java-7-oracle" </s> sudo ln -s /usr/lib/jvm/java-7-oracle /usr/lib/jvm/default-java
Find all *.foo files under current directory and print their contents </s> cat $(find . -name '*.foo')
Search the `images' directory tree for regular files </s> find images/ -type f
Remove all regular files from the current directory tree whose names do not end with "ignore1" or "ignore2" </s> find . -type f -not -name '*ignore1' -not -name '*ignore2' | xargs rm
display all the files in the usr folder and those that are in the path local </s> find /usr/ -path "*local*"
display a long listing of the files in current folder which have been modified in the last 60 minutes </s> find . -mmin -60 |xargs ls -l
Search the files from the current directory tree for "foo" </s> find . -exec grep foo {} \;
Calculate the md5 sum of the tar archive of "dir" </s> tar c dir | md5sum
List the full path of each directory in the current working directory </s> tree -dfi -L 1 "$(pwd)"
Search the home directory for filenames starting with "xx" except for "xxx" files </s> find ~ -name 'xx*' -and -not -name 'xxx'
Display bash function definition of "foobar" </s> set | grep -A999 '^foobar ()' | grep -m1 -B999 '^}'
Remove regular files in the current directory tree </s> find . -type f -print0 | xargs -0 -n1 echo rm | sh -x
Output all lines in BigFile.csv whose secondn comma-separated second field matches first field of a line in LittleFile.csv. </s> join -1 2 -2 1 -t, BigFile.csv LittleFile.csv
find all the perl files in /var/www </s> find /var/www/ -type f -name "*.pl" -print
Print absolute path of "PATH" </s> readlink -f PATH
Print argument "$1" "$number" times </s> yes $1 | head -$number
Find all hidden files in the current directory </s> find . -type f -name ".*"
Find only directories </s> find . -type d
Add executable permission to "pretty-print" </s> chmod +x pretty-print
Find all *.txt files under /foo and print their total size </s> find /foo -name "*.txt" -exec du -hc {} + | tail -n1
Gets domain name from dig reverse lookup. </s> dig -x 8.8.8.8 | grep PTR | cut -d ' ' -f 2 | grep google | cut -f 5
Find all directories under 'A' directory tree excluding paths containing the directory 'a' </s> find A -type d \( ! -wholename "A/a/*" \)
Find all files named 'Makefile' in the /usr/ports directory tree and count the number of lines in them matching regular expression '^MASTER_SITE_SUBDIR.*\.\./.*authors' </s> find /usr/ports/ -name Makefile -exec grep '^MASTER_SITE_SUBDIR.*\.\./.*authors' '{}' '+' | wc -l
Find all files on the system that are larger than 600 MB </s> find / -size +600M -print
Remove all files containing 'sample' (case insensitive) in their names under '/home/user/Series' directory tree </s> /usr/bin/find /home/user/Series/ -iname "*sample*" -exec rm {} \;
Print command line of process with pid 17709 </s> cat /proc/17709/cmdline | xargs -0 echo
Add variable 'v' with value '5' to a temporary environment, list this environment using 'less' to interactively view it. </s> v=5 env|less
display all the files in the current folder which contains form feed (^L) and does not contain NULL </s> find . | xargs grep -PL "\x00" | xargs grep -Pl "\x0c"
dsisplay all files inthe current folder </s> find .
list all regular files which path is not dir1 or dir2 </s> find ! -path "dir1" ! -path "dir2" -type f
Find regular files modified within the last 7 days </s> find . -mtime -7 -type f
Search for all files in the current directory recursively whose names end with "Linkin Park" </s> find . -name "*Linkin Park"
Find all Name* files under ../../$name-module and rename them by replacing 'Name' with $Name (will be expanded in the current shell) in their names </s> find ../../$name-module -print0 -name 'Name*' -type f | xargs -0 rename "s/Name/$Name/"
find all the files in the current directory whose size is equal to exactly 126MB. </s> find . -size 126M
Rename all "thumbs" directories to "thumb" in the current directory tree </s> find . -type d -exec rename 's/^thumbs$/thumb/' {} ";"
Print all filenames under /proc and below </s> find /proc -exec ls '{}' \;
Prefix all files and directories in the current directory with "unix_" </s> ls | xargs -i mv {} unix_{}
Print which files differ between "dir1/" and "dir2/" </s> diff --brief -r dir1/ dir2/
split file /usr/bin/firefox into pieces per 1000 lines </s> split -n 1000 /usr/bin/firefox
List the files from the current directory tree that contain lines matching regular expression '^From:.*unique sender', ignoring ~/src and ~/bin </s> find . -name bin -prune -o -name src -prune -o -type f -print | xargs egrep -il '^From:.*unique sender'
find all the directories in the entire file system whose size is greater than 50KB </s> find / -type d -size +50k
Remove all files under /myfiles that were accessed more than 30 days ago </s> find /myfiles -atime +30 -exec rm {} \;
find all text files in the folder "FFF" and find the md5sum for them </s> find FFF -name "*.txt" -exec md5sum '{}' \;
Insert "|" every 30 characters in file "longline" </s> fold -w30 longline | tr '\n' '|' | sed 's/|$/\n/'
Find `string' in all *.java files ignoring the case of that string </s> find . -type f -name "*.java" -exec grep -il string {} \;
Merge file1 and file2 by outputting all lines where the first comma-separated field of both files matches, followed by extra fields in file1 and those in file2 </s> join -t, <(sort file1) <(sort file2)
Archive "/home/user1" to "wobgalaxy02:/home/user1" excluding hidden files </s> rsync -av /home/user1 wobgalaxy02:/home/user1
Add group write permission to all files and directories in the current directory including hidden files and excluding ".." </s> chmod g+w .[^.]* ..?*
find all the directories in the current folder which have been modified in 24 hours and move them to the folder  /path/to/target-dir </s> find . -depth -type d -mtime 0 -exec mv -t /path/to/target-dir {} +
Prints line count of each file within current directory. </s> find . -type f -print0 | xargs -0L1 wc -l
Read a line from standard input into variable "password" without echoing the input and using the prompt "Password: " </s> read -s -p "Password: " password
Print sed commands that would replace all occurrences of 'previousword' with 'newword' in all regular files with '.cpp' extension under '/myprojects' directory tree </s> find /myprojects -type f -name '*.cpp' -print0 |    xargs -0 echo sed -i 's/previousword/newword/g'
Find not-executable files under /home/www </s> find /home/www/ ! -executable
Find the top 5 big files </s> find . -type f -exec ls -s {} \; | sort -n -r | head -5
Print the file content of command "f" </s> cat "$(which f)"
Find all files, folders, symlinks, etc in the current directory recursively </s> find .
Find files on the system that are bigger than 20 megabytes </s> find / -type f -size +20M -exec ls -lh {} \; | awk '{ print $NF ": " $5 }'
Search the current directory tree for files whose names end in "rb" or "js" </s> find . -regextype posix-egrep -regex ".*(rb|js)$"
display all normal/regular files in current folder which have readable permission </s> find . -type f -readable
Go to previous working directory. </s> cd -
Find all files under directory tree /path/to/dir whose permissions are not 644 </s> find /path/to/dir ! -perm 644
Search for files/directories which are writable by either their owner or their group </s> find . -perm /u=w,g=w
Display all lines containing "IP_MROUTE" in the current kernel's compile-time config file. </s> cat /boot/config-`uname -r` | grep IP_MROUTE
Print appended data in "/var/log/syslog" as the file grows </s> tail -f /var/log/syslog
find all the regular files in the current folder which start with a "some text" </s> find . -type f -name '*some text*'
Find all *FooBar* files/directories under current directory and copy them to ~/foo/bar </s> find -name '*FooBar*' -print0 | xargs -0 cp -t ~/foo/bar
Copy all files and directories under the current directory into "../new" preserving relative paths </s> find -print0 | sort -z | cpio -pdv0 ../new
find all symbolic links under /usr </s> find /usr -type l
Copy the directory hierarchy of the current directory to "destdir" </s> find . -type d | cpio -pdvm destdir
Print all distinct characters in input "He likes cats, really?" </s> echo "He likes cats, really?" | fold -w1 | sort -u
Move all files listed in $i file to dir.$count directory </s> cat $i | xargs mv -t dir.$count
find all files in current folder using name patterns </s> find . -iregex ".*packet.*"
find md5sum of content from "www.google.com" </s> curl -s www.google.com | md5
Sort tab separated file "file" using a version sort for field 6 and a numeric sort for field 7 </s> sort -t$'\t' -k6V -k7n file
Print the files in the current directory as a list of comma separated values </s> ls -1 | tr '\n' ','
List all files/directories under /data1/Marcel which are greater than 524288 bytes and were modified or accessed more than 1 year ago </s> find /data1/Marcel -size +1024 \( -mtime +365 -o -atime +365 \) -ls
Save absolute path of "/home/nohsib/dvc/../bop" in variable "absolute_path" </s> absolute_path=$(readlink -m /home/nohsib/dvc/../bop)
List the largest file prefixed by its size in bytes of all files under the current directory </s> find . -type f -name '*.gz' -printf '%s %p\n'|sort -nr|head -n 1
Find all files/directories with 777 permission under current directory tree </s> find . -perm 777 -print
Search for 'DOGS' in all files with '.txt' extension under ~/documents and also print the file names </s> find ~/documents -type f -name '*.txt' -exec grep -s DOGS {} \; -print
find all the empty files and folders in your system </s> find / -empty
Search the current directory tree for .rb files ignoring .vendor directories </s> find . -name .vendor -prune -o -name '*.rb' -print
Find regular files in the current directory tree that have all executable bits set </s> find -L . -type f -perm -a=x
Search the src/ directory recursively for .c and .h files </s> find src/ -name '*.[ch]'
Find all files under ${searchpath} that match the regex ${string1}.*${string2}.*${string3}  in their contents where ${string1} etc.. will be expanded </s> find "${searchpath}" -type f -print0 | xargs -0 grep -l -E "${string1}.*${string2}.*${string3}"
List the largest file in long list format of all the files under the current directory </s> find . -type f -ls | sort -nrk7 | head -1 #unformatted
Find all files in the current directory and below with extension .php and replace "php" with "html" in their names </s> find ./ -type f -name "*.php"  | xargs -r rename "s/php/html/"
Search for 'mystring' in all *.txt (case insensitive) files under current directory </s> find . -iname *.txt -exec egrep mystring \{\} \;
removes last N lines from file.txt </s> head --lines=-N file.txt
Find all regular files under $dir directory tree that are bigger than $size MB in size and print them along with their sizes in decreasing order of size </s> find $dir -type f -size +"$size"M -printf '%s %p\n' | sort -rn
Send one ping request to host with local address in the 192.168.1.x range, with last number specified by variable "COUNTER", and output only lines containing "ms" to standard output. </s> ping -c 1 192.168.1.$COUNTER | grep 'ms'
Print the list of files from the "/zu/durchsuchender/Ordner" directory tree whose names begin with "beispieldatei" and which contain string "Beispielinhalt" </s> find "/zu/durchsuchender/Ordner" -name "beispieldatei*" -print0 | xargs -0 grep -l "Beispielinhalt"
list the files with a name ending with '.mp3' or '.jpg' and beginning with 'foo' </s> find . \( -name '*.mp3' -o -name '*.jpg' \) -name 'foo*' -print
Search case insensitively for 'foo' in all the files with '.java' extension under current directory tree and show only the file names </s> find . -type f -name "*.java" -exec grep -il 'foo' {} \;
Count the number of files in the current directory and below </s> find . -type d -exec basename {} \; | wc –l
Prints number of files with extension "${EXTENSION}" in the "${SEARCHPATH}" directory. </s> echo "Number files in SEARCH PATH with EXTENSION:" $(ls -1 "${SEARCHPATH}"/*."${EXTENSION}" | wc -l)
Search for line 111 in file "active_record.rb" with 2 lines of context </s> nl -ba  -nln  active_record.rb  | grep -C 2 '^111 '
Display differences between a and b side-by-side </s> diff -y a b
display all the hidden directories in the directory "/dir/to/search/" </s> find /dir/to/search -path '*/.*' -print
display all the files in the folder /home which do not belong to the group test </s> find /home -not -group test
Find all files in /var/www/html/zip/data/*/*/*/*/* that are older than 90 days and print only unique parent directory paths </s> find /var/www/html/zip/data/*/*/*/*/* -type f -mtime +90 -printf "%h\n" | sort | uniq
get year-month-day hour:minute:second from date </s> date +%Y-%m-%d:%H:%M:%S
Create intermediate directories as required and directory  /my/other/path/here </s> mkdir -p /my/other/path/here
Output two lines of "-tcp" </s> yes -- -tcp | head -n 2
Find all $1 files/directories under current directory and enter into the parent directory of the first one found </s> cd $(dirname $(find . -name $1 | sed 1q))
Page through the contents of 'input_file_name' hexdumped with space-separated 2-byte units. </s> od -xcb input_file_name | less
Delete all hidden files under $some_directory </s> find "$some_directory" -type f -name '.*' -delete
Search the entire file hierarchy for all regular files owned by olduser and change their ownership to newuser. </s> find / -user olduser  -type f  -exec chown newuser {} \
Find all SGID set files </s> find / -perm /g=s
Find all files/directories that start with 'test' in their names under current directory tree </s> find . -name 'test*'
Run the find command with all shell positional arguments </s> `which find` "$@" -print0;
display all the regular/normal files in a folder </s> find $FILES_PATH -type f
List first 5 files named 'something' that are found under current directory </s> find . -name something -print | head -n 5
Prints process tree of a current process with parents processes and id numbers. </s> pstree --show-parents -p $$ | head -n 1 | sed 's/\(.*\)+.*/\1/' | less
Find all files named "filename" in the current directory tree, not descending into "FOLDER1" directories </s> find . '(' -name FOLDER1 -prune -o -name filename ')' -print
Find all README's in /usr/share </s> find /usr/share -name README
Prints long listing of file 'file.ext'. </s> ls -al file.ext
Remove all libGLE* files from the current directory tree </s> find . -name libGLE* | xargs rm -f
Prints total number of lines of all *.php files in a current folder and subfolders. </s> cat `find . -name "*.php"` | wc -l
List all files in the current directory tree that were last modified yesterday or later </s> find -newermt yesterday -ls
find all the directories in the current folder that are empty(size 0 bytes) </s> find -type d -empty
find all directories with the name test in a directory </s> find /home/john -type d -name test -print
List all cron jobs which contain "word". </s> crontab -l | grep 'word'
Find all catalina* files/directories under current directory </s> find -name 'catalina*'
search for a word in all the files in the current directory </s> find . -exec grep chrome {} \;
Compare the contents of gzip-ompressed files "file1" and "file2" </s> diff <(zcat file1.gz) <(zcat file2.gz)
find al the tmp directories in the current directory and create a dump of it </s> find . -type d -name tmp -prune -o -print | cpio -dump /backup
Print only strings from file 'file2' that not found in 'file1' </s> comm -1 -3 file1 file2
Print type of the file system containing path $dir. </s> df -T $dir | tail -1 | awk '{print $2;}'
find all the files in the current folder with the name "test-a" and move them to the folder test-10. execdir runs the command in the directory where the file is found. </s> find ~ -type f -name test-a -execdir mv {} test-10 \;
Search the home directory tree for files owned by sam </s> find /home -user sam
Set 644 permission to all regular files under current directory </s> find . -type f -print0 | xargs -0 chmod 644
Set variable "b" to the first word of "a" converted to uppercase. </s> b=`echo "$a" | awk '{ print toupper($1) }'`
Find the passwd file under the root directory and two levels down </s> find / -maxdepth 3 -name passwd
Change directory to the output of command '~/marker.sh go "$@"' </s> cd $( ~/marker.sh go "$@" )
Print the full path of a file under the current working directory with inode number specified on standard input </s> xargs -n 1 -I '{}' find "$(pwd)" -type f -inum '{}' -print
Set variable value to current kernel release name. </s> value=$(uname -r)
Recursively finds all files with any cased text "Text" in a current folder, and precedes found string with its number in file. </s> grep -inr "Text" folder/to/be/searched/
display all normal/regular files in current  folder </s> find . -type f
rename all the svg.png files to png files in the current fodler </s> find . -name "*.svg.png" -print0 | sed 's/.svg.png//g' | xargs -0 -I namePrefix mv namePrefix.svg.png namePrefix.png
Limit each line in "your_file" to 80 characters and view via "more" </s> fold -80 your_file | more
display all the java, xml and action scripts (.as) files in a directory </s> find dir1 -type f -a \( -name "*.java" -o -name "*.as" -o -name "*.xml" \)
Split "randn20M.csv" into files of at most 5000000 lines each with prefix "_tmp" </s> split -l5000000 randn20M.csv '_tmp';
Find all files/directories that are bigger than 100 bytes under '/home/apache' directory tree </s> find /home/apache -size 100c -print
Remove all .txt files in and below the current directory </s> find . -name "*.txt" -delete
Print file name without the last two extensions assuming the file name doesn't contain any other dots. </s> echo "$FILE" | cut -d'.' --complement -f2-
Strips two last sections from the path $pathname, and prints basename of the rest part. </s> echo $(basename $(dirname $(dirname $pathname)))
Find all files/directoires that were modified more than 3 days ago under $dir directory tree </s> find $dir -mtime +3
List all files that have not been read in thirty days or more </s> find . -type f -atime +30 -print
Find all files/directories with case insensitive name pattern $TARGET that are located in minimum 10 level down the current directory </s> find -mindepth 10 -iname $TARGET
Find all *.cpp files in the current directory tree that contain "sub" in their names </s> find . -name "*sub*.cpp"
find regular files under the current directory and execute an md5sum command on each one </s> find -type f -exec md5sum {} +
find all the normal/regular files in the current directory and search for the word mail and display the file names </s> find . -type f -exec grep -il mail
change the permission of all the regular/normal files in the current folder from 777 to 755 </s> find . -type f -perm 777 -exec chmod 755 {} \;
Find all .java files starting from the current folder </s> find . -name "*.java"
display all the files in the current folder </s> find . | xargs echo
Make directory "/etc/cron.15sec" </s> mkdir /etc/cron.15sec
Find all directories whose name is root in / directory </s> find / -type d -name root
Remove all directories called "test" from the current directory tree </s> find -path "*/test/*" -delete
Hash hostnames in user's known hosts file. </s> ssh-keygen -Hf ~/.ssh/known_hosts
find all png files in the current folder </s> find . -type f -name '*.png'
Find all executable symlinks or upvoter-* files under maximum 1 level down the {} directory </s> find {} -name 'upvoter-*' -type f -or -type l -maxdepth 1 -perm +111
View manual page of the find command </s> man find
Search the current directory tree for .aux files </s> find . -name ".aux"
Find all regular files under current directory (no subdirectories) and replace every occurrences of 'toreplace' with 'replace' in those files </s> find . -maxdepth 1 -type f -print0 | xargs -0 sed -i 's/toreplace/replaced/g'
Enables shell option 'nocaseglob'. </s> shopt -s nocaseglob
Print current date as epoch seconds </s> date +%s
copy all files which do not have execute permission to another folder </s> cp `find -perm -111 -type f` /usr/local/bin
Find all files under current directory </s> find "`pwd`" -type f
Move all directories in the current directory tree that have been modified in the last day to "/path/to/target-dir" </s> find . -type d -mtime -0 -exec mv -t /path/to/target-dir {} +
Run a "rm" process to recursively remove "cache", making it immune to all SIGHUP signals sent to it. </s> nohup rm -rf cache &
find all the files in the folder /usr/bin which have been modified in the last 10 days </s> find /usr/bin -type f -mtime -10
Print the names of all files and directories in the current directory tree </s> find .
Print each character in "Hello" as a hexadecimal value </s> echo -n "Hello" | od -A n -t x1
Set trace prompt to print seconds, nnoseconds, script name, and line number </s> PS4='+$(date "+%s:%N") %N:%i> '
Wrap each line in "yourfile" to fit in 79 characters and right pad any lines shorter with spaces </s> fold -w79 yourfile | sed -e :a -e 's/^.\{0,78\}$/& /;ta'
List the commands in /usr/bin, pausing for user input after each page. </s> more <( ls /usr/bin )
search all mp3 files in the folder "/home/you" which have been modified yesterday (from the start of day 00:00 to 23:59) </s> find /home/you -iname "*.mp3" -daystart -type f -mtime 1
search  character special files called ' backup '  from  /usr directory downwards and print them . </s> find /usr -type c -name backup -print
Search for all files with either "sitesearch" or "demo" in their path names </s> find . -ipath '*sitesearch*' -ipath '*demo*'
Find all files in $dir directory (non-recursive) and count them </s> find "$dir" -maxdepth 1 -type f | wc -l
find all the cpp(C++ source files), java, header files in the current directory </s> find . -name *.cpp -o -name *.h -o -name *.java
Format "file.txt" as space separated columns 28 characters in width </s> cat file.txt | column -c 28 -s "\ "
find all the text files in the current folder and display their Permissions and size along with their name </s> find . -name "*.txt" -printf "%M %f \t %s bytes \t%y\n"
Recursively finds all files in root folder and prints all strings with 'text-to-find-here' from that files, ignoring binary files. </s> find / -type f -exec grep -l "text-to-find-here" {} \;
Find all files under current directory </s> find -type f
Search non-recursively directory tree `MyApp.app' for directories whose name is 'Headers' and delete them in an optimized way </s> find MyApp.app -name Headers -type d -prune -exec rm -rf {} +
Get A record for domain $domain </s> dig $domain
Reports count of characters in the value of ${FOO_NO_LEAD_SPACE} variable as follows: "length(FOO_NO_LEAD_SPACE)==<counted number of characters>" </s> echo -e "length(FOO_NO_LEAD_SPACE)==$(echo -ne "${FOO_NO_LEAD_SPACE}" | wc -m)"
Save directory "../../lib" relative to the executable "gcc" to variable "libdir" </s> libdir=$(dirname $(dirname $(which gcc)))/lib
Change permissions to 644 for *.html files under /usr/local </s> find /usr/local -name "*.html" -type f -exec chmod 644 {} \;
Delete all files in the /myDir directory tree that were last modified 7 days ago </s> find /myDir -mtime 7 -exec rm -rf {} \;
Get a list of all hidden files from the current directory tree </s> find . -type f -name '.*'
Show directory sizes in KB and sort to give the largest at the end </s> find . -type d -exec du -sk {} \; |  sort -n -k 1
Delete files in /var/tmp/stuff and below that have not been modified in over 90 days </s> find /var/tmp/stuff -mtime +90 -exec /bin/rm {} \;
Copies all files under current directory like '*FooBar*' to the '~/foo/bar' directory. </s> find -name '*FooBar*' -print0 | xargs -0 cp -t ~/foo/bar
Numerically sort each line of standard input </s> sort -n
Copy recursively "/source/backup" to "/destination" preserving symbolic links, modification times, and permissions </s> rsync -rtvpl /source/backup /destination
find all the zip files in the current folder </s> find . -type f -name '*.zip'
Execute "ps -C java -o pcpu,state,cputime,etimes" every second </s> watch -n 1 ps -C java -o pcpu,state,cputime,etimes
Search the Movies folder in the user's home directory for files larger than 1024 megabytes in size. </s> find ~/Movies/ -size +1024M
Print full path of command "gradle" </s> which gradle
Remove all files whose names end with "~" in the /home/peter directory tree </s> find /home/peter -name *~ |xargs rm
Delete all the files found in the current directory tree whose names begin with "heapdump" </s> find . -name heapdump*|xargs rm
Archive all directories in /path/to/directory/* (only command line arguments, no sub-directories) to files with .tar.gz extension transforming the full paths to relative paths </s> find /path/* -maxdepth 0 -type d -exec sudo tar -zcpvf {}.tar.gz {} \;
Move all files in "/path/subfolder" to "/path" without clobbering any destination files </s> find /path/subfolder -maxdepth 1 -type f -name '*' -exec mv -n {} /path \;
Recursively removes all files like '*.xyz' in a current folder. </s> find . -name \*.xyz -exec rm {} \;
Find all files under current directory excluding hidden files </s> find . -depth -path './.*' -prune -o -print
Print a sorted list of the extensions of the regular files from the current directory tree </s> find . -type f -name "*.*" | awk -F. '{print $NF}' | sort -u
Find all files/directories under current directory which have read-write permission for owner and only read permission for group and others </s> find -perm -644
List unique MD5 digests of all files in the current directory ending in .txt </s> md5sum *.txt | cut -d ' ' -f 1 | sort -u
Replace the occurrences of "HOGE" with "MOGA" once per each line of the .yaml files from the current directory tree </s> find . -type f -name "*.yaml" -print0 | xargs -0 sed -i -e "s/HOGE/MOGA/"
Enables shell option 'promptvars'. </s> shopt -s promptvars
force delete all the files which have not been accessed in the last 240 hours in the temp folder </s> find /tmp/* -atime +10 -exec rm -f {} \;
Print and delete all directories named 'work' under '/usr/ports/' directory tree </s> find /usr/ports/ -name work -type d -print -exec rm -rf {} \;
find all the files ending with undo in the current folder and calculate the total size of these files </s> find . -name "*.undo" -ls | awk '{total += $7} END {print total}'
Report only total size of file systems in 1T blocks. </s> df --total -BT | tail -n 1 | sed -E 's/total *([^ ]*).*/\1/'
Copies all files like "*foo*" under the current directory to the '/your/dest' directory. </s> find . -name "*foo*" | sed -e "s/'/\\\'/g" -e 's/"/\\"/g' -e 's/ /\\ /g' | xargs cp /your/dest
display all the files in the kat folder </s> find kat -printf "%f\n"
Find '.java' files with checksum 0bee89b07a248e27c83fc3d5951213c1 in the current directory </s> md5sum *.java | grep 0bee89b07a248e27c83fc3d5951213c1
Print $d if $d is empty </s> find "$d" -prune -empty
Move "phantomjs-1.8.1-linux-x86_64.tar.bz2" to "/usr/local/share/" directory </s> sudo mv phantomjs-1.8.1-linux-x86_64.tar.bz2 /usr/local/share/.
display all the tex files in the current folder </s> find . -name "*.tex"
find all the files in the current folder which have been modified in the last one minute </s> find . -type f -mmin 0
Find all files/directories with '.js' extension under current directory tree without descending into  and ignoring './directory' completely </s> find . -not \( -path ./directory -prune \) -name \*.js
display all the files in the file system which are present in nfs system </s> find / -fstype nfs -print
Set variable "fname" to the basename of path specified in variable "f", that is remove everything up to the last slash if present. </s> fname=`basename $f`
Recursively search through all files in all directories for any lines containing "pattern" and whose second word is not "Binary". </s> grep -Ri "pattern" * | awk '{if($1 != "Binary") print $0}'
Search for filenames matching "android" in the current directory and number the output </s> ls | grep android | nl
Display the differences between "file1.cf" and "file2.cf" side-by-side with a width of 150 characters </s> diff -y -W 150 file1.cf file2.cf
Find all directories starting from YOUR_STARTING_DIRECTORY that contain the string "99966" in their names </s> find YOUR_STARTING_DIRECTORY -type d -name "*99966*" -print
Find directories in the /path directory tree whose names are 33 characters in length </s> find /path -type d -printf "%f\n" | awk 'length==33'
find all file name in curent directory ,  -exec will file all file output  awk used here for print only file name . </s> find .  -type f  -exec ls -lrt {} \; |awk -F' ' '{print $9}'
Find all the files in the current directory recursively whose permissions are not 777 </s> find . -type f ! -perm 777 | head
Print the IP addresses for the current host name </s> hostname -I | awk '{print $1}'
Create a rsa key with comment specified by variable APP and passphrase specified y SSHKEYPASS. </s> ssh-keygen -t rsa -C "$APP" -N "$SSHKEYPASS" -f ~/.ssh/id_rsa
find all files in the current folder which have been modified in the last 24 hours </s> find . -mtime -1 -print
Execute "script.awk" on "file" and format the output as a table </s> awk -f script.awk file{,} | column -t
Saves file sctipt.sh size in 'size' variable. </s> size=`cat script.sh | wc -c`
Copy an entire file structure, creating empty files in the copy instead of copying the actual files. </s> find src/ -type d -exec mkdir -p dest/{} \; -o -type f -exec touch dest/{} \;
Force create a symbolc link named "softlink_name" to "source_file_or_directory_name" without dereferencing "softlink_name" </s> ln -sfn source_file_or_directory_name softlink_name
Find all files/directories under current directory tree excluding hidden files/directories </s> find . -not -path '*/\.*'
Search for all files in the current directory recursively whose names begin with "Linkin Park" </s> find . -name "Linkin Park*"
Find all files/directories under current directory appending a null character at the end of each file name/path </s> find -print0
Finds all users logged in via ssh. </s> w | grep ssh
Search the home directory tree for regular files modified yesterday </s> find ~ -daystart -type f -mtime 1
Shows state of 'globstar' shell option. </s> shopt globstar
Find the files in the current directory that match pattern '*.ISOLATE.*.txt' and move them to folder ./ISOLATE </s> find . -name '*.ISOLATE.*.txt' -maxdepth 1 -print0 | xargs -0 -IFILE mv FILE ./ISOLATE
Find the total size of *.jpg files within the current directory tree </s> find . -type f -iname '*.jpg' -print0 | du -c --files0-from=-
Find all files under and below the current working directory with the word California in the file </s> find . -type f -exec grep California {} \; -print
Make directory "~/temp" </s> mkdir ~/temp
Allow anyone to run command "Xvfb" as the owner of "Xvfb" </s> sudo chmod u+s `which Xvfb`
Creates full path with parents, that matches to folder path extracted from $f variable. </s> mkdir -p -- "$(dirname -- "$f")"
Find all *.$input_file_type files/directories under $source_dir with the null character as the delimiter </s> find "$source_dir" -name "*.$input_file_type" -print0
search all jpg files in current folder </s> find . -type f -name "*.jpg"
Find directories named `doc' in /usr and below </s> find /usr \( -name doc -and -type d \)
Sets 'extglob' shell option. </s> shopt -s extglob
delete all the regular files in the temp folder which have not been modified in the last 24 hours </s> find /tmp/ -type f -mtime +1 -delete
Split the contents of all ".txt" excluding the first 1000 lines into files of at most 1000 lines each </s> cat *.txt | tail -n +1001 | split --lines=1000
Archive "/path/to/sfolder" to "name@remote.server:/path/to/remote/dfolder" preserving hard links and compressing the data during transmission </s> rsync -aHvz /path/to/sfolder name@remote.server:/path/to/remote/dfolder
find all files in the home folder that are modified in the last 24 hours </s> find $HOME -mtime -1
Gets IP address of 'en1' network interface. </s> ifconfig en1 | sed -n '/inet addr/s/.*addr.\([^ ]*\) .*/\1/p'
Checks that 'monit' user is in 'www-data' group. </s> groups monit |grep www-data
Print each line in parallel in files "tmp/sample-XXX.tim" and "tmp/sample-XXX.log" </s> paste tmp/sample-XXXX.{tim,log}
Find all Subscription.java files/directories under current directory and enter into the parent directory of the first one found </s> cd $(find . -name Subscription.java -printf '%h\n')
Search in current directory downwards all files whose size is 10 bytes ( Characters ) . </s> find . -size 10c -print
Find all files under /path/to/input/ that match the case insensitive string literal 'spammer@spammy.com' in their contents </s> find /path/to/input/ -type f -exec grep -qiF spammer@spammy.com \{\} \; -print
Set permissions to 500 for directories under the current directory </s> find . -type d -exec chmod 500 {} \;
Print a list of each file with the full path prefix in the current directory tree excluding symbolic links </s> tree -fi |grep -v \>
Search for files/directories with the case insensitive pattern anaconda.* in /var/log directory and create an archive (file.tar) of the last file found </s> find /var/log/ -iname anaconda.* -exec tar -cvf file.tar {} \;
Archive "/path/to/application.ini" on host "source_host" to current directory. </s> rsync -avv source_host:path/to/application.ini ./application.ini
Find all files named "file.ext" within the current folder and print the path where each one is located </s> find `pwd` -name "file.ext" -exec dirname {} \;
Find all files/directories under current directory tree with inode number 211028 and move them to 'newname.dir' </s> find . -inum 211028 -exec mv {} newname.dir \;
Copy the current directory tree to "newdirpathname" preserving directory hierarchy </s> find ./ -depth -print | cpio -pvd newdirpathname
Prints long listing of the current directory and top-level directories within, sorted from oldest to newest, with appended indicators. </s> $ ls -Fltr *
List any line in "f1" or "f2" which does not appear in the other and delete all tab characters in the output </s> comm -3 <(sort -un f1) <(sort -un f2) | tr -d '\t'
find dirctory files which modification time is  7 days ago </s> find . -mtime -7 -type d
Print every two lines in "file" on a single line separated by a space </s> cat file | paste -d\ - - -
Lookup information of the current user </s> finger `whoami`
Set file permission to 664 and directory permission to 775 for all files and directories under htdocs </s> find htdocs -type f -exec chmod 664 {} + -o -type d -exec chmod 775 {} +
Find files whose pathnames contain "string" and print these pathnames replacing 'search string' with 'new string' </s> find . |xargs grep search string | sed 's/search string/new string/g'
Force create a hard link in "/usr/local/bin" to "findpdftext" </s> sudo ln -f "findpdftext" /usr/local/bin
find files (under root file system /) that were accessed within the last 24 hours </s> find / -atime -1
Print the content of file </s> sed 's/\n//' file
create directories foo and bar </s> mkdir foo bar
set a crontab to create or update the timestamp of "washere1" in the current directory every minute. </s> echo "* * * * * touch $(pwd)/washere1" | crontab
Get domain "$domain" IP address </s> dig +short "$domain"
Convert standard input into a dump of octal bytes without the first 8 bytes of address and count the unique results </s> od | cut -b 8- | xargs -n 1 | sort | uniq | wc -l
Search the current directory tree for regular files owned by user "www" </s> find -type f -user www
Find all *.c files under and below the current directory that contain "wait_event_interruptible" </s> find . -name \*.c -exec grep wait_event_interruptible {} /dev/null \;
find all the files in the file system which have been modified in the last 10 minutes </s> find / -mmin -10
Convert *.au files to *.wav files using `sox' </s> find -type f -name '*.au' | awk '{printf "sox %s %s\n",$0,$0".wav" }' | bash
Change the permissions of all regular files whose names end with .mp3 in the directory tree /var/ftp/mp3 </s> find /var/ftp/mp3 -name '*.mp3' -type f -exec chmod 644 {} \;
Print "deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu precise main" and append to file "/etc/apt/sources.list" </s> echo "deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu precise main" | tee -a /etc/apt/sources.list
Remove any file containing string "GUI" </s> find / -type f -print0 | xargs -0 grep -liwZ GUI | xargs -0 rm -f
Recursively search for all regular files below directory "dir1" in currentd directory, and output the name of each, without any containing directories. </s> find ./dir1 -type f -exec basename {} \;
Find files whose names match the pattern given by the 2nd argument $2 of the Bash script and replace string $3 with $4 in them </s> find ./ -type f -name "$2" -exec sed -i "s/$3/$4/g" {} \;
Find files named 'core' in or below the directory /tmp and delete them </s> find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f
Recursively prints all folders in a current folder that contain files like "*.class". </s> find . -name "*.class" -print0 | xargs -0 -n1 dirname | sort --unique
Find all *.java files in the current directory tree </s> find . -name  \*.java
find all the regular/normal files in the /path folder and delete them </s> find /path -type f -exec rm '{}' \;
Remove the regular files from the current directory that were last modified on November, 22 </s> find -maxdepth 1 -type f -newermt "Nov 22" \! -newermt "Nov 23" -delete
Print the kernel configuration options found in "/proc/config.gz" </s> cat /proc/config.gz | gunzip
Set the system date to Sat May 11 06:00:00 IDT 2013 </s> sudo date --set="Sat May 11 06:00:00 IDT 2013"
Find all the regular files under current directory tree that have not been modified in the last 31 days and delete them </s> find . -type f -mtime +31 -print0 | xargs -0 -r rm -f
Find recursively all files under current directory tree that contain a colon in the filename </s> find . -name \*\:\*
Prints the Nth line of output from 'ls -1' </s> ls -1 | tail -n +N | head -n1
Create an empty file called "emptyfile.c" </s> cp /dev/null emptyfile.c
Read one character from standard input into variable "REPLY" </s> read -n 1 -r
Write "foo" to the real path of the current command's standard output </s> echo foo | readlink /proc/self/fd/0
Find all links pointing to /path/to/foo.txt </s> find . -lname /path/to/foo.txt
change the ownership of all the files in the file system from edwarda to earnestc </s> find / -user edwarda -print | xargs chown earnestc
copy all the mp3 files from current folder to another folder </s> find . -name '*.mp3' -exec cp -a {} /path/to/copy/stuff/to \;
search for files in current folder using name patterns </s> find . -name "S1A*1S*SAFE"
Find all files/directories named '.todo' under $STORAGEFOLDER directory tree and print the parent directory names </s> find "$STORAGEFOLDER" -name .todo  -exec dirname {} \;
Find all *.txt files of user Tecmint under /home directory </s> find /home -user tecmint -iname "*.txt"
Recursively removes all files like '*.pyc' in a current folder. </s> rm **/*.pyc
List all environment variables whose name or value contains current user's login name. </s> env | sed -n /"$USERNAME"/p
Add read and execute permission to command "node" </s> sudo chmod +rx $(which node)
display all files in the current folder expect text files </s> find . -name "*.txt" -prune -o -print
Find all files in your home directory and below that are smaller than 100M. </s> find ~ -size -100M
Search the current directory recursively for files last modified within the past 24 hours ignoring paths ./es* and ./en* </s> find . -mtime 0 | grep -v '^\./en' | grep -v '^\./es'
Removes all empty folders that ends with any-cased '*.bak' under '/Users/' path. </s> find /Users -type d -iname '*.bak' -print0 | xargs -0 rmdir
Find all files whose names end with "~" in the /home/peter directory tree, following symlinks, and delete them </s> find -L /home/peter -name *~ -exec rm '{}' \;
Filnd all files in root directory with 777 permission and change permision 644  with chmod commad . </s> find / -type f -perm 777 -print -exec chmod 644 {} \;
Print help on 'cat' command usage </s> cat --help
display all the files ending with ".foo" including those that are in the directory ".snapshot", this is the wrong way of using prune. </s> find . \( -name .snapshot -prune -o -name '*.foo' \) -print
List all aliencoders.[0-9]+ files/directories under /home/jassi/ directory </s> find /home/jassi/ -name "aliencoders.[0-9]+" | xargs -r ls -lrt | awk '{print $9}'
Measure the disk space taken up by all TXT files in the current directory tree </s> find . -iname "*.txt" -exec du -b {} + | awk '{total += $1} END {print total}'
Delete all regular files named 'FindCommandExamples.txt' under current directory tree </s> find . -type f -name "FindCommandExamples.txt" -exec rm -f {} \;
Print all logins formatted as "The user USER is on TTY" where USER is the user name and TTY is the login terminal </s> who | awk '{print "The user " $1 " is on " $2}'
Enable history in a script </s> set -o history
Replace any blank character from standard input with a tab </s> tr '[:blank:]' \\t
display all the header files  and cpp files in the current folder </s> find . -regex '.*\.\(cpp\|h\)'
Saves location of file $1 in 'dir' variable. </s> dir=$(dirname -- "$1")
Print content of /etc/passwd and /etc/group files </s> cat /etc/passwd /etc/group
Print all lines of "seq 10" except the last 3 </s> seq 10 | tac | sed '1,3d' | tac
Removes files ~/.android/adbkey and ~/.android/adbkey.pub without prompting. </s> rm -f ~/.android/adbkey ~/.android/adbkey.pub
Grab the output of "basename" (in this case "stuff") and echo it to stdout, which basename would do by default anyway. </s> echo $(basename /foo/bar/stuff)
Create links for all files in the current directory tree that are more than 1000 days old in "/home/user/archives" </s> find . -type f -mtime +1000 -print0 | cpio -dumpl0 /home/user/archives
Find all regular files with '.what_to_find' extension in the entire filesystem and move them to directory '/new_directory' </s> find / -iname "*.what_to_find" -type f -exec mv {} /new_directory \;
find all the direcories in the current folder </s> find -type d
Find all files which have 211028 inode number in current directory then Locating and renaming unprintable directories </s> find . -inum 211028 -exec mv {} newname.dir \;
Remove all .gz files in the current directory tree </s> find . -name '*.gz' -type f -printf '"%p"\n' | xargs rm -f
Find files/directories named 'foo.bar' in the root filesystem partition </s> find / -name foo.bar -print -xdev
Recursively change the owner and group of "~/.ssh/" to "dev_user" </s> chown "dev_user"."dev_user" -R ~/.ssh/
Find all directories under current directory whose paths are 5 characters long </s> find . -regextype posix-extended -type d -regex ".{5}"
Print the common third whitespace separated fields in "file1" and "file2" </s> comm -12 <(awk '{print $3}' file1 | sort -u) <(awk '{print $3}' file2 | sort -u)
Saves real path of the folder containing the current script </s> DIR=$(dirname "$(readlink -f \"$0\")")
Counts lines in each of *.php files in a current folder and subfolders and prints total count as well. </s> find . -name "*.php" | xargs wc -l
List all files in entire file system that are newer than the file $newerthan and older than the file $olderthan in regards of modification time </s> find / -type f -name "*" -newermt "$newerthan" ! -newermt "$olderthan" -ls
find all the png files in current folder which are present in the pattern list file "search.txt" and copy them to another directory </s> find . -name '*.png' | grep -f <(sed s?^?/[0-9]_[0-9]_[0-9]_? search.txt) | xargs -i{} cp {} /path/to/dir
Report file systems inode usage. </s> df -i
get the count of all the files that have been accessed in the last 30 days </s> find . -atime +30 -exec ls \; | wc -l
Find all files under the current directory that are not the same file as "/home/nez/file.txt" </s> find . -maxdepth 1 -not -samefile /home/nez/file.txt
Search the current directory and all of its sub-directory for any PDF files being careful to prevent the shell from expanding "*"  before it's passed to find. </s> find . -name \*.pdf -print
Find all .c and .h files in the current directory tree and search them for "expr" </s> find -name '*.[ch]' | xargs grep -E 'expr'
Print "$line" in hexadecimal 2-byte units </s> echo -n $line | od -x
Search all files and   directories either of the directory /home/oracle and  /home/databse which  contain the "zip"  anywhere in the files or directory name . </s> find /home/oracle /home/database -name '*zip*'
Find all 50MB files </s> find / -size 50M
Descend into every directory under /etc and print the file/directory names with relative paths </s> find /etc -execdir echo "{}" ';'
Join lines of 'file': fields 1 and 2 of lines discarding adjascent lines ignoring first 3 fields, with fields 3 to end of line discarding adjascent lines ignoring 3 last fields. </s> paste <(uniq -f3 file | cut -f1,2) <(tac file | uniq -f3 | tac | cut -f3-)
Print /some/dir/ if it's empty </s> find /some/dir/ -maxdepth 0 -empty
Find and uncompress all files in the current directory tree ending in ".csv.gz" </s> find . -name '*.csv.gz' -exec gzip -d {} \;
Find all *.txt files/directories under current directory </s> find . -name *.txt -print
Filters only directories including hidden ones from long file listing of a current directory, and prints their names. </s> ls -Al | grep "^d" | awk -F" " '{print $9}'
change user and group of the file bin to user and group root:wheel </s> sudo chown root:wheel bin
Find all the files that are not named "MyCProgram.c" in the current directory only and without regards to case. </s> find -maxdepth 1 -not -iname "MyCProgram.c"
Find all *text files/directories under current directory </s> find -name "*text"
Print content of all files found regarding seach options '[whatever]' </s> find [whatever] -exec cat {} +
Read a line from standard input and save each word in the bash array variable "arr" </s> read -a arr
Counts lines in file 'filename' ignoring empty lines and lines with spaces only. </s> cat 'filename' | grep '[^ ]' | wc -l
Print a single line of numbers from "001" to "100" </s> yes | head -n 100 | awk '{printf( "%03d ", NR )}'
Find all files/directories under current directory that were accessed more than 25 but less than 35 minutes ago </s> find -amin +25 -amin -35
Find all files in the current directory tree that are newer than some_file </s> find . -newer some_file
Search the /storage/sdcard0/tencent/MicroMsg/ directory tree for JPG files </s> find  /storage/sdcard0/tencent/MicroMsg/ -type f  -iname '*.jpg' -print0
list all regular files which path is not dir1 or dir2 </s> find dir -not \( -path "dir1" -prune \) -not \( -path "dir2" -prune \) -type f
Find all files in the directory $directory or below with the permissions specificed by $permissions. </s> find "$directory" -perm "$permissions"
search for all the files in current folder and display all the file names separated by space </s> find . | awk '{printf "%s ", $0}'
Replace all matches with the regex expanded by $P_FROM with the text expanded by $P_TO in all regular files under current directory not going into subdirectories and modify the files in-place </s> find . -type f -maxdepth 1 -exec sed -i "s/$P_FROM/$P_TO/g" {} \;
find all the files in the entire file system that start with top </s> find / -name 'top*'
Find all files owned by user vivek </s> find / -user vivek
Delete all regular files with '.cache' extension that were accessed more than 30 days ago under $HOME/Library/Safari/Icons directory tree </s> find $HOME/Library/Safari/Icons -type f -atime +30 -name "*.cache" -print -delete
Send a single ping request with a TTL of 1 to "192.168.1.1" </s> ping -c 1 -t 1 192.168.1.1
find all of the executable files on your computer </s> find / -executable
Move all files that contain "Subject: \[SPAM\]" to "DIR" </s> grep -L -Z -r 'Subject: \[SPAM\]' . | xargs -0 -I{} mv {} DIR
Create an archive named newArch from the contents of ./test directory </s> find ./test -printf "././%f\n"| cpio -o -F newArch
Change directory to the directory containing file path "$1" </s> cd "$(dirname "$1")"
Print "RDBMS exit code : $RC  " to the console and append to "${LOG_FILE}" </s> echo " RDBMS exit code : $RC  "     | tee -a ${LOG_FILE}
Delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree </s> find -O3 "$save_path" -depth -mindepth 1 -name 'sess_*' -ignore_readdir_race -type f -cmin "+$gc_maxlifetime" -delete
Find any hidden regular files in the current directory and its sub-directories that were modified after .cshrc was last modified. </s> find . -type f -name ".*" -newer .cshrc -print
Request A record from nameserver $ns for domain name $d, filter strings with domain name and exclude lines matching 'DIG' </s> dig @$ns $d A | grep $d | grep -v "DiG"
Find all .sh files in the current directory tree and remove them </s> find . -name "*.sh"| xargs rm -rf
Look for *.jpg files on the system </s> find / -name “*.jpg”
display all the files in the folder "/dev" which belong to the user "peter" </s> find /dev -user "peter" |more
find not case sensitive all directories that names are 'apt' </s> find  / -type d -iname "apt"
Copy permissions from "version2/somefile" to "version1/somefile" </s> chmod --reference version2/somefile version1/somefile
find all the files in the filesystem which do not belong to any group </s> find / -nogroup -print
Read a line from standard input with prompt "Enter your choice: ", arrow keys enabled, and "yes" as the default input, and save the response to variable "choice" </s> read -e -i "yes" -p "Enter your choice: " choice
find all the files in the current folder which are bigger than 9MB </s> find . -size +9M
Find all php files in the current directory </s> find . -type f -name "*.php"
Delete all .pyc files in the current directory tree </s> find . -name "*.pyc" | xargs rm -rf
Print the contents of "file" with " | " appended to each line </s> echo `sed -e 's/$/\ |\ /g' file`
Search the /root directory recursively for the regular file named "myfile" ignoring "work" directories </s> find /root/ -name 'work' -prune -o -name myfile -type f -print
Find files on the system created during the last 50 days </s> find / -ctime -50
Print line number "${linenum}" in file "$filename" </s> cat $filename | sed "${linenum}p;d";
Print the time of last boot </s> who -b
Remove all .sh files in the current directory tree whose names begin with "t" </s> find . -name "t*.sh" -exec rm -vf '{}' \;
Change the owner of all files in "/empty_dir/" to "root" using at most 10 files at a time </s> ls /empty_dir/ | xargs -L10 chown root
long list al the files in the current directory which have read permission to the group </s> find . -perm -g=r -type f -exec ls -l {} \;
find files in current directory that names are game </s> find . -name game
list all regular files which path is not dir1 or dir2 </s> find dir -not \( -path "dir1" -o -path "dir2" -prune \) -type f
find all the files in the folder /path/to/dir which have been modified after a specific date (Feb 07) </s> find /path/to/dir -newermt “Feb 07”
find all the text files in the folder /home/calvin and do not search beyond 2 levels </s> find /home/calvin/ -maxdepth 2  -name “*.txt”
Split all files in the directory tree "/dev/shm/split/" into files of at most 1000 lines each and use the filename as the prefix </s> find /dev/shm/split/ -type f -exec split -l 1000 {} {} \;
List all files/directories under /data1/Marcel with their file information which are greater than 524288 bytes and were modified or accessed more than 1 year ago </s> find /data1/Marcel -size +1024  \( -mtime +365 -o -atime +365 \) -ls -exec file {} \;
Search all files in the current directory tree that are named "whatever" for "you_search_for_it" </s> find -name whatever -exec grep --with-filename you_search_for_it {} \;
Find files in the /travelphotos that are greater than 200k in size but do not have "2015" anywhere in the file name </s> find /travelphotos -type f -size +200k -not -iname "*2015*"
Suffix all files and folders in the current directory with "_SUF" </s> ls | xargs -I {} mv {} {}_SUF
Run 'somecommand' in an environment without the FOO variable. </s> env -u FOO somecommand
Recursively copy /path/to/foo on host "your.server.example.com" to local directory "/home/user/Desktop", connecting as ssh username "user". </s> scp -r user@your.server.example.com:/path/to/foo /home/user/Desktop/
Search the current directory tree for regular files whose names begin with "orapw" </s> find . -name "orapw*" -type f
Rename all "thumbs" directories to "thumb" in the current directory and 1 level below </s> find . -maxdepth 2 -type d | sed 'p;s/thumbs/thumb/' | xargs -n2 mv
Enables shell option 'cdable_vars'. </s> shopt -s cdable_vars
lists txt or html files older than 5 days, null separated </s> find . \( -name '*.txt' -o -name '*.html' \) -mtime +5 -print0
Create intermediate directories ~/foo/bar/ as required and directories baz, bif, bang </s> mkdir -p ~/foo/bar/baz ~/foo/bar/bif ~/foo/boo/bang
find all the regular/normal files in the current directory and print them skip searching all the directories in the current folders. </s> find * -type f -print -o -type d -prune
Prefix all files and folders in the current directory with "PRE_" </s> find * -maxdepth 0 ! -path . -exec mv {} PRE_{} \;
display the number of lines in all the files in the current folder </s> find . -name '*' | xargs wc -l
Force create a symbolc link named "new_dir" to "/other/dir" without dereferencing "new_dir" </s> ln -sfn /other/dir new_dir
create and list filenames in the archive </s> tar cf - $PWD|tar tvf -|awk '{print $6}'|grep -v "/$"
Print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them </s> find ~/code -name '.*' -prune -o -type d -printf ':%p'
Prints dates of $m month in $y year, preceded by month number and slash like ' 10/1'. </s> cal $m $y | sed -e '1,2d' -e 's/^/ /' -e "s/ \([0-9]\)/ $m\/\1/g"
create directory public_html into home directory </s> mkdir ~/public_html
find files in the current directory and sub-directories, that changed within last hour </s> find . -cmin -60
search for the files in the current folder which begin with the word "kt" followed by a digit </s> find . -name 'kt[0-9] '
print lines from last match of ^Statistics until end of file </s> tac INPUTFILE | sed '/^Statistics |/q' | tac
Move "caniwrite" without clobbering into "/usr/local/bin" </s> mv -nv caniwrite /usr/local/bin
Print differences between files in directories folder1 and folder2 recursively, with unified context, ignoring changes in the amount of white space </s> diff -bur folder1/ folder2/
Find all *bar files/directories under current directory </s> find -name *bar
find files in current folder ending with ".c" or ".h" or ".ch" and search for a word in these files and enable color highlighting of the matched text </s> find . -name "*.[ch]" -exec grep --color -aHn "e" {} \;
Remount "/system" with read and write permission </s> mount -o remount,rw /system
create the compressed tar archive images.tar.gz containing all jpg files found under / </s> find / -name *.jpg -type f -print | xargs tar -cvzf images.tar.gz
change the permission of all the files in the current directory to 664 and change the permission of all the directories  in the current folder to 775. </s> find . \( -type f -exec sudo chmod 664 "{}" \; \) , \( -type d -exec sudo chmod 775 "{}" \; \)
find all the files in the home folder which are bigger than 2MB and zip them </s> find ~ -size +2000000c -regex '.*[^gz]' -exec gzip '{}' ';'
Add '.avi' extension to all files/directories with '.mkv' extension under '/volume1/uploads' directory tree </s> find /volume1/uploads -name "*.mkv" -exec mv \{\} \{\}.avi \;
Find mysong.ogg anywhere under the home directory </s> find $HOME -name 'mysong.ogg'
display all files in the current folder along with their last access timestamps </s> find . -printf "%h/%f : dernier accès le %Ac\n"
Find all empty directories under /tmp </s> find /tmp -type d -empty
Find all directories in maximum 2 levels down the /tmp directory </s> find /tmp -maxdepth 2 -mindepth 1 -type d
List all files/directories under /myfiles directory </s> find /myfiles -exec ls -l {} ;
List all files/directories with spaces in their names under ~/Library directory </s> find ~/Library -name '* *' -exec ls {} \;
find all the patch files in current folder and copy them to separate folder patches </s> find -name '*.patch' -print0 | xargs -0 -I {} cp {} patches/
Search for 'organic' in all files with '.html' extension under ~/html directory </s> find ~/html/ -name '*.html' -exec grep organic '{}' ';'
Recursively removes all files like '*.pyc' in a current folder. </s> find . -name "*.pyc"|xargs rm -rf
find all files that names are dir-name-here </s> find / -name "dir-name-here"
Search the current directory tree for all files matching pattern "*.rb" </s> find . -name "*.rb"
Print each line in "file1.txt" that is not found in "file2.txt" </s> sort file1.txt file2.txt file2.txt | uniq -u
Find all directories in directory tree `httpdocs' </s> find httpdocs -type d
Replace all occurrences of 'previousword' with 'newword' in all regular files with '.cpp' extension under '/home/www' directory tree and modify them in-place </s> find /home/www -type f -name '*.cpp'  -exec sed -i 's/previousword/newword/g' '{}' \;
Find all *.mp4 files under /working </s> find /working -type f -name '*.mp4'
Prints groups list that current user belongs to. </s> groups                                        //take a look at the groups and see
List all files in the current directory tree including those that may contain spaces in their names </s> find . -print0 | xargs -0 -l -i echo "{}";
find files in the /usr/src directory with pattern` *.c  that larger than 100 Kilobytes </s> find /usr/src -name '*.c' -size +100k -print
Identify CMS version/releases accross all your Wordpress websites </s> find /var/www/vhosts/*/httpdocs/ -type f -iwholename "*/wp-includes/version.php" -exec grep -H "\$wp_version =" {} \;
file all the Sticky Bit set files whose permission are 551 </s> find / -perm 1551
Print calendar for February, March and April of year 2009 side-by-side </s> paste <(cal 2 2009) <(cal 3 2009) <(cal 4 2009)
find all the files in the file system which have sticky bit enabled to the user </s> find / -perm -u+s
Search everywhere for directories named `root' </s> find / -type d -name root
Find all *.dbf files/directories in entire file system </s> find / -name "*.dbf"
Display what flags mount points are mounted with </s> mount -l
search for all the .o files in the current directory which have permisssions 664 and print them. </s> find . -name *.o -perm 664 -print
display all symbolic links in the folder "myfiles" and follow them </s> find -L /myfiles
Send SIGKILL signal to process ID 16085, killing it instantly. </s> kill -9 16085
Interpret in the current shell all lines in config.sh which contain the word "marker" </s> source <( grep "marker" config.sh )
List all regular files from the current directory tree that were modified less than 60 minutes ago </s> find . -type f -mmin -60 -print0 | xargs -r0 ls -l
Returns 0 if user $1 belongs to group $2. </s> groups $1 | grep -q "\b$2\b"
create directory certs </s> mkdir certs/
Find all files/directories under current directory and print them twice in each line </s> find | xargs -i sh -c "echo {} {}"
Print numerically sorted list of unique strings from 'ip_addresses' file, with number of occurrences of each string. </s> sort -n ip_addresses.txt | uniq -c
Remove duplicate lines in "file_name" and print the output on stdout </s> awk '{print(NR"\t"$0)}' file_name | sort -t$'\t' -k2,2 | uniq --skip-fields 1 | sort -k1,1 -t$'\t' | cut -f2 -d$'\t'
Print list of all user names who are logged in </s> who | sed -e 's/[ \t].*//g'
display the three largest files by size in current folder </s> find . -type f -exec ls -s {} + | sort -n -r | head -3
Prints string "0 1 * * * /root/test.sh" to the terminal, and append it to file '/var/spool/cron/root' </s> echo "0 1 * * * /root/test.sh" | tee -a /var/spool/cron/root
Find all directories in maximum 1 level down the current directory and remove the . entry from the output </s> find . -maxdepth 1 -type d | sed '/^\.$/d'
Decompresses file 'xac.bz2', redirecting output to standard out. </s> bzip2 -dc xac.bz2
Search directory lpi104-6 for files with inode number 1988884 </s> find lpi104-6 -inum 1988884
Creates 5-letter random file name and saves it in 'rand_str' variable. </s> rand_str="$(mktemp --dry-run XXXXX)"
Find all *.jpg files in */201111 paths </s> find */201111 -name "*.jpg"
display all sqlite files in the current directory along with their timestamp </s> find ./ -name "*.sqlite" -printf '%Tc %p\n'
Recursively change the owner group of "/var/www" of to "www-data" </s> sudo chown -R www-data:www-data /var/www
Copies 'libgtest_main.so' and 'libgtest.so' to '/usr/lib/', preserving all attributes, and copying symlinks as symlinks, without following in source files. </s> sudo cp -a libgtest_main.so libgtest.so /usr/lib/
Find all directories under minimum 1 level down the current directory and set their permission to 755 </s> find  . -type d -mindepth 1 -print -exec chmod 755 {}/* \;
Compresses all files listed in array $*, executing in background. </s> compress $* &
Write "127.0.0.1 ad.doubleclick.net" to the console and append to "/etc/hosts" as root </s> echo 127.0.0.1 ad.doubleclick.net | sudo tee -a /etc/hosts
Recursively change owner and group of "/usr/local/rvm/gems/ruby-2.0.0-p481/" to the current user </s> sudo chown $(whoami):$(whoami) /usr/local/rvm/gems/ruby-2.0.0-p481/ -R
Print the lines of file "strings" not specified in file "index" </s> join -v 2 index <(nl strings)
Find all files/directories case insensitively containing 'xt' in their names under '/etc' directory tree </s> find /etc -iregex '.*xt.*'
Print only lines from 'file1.txt' that not present in 'file2.txt' and beginning with 'Q' </s> cat file1.txt | grep -Fvf file2.txt | grep '^Q'
Delete all 'restore.php' files in /var/www and 3 levels below </s> find /var/www -maxdepth 4 -name 'restore.php' -exec rm -r {} \;
display all text files in a folder </s> find $target -type f -iname "*.txt"
Verbosely compresses all files on seventh and eighth depth level keeping original files in place. </s> bzip2 -kv */*/*/*/*/*/*/*
Print "test=hello world" </s> echo "hello world" | echo test=$(cat)
Change group ownership to `foo' for files with GID=2000 </s> find / -group 2000 -exec chgrp -h foo {} \;
List the names of all file.ext files/directories under present working directory </s> find `pwd` -name "file.ext" -printf "%f\n"
List the files from the current directory tree that contain lines matching regular expression  '^Subject:.*unique subject' </s> find . -type f -print0 | xargs -0 grep -il '^Subject:.*unique subject'
find all the files in the entire filesystem which belong to the group root and display the ten files. </s> find / -group root | head
Search the home directory tree for files last modified less than 2 days ago or newer than file "filename" </s> find ~/ -mtime -2 -o newer filename
Print file system disk space usage </s> df
Print 'file' content, formatting output as 29-symbol wide column, regarding space symbol as a word separator </s> cat file | fold -s -w29
Print the directory of the full path to the current script </s> echo $(dirname $(readlink -m $BASH_SOURCE))
Print a sorted list of all .jpg files in the current directory and below </s> find -name '*.jpg' | sort -n
Add a cron job to existing list, without removing existing ones, ro tun "scripty.sh" at 2:01 am, 3rd day of april (4th month), if that day happens to be a friday (5th day of the week starting with sunday=0). </s> cat <(crontab -l) <(echo "1 2 3 4 5 scripty.sh") | crontab -
Find all files in the current directory tree whose size is greater than 1MB </s> find . -size +1M
Print "echo ping -c 2" on each string in file 'ips' </s> cat ips | xargs -n1 echo ping -c 2
Find all files/directories in level $i down the current directory with all positional parameters appended with the find command </s> find -mindepth $i -maxdepth $i "$@"
Use 'less' to nicely display control characters from the outupt of 'grep'. </s> grep -b -o $'\x0c' filename | less
find regular files which modification time is  7 days ago </s> find . -mtime -7 -type f
List all regular files in the current directory tree that were modified less than 60 minutes ago </s> find . -mmin -60 -type f -exec ls -l {} +
Print the names of all files and directories in the current directory tree </s> find . -print
Search the given $directory for files with permissions stored in $permissions </s> find "$directory" -perm "$permissions"
Report file systems disk usage in kilobytes. </s> df -k
Copy all files (not directories) in "/path/to/local/storage" to "/path/to/copy" on host "remote.host" authenticating as user "user" </s> rsync /path/to/local/storage user@remote.host:/path/to/copy
Reports count of processors in system. </s> grep '^core id' /proc/cpuinfo |sort -u|wc -l
Print the sorted unique column of usernames of users who are currently logged in without the header </s> finger | tail -n +2 | awk '{ print $1 }' | sort | uniq
Recursively copy all files and directories in "demo" excluding ".git" to "demo_bkp" </s> find demo -depth -name .git -prune -o -print0 | cpio -0pdv --quiet demo_bkp
Find all files/directories named 'Desktop' under current directory </s> find ./ -name Desktop
Print only first line of 'file' content, formatted as 29-symbol wide column, regarding space symbol as a word separator </s> cat file | fold -s -w29 | head -1
move all files in the current folder another folder and do not move the files in the sub folder </s> find . -name "*" -maxdepth 1 -exec mv -t /home/foo2/bulk2 {} +
Compare *.csv files in the current directory tree with their analogs stored in /some/other/path/ prompting before running `diff' </s> find . -okdir diff {} /some/other/path/{} ";"
Print the list of files in the current directory tree skipping Git files </s> find . -path './.git' -prune -o -type f
Copy "6.3.3/6.3.3/macosx/bin/mybinary" to "~/work/binaries/macosx/6.3.3/" and create directory "~/work/binaries/macosx/6.3.3/" if "~/work/binaries/macosx/" exists </s> rsync 6.3.3/6.3.3/macosx/bin/mybinary ~/work/binaries/macosx/6.3.3/
Force create a symbolic link to "$f" in "~/my-existing-links/" with name the basename of "$f" </s> ln -sf "$f" "~/my-existing-links/$(basename $f)"
Find all files and directories starting from the current directory </s> find .
find all text files in current folder and display all files that have the alphabet a in their name </s> find . -name ".txt" | grep a
Find files containing `blah' in their names modified less than 2 days ago, case insensitive </s> find . -iname '*blah*' -mtime -2
Calculate the md5 sum of hex byte 61 </s> echo -n -e '\x61' | md5sum
Create a symbolic link named "$SYMLINK" to "$ACTUAL_DIR" </s> ln -s "$ACTUAL_DIR" "$SYMLINK"
Find and remove multiple *.txt files </s> find . -type f -name "*.txt" -exec rm -f {} \;
find all files  that names are 'apt' and display detailed list </s> find  / -name "apt" -ls
Append all regular files modified in the last 24 hours to the "$archive.tar" tar archive </s> find . -mtime -1 -type f -print0 | xargs -0 tar rvf "$archive.tar"
Prints a random number between 1 and 10 </s> grep -m1 -ao '[0-9]' /dev/urandom | sed s/0/10/ | head -n1
Create a symolic link in "/usr/local/bin/" to "/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl" </s> ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/
Show the mv commands that would rename the *.so files in the current directory tree prepending their names with "lib" </s> find . -name "*.so" -printf "mv '%h/%f' '%h/lib%f'\n" | less -S
Change every directory under "/var/www/html/" to have permissions 775 </s> sudo  find /var/www/html/ -type d -exec chmod 775 {} \;
Display a long listing of all the regular files owned by the user 'bluher' in the entire filesystem </s> find / -type f -user bluher -exec ls -ls {}  \;
Search case insensitively for 'facebook', 'xing', 'linkedin', ''googleplus' in file 'access-log.txt', extract the matched part, sort them and print them by sorting them in asending order of the number of repeated lines </s> grep -ioh "facebook\|xing\|linkedin\|googleplus" access-log.txt | sort | uniq -c | sort -n
find all files with pattern` '*song*abc2009*.jpg' and replace "abc2009" with "def2010" </s> find . -name '*song*abc2009*.jpg' | sed 's/\(^.*song.*\)abc2009\(.*.jpg\)$/mv "&" "\1def2010\2"/' | sh
Get the path of running Apache </s> ps -ef | grep apache
Find file `Chapter1' on the system </s> find / -name Chapter1 -type f -print
Search the current directory for files whose names start with my </s> find . -name 'my*'
Find recursively the latest modified file in the current directory </s> find . -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" " | sed 's/.*/"&"/' | xargs ls -l
Calculate the md5 sum of all ".py" files in "/your/dir" including content and filenames </s> grep -ar -e . --include="*.py" /your/dir | md5sum | cut -c-32
display all the files in the home folder which begin with "arrow" and end with "xbm" </s> find ~ -name 'arrow*.xbm'
List all directories in current directory, works even if they have weird names or names starting with a dash. </s> find -maxdepth 1 -type d | awk -F"./" '{print $2}'
change the permissions of all the regular/normal files in the current folder </s> chmod 640 `find ./ -type f -print`
find a.out, *.o and core files under the current directory and sub-directories and delete them. </s> find . \( -name a.out -o -name '*.o' -o -name 'core' \) -exec rm {} \;
delete all the regular files in the temp folder which have not been modified in the last 24 hours + at the end gives bulk input to the rm command </s> find /tmp/ -type f -mtime +1 -exec rm {} +
Copies file 'file1' to each of directories 'dir1', 'dir2', 'dir3'. </s> echo dir1 dir2 dir3 | xargs -n 1 cp file1
Remove with prompting all files that have not been accessed in over 100 days </s> find /mydir -atime +100 -ok rm {} \;
Print timestamp as HH:MM:SS </s> date +"%T"
Print the list of the current directory's subdirectories </s> find . -type d -maxdepth 1
Find all .* files excluding list_files (case insensitive) under current directory </s> find . -iname ".*" \! -iname 'list_files'
Move all lines starting with "Ca" to the beginning of the file </s> nl -n rz ca | awk -vOFS="\t" '/Ca/{$1="#"$2} {$1=$1}1' | sort -k1,1 | cut -f2-
display all instances of "foo.cpp" file in the current folder which are not in the sub directory tree ".svn" </s> find . -name 'foo.cpp' '!' -path '.svn'
search  in root  ( / ) directory downwards all files which have less than 2 links. </s> find / -links -2 -print
Find all files/directories that contain 'packet' (case insensitive) in their names excluding directories that are bigger than 1500 bytes in size </s> find . -iregex ".*packet.*" ! -type d -size +1500c
Abort the shell or script on the first failed command </s> set -e
search for all the rpm files in the file system which reside in the same partition as that of the root </s> find / -xdev -name "*.rpm"
Archive "/my/dir" on host "server" as user "user" to the current local directory excluding files ending in ".svn" </s> rsync -av --exclude '*.svn' user@server:/my/dir .
Delete files in /var/tmp/stuff and below that have not been modified in over 90 days </s> find /var/tmp/stuff -mtime +90 -print | xargs /bin/rm
Change all files in the current directory tree to owner "xx" </s> find . \( \! -user xx -exec chown -- xx '{}' + -false \)
Find all directories in the current directory tree with "music_files" in their names </s> find . -type d -iname \*music_files\*
Changes group ownership of 'public' to 'pub'. </s> chgrp pub public
Find all $2 files in $1 path and search for the regex expanded by $3 in those files excluding the files with /proc in their paths </s> find $1 -name "$2" | grep -v '/proc' | xargs grep -Hn "$3" {} \;
Remove files matching pattern '*-*x*.*' from the current directory tree </s> find  -name '*-*x*.*' | xargs rm -f
display a list of all files in the folder passed as argument to a script </s> find $@ -ls
Prints long listing of "$dir/$file" file. </s> ls -l -- "$dir/$file"
Display kernel name, release, and version. </s> uname -s -r -v
Find all the files which are modified 50 days back </s> find / -mtime 50
Compare each .xml file under the current directory with a file of the same name in "/destination/dir/2" </s> find . -name *.xml -exec diff {} /destination/dir/2/{} \;
display all the symbolic links in the current folder </s> find . -type l
find all the files that were modified yesterday in the current directory. </s> find . -daystart -ctime 0 -type f
Display differences between directories dir1 and dir2. </s> diff -r dir1/ dir2/
Remove duplicates in variable "variable" and preserve the order </s> variable=$(echo "$variable" | tr ' ' '\n' | nl | sort -u -k2 | sort -n | cut -f2-)
Archive "/home/path" to "path" on host "server" showing progress and statistics and remove files in the destination not found in the source </s> rsync -a --stats --progress --delete /home/path server:path
Print the grand total file system disk space usage with block sizes in units of TiB </s> df --total -BT | tail -n 1
Delete all files with ' .o' extension in the entire filesystem </s> find project / src / -name "* .o" -exec rm -f {} \;
Print the list of all files under the current directory and below </s> find .
Search the specified group for the given "filename </s> find / -group users -iname "filename"
delete all the regular files in the temp folder which have not been modified in the last 24 hours </s> find /tmp/ -type f -mtime +1 -print0 | xargs -0 -n1 rm
Change permissions to u=rwx,g=rx,o= for all directories inside the current directory tree </s> find . -type d -exec chmod u=rwx,g=rx,o= '{}' \;
Change the ownership of "file.sh" to "root" </s> sudo chown root file.sh
display the file name and creation month of top 11 files in the entire file system </s> find / -type f -printf "\n%Ab %p" | head -n 11
Sort "file" using a buffer with a size 50% of main memory </s> sort -S 50% file
find all the directories in the current folder which begin with the words "kt" and end with a digit </s> find . -regex './kt[0-9] '
Remove all files matching the pattern *[+{;"\\=?~()<>&*|$ ]* under current directory </s> find . -name '*[+{;"\\=?~()<>&*|$ ]*' -exec rm -f '{}' \;
find all the zip files in the current folder and create a tar ball of these zip files </s> find . -type f -name '*.zip' -print0 | xargs -0 tar -xzf
Delimit standard input with ":" and display as a table </s> column -s: -t
Find a single file called FindCommandExamples.txt under current directory and remove it </s> find . -type f -name "FindCommandExamples.txt" -exec rm -f {} \;
Find all files in the /home/myuser directory recursively that are older than 7 days </s> find /home/myuser -mtime +7 -print
Make 3 directories named "~/Labs/lab4a/folder" followed by the number 1, 2, or 3 </s> mkdir ~/Labs/lab4a/folder{1..3}
find all raw images in the current folder and pass them one at a time to the xargs command and enable parallel processing of the files </s> find . -type f -iname '*.CR2' -print0 | xargs -0 -n 1 -P 8 -I {}
Print a line of 100 random characters either "." or " " </s> cat /dev/urandom | tr -dc '. ' | fold -w 100 | head -1
Print first field from semicolon-seprated line $string. </s> echo $string | cut -d';' -f1
Move all the .c files from the current directory tree to temp/ </s> find . -name "*.c" -print0 | xargs -0 -n1  -I '{}' mv '{}' temp
Compare "current.log" and "previous.log" line by line and print lines containing regex pattern ">\|<" </s> diff current.log previous.log | grep ">\|<" #comparring users lists
Find all regular files in the the user's home/mail directory and search for the word "Linux". </s> find ~/mail -type f | xargs grep "Linux"
Copies defined file to the target folder without overwriting existing files. </s> cp -n
Lists all subdirectories in the current directory </s> ls -d -- */                    ### more reliable GNU ls
find all files in the current folder which end with macs </s> find -name '*macs'
display a long listing of all the files in the current folder which are bigger than 10KB </s> find . -size +10k -exec ls -lh {} \+
Lists the pids of all processes that have process '1782' as their parent. </s> pstree -p 1782 | sed 's/-/\n/g' | sed -n -e 's/.*(\([0-9]\+\)).*/\1/p'
Find all *.rb (regular) files under current directory and change their mode to 600 </s> find . -name "*.rb" -type f -exec chmod 600 {} \;
search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3 </s> find / -iname "*.mp3" -type f -exec /bin/mv {} /mnt/mp3 \;
Find all files/directories which have been modified within the last day in the drectories/files taken from the glob pattern '/tmp/test/*' </s> find /tmp/test/* -mtime -1
Print a list of all files and directories in the /var/log directory tree </s> find /var/log/
display all the .sh scripts in the folder /usr </s> find /usr -name \*.sh
Locate all *.csv files under the current directory tree </s> find . -name "*.csv" -print
search for "flac" files in current folder using regular expressions </s> find ./ -regex "./cmn-.\.flac"
Removes all files but $1 newest ones from current folder. </s> ls -tp | grep -v '/' | tail -n +"$1" | xargs -I {} rm -- {}
Find all files/directories in level 2 down the current directory </s> find -mindepth 2 -maxdepth 2
Search the current directory recursively for files containing "needle text" </s> find . -type f -print0 | xargs -0 grep -I "needle text"
Search the .css files in the /starting/directory tree for ".ExampleClass" </s> find /starting/directory -type f -name '*.css' | xargs -ti grep '\.ExampleClass' {}
Verbosely compresses all files on sixth and seventh depth level keeping original files in place. </s> bzip2 -kv */*/*/*/*/*/*
Delete all __temp__* files/directories under current directory tree </s> find . -depth -name '__temp__*' -exec rm -rf '{}' \;
Check that the master ssh connection "officefirewall" is running </s> ssh -O check officefirewall
Find all .mp3 files starting from the current directory </s> find . -type f -iname *.mp3
List all environment variables </s> set
Find all files under and below /dir that were accessed less than 60 minutes ago </s> find /dir -amin -60
List all defined bash functions </s> set | egrep '^[^[:space:]]+ [(][)][[:space:]]*$' | sed -r -e 's/ [(][)][[:space:]]*$//'
list files in /usr modified after February 1 of the current year </s> find /usr -newermt "Feb 1"
display all files in the current folder with the name test excluding those that are present in the sub folders of the test folder </s> find . -name test -prune
Save the system host name to variable "myHostName" </s> myHostName=`hostname`
Create compressed archive of all the files in the current directory tree that have been modified in the last 7 days </s> find . -type f -mtime -7 -print -exec cat {} \; | tar cf - | gzip -9
For each line which has a common first field in file1.csv and file2.txt, output the first 4 fields of file1.csv </s> join -o 1.1,1.2,1.3,1.4 -t, <(sort file1.csv) <(sort file2.txt)
Change permissions to 500 for all regular files under and below the current directory </s> find . -type f -exec chmod 500 {} ';'
Split "complete.out" into files with at most "$lines_per_file" lines each </s> split --lines $lines_per_file complete.out
Set permissions of all directories under "/opt/lampp/htdocs" to 755 </s> find /opt/lampp/htdocs -type d -exec chmod 755 {} \;
Save the absolute path of the directory of the current script to variable "DIR" </s> DIR=$(dirname "$(readlink -f \"$0\")")
find all the files in the current folder which have set guid bit on and list the top 10 files. </s> find . -perm /g+s | head
search for all the regular files in the current folder and display the contents </s> find . -type f -exec cat {} \;
Split a file "file.tar.gz" into pieces with size 1024 MB </s> split -b 1024m file.tar.gz
Find all files/directories under current directory tree wihout descending into './src/emacs' directory </s> find . -path './src/emacs' -prune -o -print
search for the word "damian" in all the regular/normal files in the /etc folder and display only the matched file name </s> find /etc -type f | xargs grep -l -i "damian"
Create a symbolic link to "$file" named "/tmp/allfiles" </s> ln $file /tmp/allfiles
Find regular files in the current directory that are writable by at least somebody </s> find -maxdepth 1 -type f -perm /222
find all regular files which have been modified in the last 48 hours in home folder </s> find ~ -type f -mtime -2
search for the word foo in all the js files in the current folder </s> grep -iH foo `find . -name "*.js"`
Split "file.tar.gz" into files of size 1024 MB with a prefix of "file.tar.gz.part-" </s> split -b 1024m "file.tar.gz" "file.tar.gz.part-"
Prints a random number between 2000 and 65000 </s> seq 2000 65000 | sort -R | head -n 1
find all the files ending with ".coffee" in the current folder and search for the words "re" in each line </s> find . -name \*.coffee -exec grep -m1 -i 're' {} \;
display a long listing of all fles in current folder which have been modified in the last 60 minutes </s> find . -mmin -60 -ls
set a crontab to create or update the timestamp of "washere2" in the current directory every 30 minutes. </s> echo "30 * * * * touch $(pwd)/washere2" | crontab
Counts lines in file $file and prints number only. </s> wc -l $file | awk '{print $1}';
find all files in the folder "myfiles" which are exactly 5 bytes </s> find /myfiles -size 5
Remount "/dev/shm" with a maximum size of "40G" </s> mount -o remount,size=40G /dev/shm
Find all regular files under $dir </s> find $dir -type f
search for all the perl files in the folder /nas/projects/mgmt/scripts/perl which have been modified 8-10 days ago. </s> find /nas/projects/mgmt/scripts/perl -mtime 8 -mtime -10 -daystart -iname "*.pl"
Search for files only that end with .php and look for the string $test inside those files </s> find . -name \*.php -type f -print0 | xargs -0 grep -Hn '$test'
Find regular files in the current directory tree that have executable bits set for the user and group but not for the other </s> find -L . -type f -perm -u=x,g=x  \! -perm -o=x
search for the file filename in the entire file system </s> find / -name filename
sort based on size and display top ten largest normal/regular files in the current folder </s> find . -type f -exec ls -s {} \; | sort -n -r | head -10
Find all regular files with '.txt' extension excluding 'README.txt' files under current directory tree </s> find . -type f -name "*.txt" ! -name README.txt -print
List all files/directories under $dir_name with size $sizeFile and print them according to the format string  '%M %n %u %g %s %Tb %Td %Tk:%TM %p\n' </s> find $dir_name -size $sizeFile -printf '%M %n %u %g %s %Tb %Td %Tk:%TM %p\n'
Print the lines in "table.txt" grouped by the first field </s> cat table.txt | awk '{print $1}' | sort | uniq  | xargs -i grep {} table.txt
Case-insensitive search all existing environment variables and their values for "shell". </s> env | grep -i shell
Saves calendar of $month, $year in the 'cal' variable. </s> cal=$(echo $(cal "$month" "$year"))
Recursively finds in all folders but "./output/*" all files but *.o, *.swp and prints strings with 'soc_attach' text pattern and number of matched string. </s> find .  \( ! -path "./output/*" \) -a \( -type f \) -a \( ! -name '*.o' \) -a \( ! -name '*.swp' \) | xargs grep -n soc_attach
Copies all files under the current folder like "file.ext" with "FooBar" in the path to the root of the current folder, preserving mode, ownership and timestamp attributes. </s> find . -name "file.ext"| grep "FooBar" | xargs -i cp -p "{}" .
Concatenate with a space every other line in "input.txt" </s> paste -s -d' \n' input.txt
Find all directories under /fss/fin </s> find /fss/fin -type d
Rename "Tux.png" to ".Tux.png" </s> mv Tux.png .Tux.png
Modify and rewrite 'file' replacing the first instance of "foo" on each line with "bar" </s> sed -i 's/foo/bar/' file
Search  in current directory downwards all files whose owner is aa1 or whose name is myfile . </s> find . \( -user aa1 -o -name myfile \) -print
Print the 5th space separated fields in "file" as a comma separated list </s> cut -d' ' -f5 file | paste -d',' -s
find all files in the file system which have no user and no group </s> find / -nouser -nogroup
Print the user name of the user running sudo </s> who -m | awk '{print $1}'
search for all the files in the current folder which are bigger than 10KB and display them biggest file </s> find . -size +10k -exec ls -ls {} \+ | sort -n | tail -1
Go to directory /cygdrive/c/Program Files (x86)/$dollarsign using single quotes to escape special characters, including dollar signs </s> cd '/cygdrive/c/Program Files (x86)/$dollarsign'
delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename ".svn" </s> find . -iname .svn -exec rm -rf {} \;
Print content of all files ending with '*.foo' in current directory recursively </s> find . -name '*.foo' -exec cat {} \;
Find files in $DIR_TO_CLEAN that are older than $DAYS_TO_SAVE days and print them with null character appended to their paths </s> find "${DIR_TO_CLEAN?}" -type f -mtime +${DAYS_TO_SAVE?} -print0
Reformat date "Sat Aug 09 13:37:14 2014 +1100" according to format string "%a %b %d %H:%M:%S %Y %z" </s> date -j -f "%a %b %d %H:%M:%S %Y %z" "Sat Aug 09 13:37:14 2014 +1100"
Answer "y" to any prompts in the interactive recursive removal of "dir1", "dir2", and "dir3" </s> yes y | rm -ir dir1 dir2 dir3
Print the first 24 alphanumeric characters from "/dev/urandom", determining C locale for all categories </s> cat /dev/urandom | LC_ALL=C tr -dc 'a-zA-Z0-9' | fold -w 24 | head -n 1
Reversibly sorts content of the '${TMP}/${SCRIPT_NAME}.name' file </s> cat ${TMP}/${SCRIPT_NAME}.name|sort -r;
Finds strings with text "searched-string" recursively in all files of current folder and prints names of files with matched strings. </s> grep -r -l "foo" .
Find writable regular files in the current directory </s> find .  -maxdepth 1 -type f -writable
Search for 'string-to-find' in all files under current directory tree matching the regex 'filename-regex.\*\.html' in their paths and show the matched lines along with the filenames </s> find . -regex filename-regex.\*\.html -exec grep -H string-to-find {} \;
Delete all files named "filename" in the current directory tree, except those with paths ending in "/myfolder/filename" </s> find . -name "filename" -and -not -path "*/myfolder/filename" -delete
Change the permission of all regular files under current directory tree to 644 </s> find . -type f -exec chmod 644 {} \;
Reports count of processors in system. </s> grep "^core id" /proc/cpuinfo | sort -u | wc -l
List all regular files in the current directory tree </s> find . -type f -print0 | xargs -0 ls -l
display all the files in the home folder which end with ".xbm" </s> find ~ -name '*.xbm'
Print the last line of the alphabetically sorted lines in file "set" </s> tail -1 <(sort set)
find all the regular/normal files in the current folder which belong to the group "flossblog" </s> find . -group flossblog -type f
Search all .py files in the current directory tree for "some_function" </s> find . -name \*.py | xargs grep some_function
